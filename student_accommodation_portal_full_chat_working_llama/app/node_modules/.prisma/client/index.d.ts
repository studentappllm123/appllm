
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model University
 * 
 */
export type University = $Result.DefaultSelection<Prisma.$UniversityPayload>
/**
 * Model AccommodationListing
 * 
 */
export type AccommodationListing = $Result.DefaultSelection<Prisma.$AccommodationListingPayload>
/**
 * Model FoodServiceListing
 * 
 */
export type FoodServiceListing = $Result.DefaultSelection<Prisma.$FoodServiceListingPayload>
/**
 * Model Inquiry
 * 
 */
export type Inquiry = $Result.DefaultSelection<Prisma.$InquiryPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model ChatSession
 * 
 */
export type ChatSession = $Result.DefaultSelection<Prisma.$ChatSessionPayload>
/**
 * Model ChatMessage
 * 
 */
export type ChatMessage = $Result.DefaultSelection<Prisma.$ChatMessagePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserType: {
  STUDENT: 'STUDENT',
  PROPERTY_OWNER: 'PROPERTY_OWNER'
};

export type UserType = (typeof UserType)[keyof typeof UserType]


export const Stream: {
  ENGINEERING: 'ENGINEERING',
  MEDICAL: 'MEDICAL'
};

export type Stream = (typeof Stream)[keyof typeof Stream]


export const ServiceType: {
  ACCOMMODATION: 'ACCOMMODATION',
  FOOD: 'FOOD',
  BOTH: 'BOTH'
};

export type ServiceType = (typeof ServiceType)[keyof typeof ServiceType]


export const BusinessType: {
  INDIVIDUAL: 'INDIVIDUAL',
  COMPANY: 'COMPANY',
  INSTITUTION: 'INSTITUTION'
};

export type BusinessType = (typeof BusinessType)[keyof typeof BusinessType]


export const RoomType: {
  SINGLE: 'SINGLE',
  DOUBLE: 'DOUBLE',
  SHARING: 'SHARING',
  STUDIO: 'STUDIO',
  APARTMENT: 'APARTMENT'
};

export type RoomType = (typeof RoomType)[keyof typeof RoomType]


export const AccommodationType: {
  PG: 'PG',
  HOSTEL: 'HOSTEL',
  FLAT: 'FLAT',
  ROOM: 'ROOM',
  APARTMENT: 'APARTMENT'
};

export type AccommodationType = (typeof AccommodationType)[keyof typeof AccommodationType]


export const FoodPreference: {
  VEG: 'VEG',
  NON_VEG: 'NON_VEG',
  BOTH: 'BOTH'
};

export type FoodPreference = (typeof FoodPreference)[keyof typeof FoodPreference]


export const FoodServiceType: {
  MESS: 'MESS',
  CANTEEN: 'CANTEEN',
  TIFFIN_SERVICE: 'TIFFIN_SERVICE',
  RESTAURANT: 'RESTAURANT',
  CAFE: 'CAFE'
};

export type FoodServiceType = (typeof FoodServiceType)[keyof typeof FoodServiceType]


export const PriceRange: {
  BUDGET: 'BUDGET',
  MODERATE: 'MODERATE',
  PREMIUM: 'PREMIUM'
};

export type PriceRange = (typeof PriceRange)[keyof typeof PriceRange]


export const InquiryStatus: {
  PENDING: 'PENDING',
  RESPONDED: 'RESPONDED',
  CLOSED: 'CLOSED'
};

export type InquiryStatus = (typeof InquiryStatus)[keyof typeof InquiryStatus]


export const ChatRole: {
  user: 'user',
  assistant: 'assistant',
  system: 'system'
};

export type ChatRole = (typeof ChatRole)[keyof typeof ChatRole]

}

export type UserType = $Enums.UserType

export const UserType: typeof $Enums.UserType

export type Stream = $Enums.Stream

export const Stream: typeof $Enums.Stream

export type ServiceType = $Enums.ServiceType

export const ServiceType: typeof $Enums.ServiceType

export type BusinessType = $Enums.BusinessType

export const BusinessType: typeof $Enums.BusinessType

export type RoomType = $Enums.RoomType

export const RoomType: typeof $Enums.RoomType

export type AccommodationType = $Enums.AccommodationType

export const AccommodationType: typeof $Enums.AccommodationType

export type FoodPreference = $Enums.FoodPreference

export const FoodPreference: typeof $Enums.FoodPreference

export type FoodServiceType = $Enums.FoodServiceType

export const FoodServiceType: typeof $Enums.FoodServiceType

export type PriceRange = $Enums.PriceRange

export const PriceRange: typeof $Enums.PriceRange

export type InquiryStatus = $Enums.InquiryStatus

export const InquiryStatus: typeof $Enums.InquiryStatus

export type ChatRole = $Enums.ChatRole

export const ChatRole: typeof $Enums.ChatRole

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.university`: Exposes CRUD operations for the **University** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Universities
    * const universities = await prisma.university.findMany()
    * ```
    */
  get university(): Prisma.UniversityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.accommodationListing`: Exposes CRUD operations for the **AccommodationListing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccommodationListings
    * const accommodationListings = await prisma.accommodationListing.findMany()
    * ```
    */
  get accommodationListing(): Prisma.AccommodationListingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.foodServiceListing`: Exposes CRUD operations for the **FoodServiceListing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodServiceListings
    * const foodServiceListings = await prisma.foodServiceListing.findMany()
    * ```
    */
  get foodServiceListing(): Prisma.FoodServiceListingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inquiry`: Exposes CRUD operations for the **Inquiry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inquiries
    * const inquiries = await prisma.inquiry.findMany()
    * ```
    */
  get inquiry(): Prisma.InquiryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatSession`: Exposes CRUD operations for the **ChatSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatSessions
    * const chatSessions = await prisma.chatSession.findMany()
    * ```
    */
  get chatSession(): Prisma.ChatSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessage.findMany()
    * ```
    */
  get chatMessage(): Prisma.ChatMessageDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    University: 'University',
    AccommodationListing: 'AccommodationListing',
    FoodServiceListing: 'FoodServiceListing',
    Inquiry: 'Inquiry',
    Review: 'Review',
    ChatSession: 'ChatSession',
    ChatMessage: 'ChatMessage'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "university" | "accommodationListing" | "foodServiceListing" | "inquiry" | "review" | "chatSession" | "chatMessage"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      University: {
        payload: Prisma.$UniversityPayload<ExtArgs>
        fields: Prisma.UniversityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UniversityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UniversityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          findFirst: {
            args: Prisma.UniversityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UniversityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          findMany: {
            args: Prisma.UniversityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>[]
          }
          create: {
            args: Prisma.UniversityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          createMany: {
            args: Prisma.UniversityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UniversityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>[]
          }
          delete: {
            args: Prisma.UniversityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          update: {
            args: Prisma.UniversityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          deleteMany: {
            args: Prisma.UniversityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UniversityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UniversityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>[]
          }
          upsert: {
            args: Prisma.UniversityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          aggregate: {
            args: Prisma.UniversityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUniversity>
          }
          groupBy: {
            args: Prisma.UniversityGroupByArgs<ExtArgs>
            result: $Utils.Optional<UniversityGroupByOutputType>[]
          }
          count: {
            args: Prisma.UniversityCountArgs<ExtArgs>
            result: $Utils.Optional<UniversityCountAggregateOutputType> | number
          }
        }
      }
      AccommodationListing: {
        payload: Prisma.$AccommodationListingPayload<ExtArgs>
        fields: Prisma.AccommodationListingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccommodationListingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccommodationListingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccommodationListingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccommodationListingPayload>
          }
          findFirst: {
            args: Prisma.AccommodationListingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccommodationListingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccommodationListingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccommodationListingPayload>
          }
          findMany: {
            args: Prisma.AccommodationListingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccommodationListingPayload>[]
          }
          create: {
            args: Prisma.AccommodationListingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccommodationListingPayload>
          }
          createMany: {
            args: Prisma.AccommodationListingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccommodationListingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccommodationListingPayload>[]
          }
          delete: {
            args: Prisma.AccommodationListingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccommodationListingPayload>
          }
          update: {
            args: Prisma.AccommodationListingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccommodationListingPayload>
          }
          deleteMany: {
            args: Prisma.AccommodationListingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccommodationListingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccommodationListingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccommodationListingPayload>[]
          }
          upsert: {
            args: Prisma.AccommodationListingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccommodationListingPayload>
          }
          aggregate: {
            args: Prisma.AccommodationListingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccommodationListing>
          }
          groupBy: {
            args: Prisma.AccommodationListingGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccommodationListingGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccommodationListingCountArgs<ExtArgs>
            result: $Utils.Optional<AccommodationListingCountAggregateOutputType> | number
          }
        }
      }
      FoodServiceListing: {
        payload: Prisma.$FoodServiceListingPayload<ExtArgs>
        fields: Prisma.FoodServiceListingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodServiceListingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodServiceListingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodServiceListingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodServiceListingPayload>
          }
          findFirst: {
            args: Prisma.FoodServiceListingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodServiceListingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodServiceListingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodServiceListingPayload>
          }
          findMany: {
            args: Prisma.FoodServiceListingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodServiceListingPayload>[]
          }
          create: {
            args: Prisma.FoodServiceListingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodServiceListingPayload>
          }
          createMany: {
            args: Prisma.FoodServiceListingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodServiceListingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodServiceListingPayload>[]
          }
          delete: {
            args: Prisma.FoodServiceListingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodServiceListingPayload>
          }
          update: {
            args: Prisma.FoodServiceListingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodServiceListingPayload>
          }
          deleteMany: {
            args: Prisma.FoodServiceListingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodServiceListingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FoodServiceListingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodServiceListingPayload>[]
          }
          upsert: {
            args: Prisma.FoodServiceListingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodServiceListingPayload>
          }
          aggregate: {
            args: Prisma.FoodServiceListingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoodServiceListing>
          }
          groupBy: {
            args: Prisma.FoodServiceListingGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodServiceListingGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodServiceListingCountArgs<ExtArgs>
            result: $Utils.Optional<FoodServiceListingCountAggregateOutputType> | number
          }
        }
      }
      Inquiry: {
        payload: Prisma.$InquiryPayload<ExtArgs>
        fields: Prisma.InquiryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InquiryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InquiryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          findFirst: {
            args: Prisma.InquiryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InquiryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          findMany: {
            args: Prisma.InquiryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>[]
          }
          create: {
            args: Prisma.InquiryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          createMany: {
            args: Prisma.InquiryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InquiryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>[]
          }
          delete: {
            args: Prisma.InquiryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          update: {
            args: Prisma.InquiryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          deleteMany: {
            args: Prisma.InquiryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InquiryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InquiryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>[]
          }
          upsert: {
            args: Prisma.InquiryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          aggregate: {
            args: Prisma.InquiryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInquiry>
          }
          groupBy: {
            args: Prisma.InquiryGroupByArgs<ExtArgs>
            result: $Utils.Optional<InquiryGroupByOutputType>[]
          }
          count: {
            args: Prisma.InquiryCountArgs<ExtArgs>
            result: $Utils.Optional<InquiryCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      ChatSession: {
        payload: Prisma.$ChatSessionPayload<ExtArgs>
        fields: Prisma.ChatSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          findFirst: {
            args: Prisma.ChatSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          findMany: {
            args: Prisma.ChatSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          create: {
            args: Prisma.ChatSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          createMany: {
            args: Prisma.ChatSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          delete: {
            args: Prisma.ChatSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          update: {
            args: Prisma.ChatSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          deleteMany: {
            args: Prisma.ChatSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          upsert: {
            args: Prisma.ChatSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          aggregate: {
            args: Prisma.ChatSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatSession>
          }
          groupBy: {
            args: Prisma.ChatSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatSessionCountArgs<ExtArgs>
            result: $Utils.Optional<ChatSessionCountAggregateOutputType> | number
          }
        }
      }
      ChatMessage: {
        payload: Prisma.$ChatMessagePayload<ExtArgs>
        fields: Prisma.ChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findFirst: {
            args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findMany: {
            args: Prisma.ChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          create: {
            args: Prisma.ChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          createMany: {
            args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          delete: {
            args: Prisma.ChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          update: {
            args: Prisma.ChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          upsert: {
            args: Prisma.ChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          aggregate: {
            args: Prisma.ChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatMessage>
          }
          groupBy: {
            args: Prisma.ChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    university?: UniversityOmit
    accommodationListing?: AccommodationListingOmit
    foodServiceListing?: FoodServiceListingOmit
    inquiry?: InquiryOmit
    review?: ReviewOmit
    chatSession?: ChatSessionOmit
    chatMessage?: ChatMessageOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accommodationListings: number
    foodServiceListings: number
    inquiries: number
    reviews: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accommodationListings?: boolean | UserCountOutputTypeCountAccommodationListingsArgs
    foodServiceListings?: boolean | UserCountOutputTypeCountFoodServiceListingsArgs
    inquiries?: boolean | UserCountOutputTypeCountInquiriesArgs
    reviews?: boolean | UserCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccommodationListingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccommodationListingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFoodServiceListingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodServiceListingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInquiriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InquiryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Count Type AccommodationListingCountOutputType
   */

  export type AccommodationListingCountOutputType = {
    inquiries: number
    reviews: number
  }

  export type AccommodationListingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inquiries?: boolean | AccommodationListingCountOutputTypeCountInquiriesArgs
    reviews?: boolean | AccommodationListingCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * AccommodationListingCountOutputType without action
   */
  export type AccommodationListingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListingCountOutputType
     */
    select?: AccommodationListingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccommodationListingCountOutputType without action
   */
  export type AccommodationListingCountOutputTypeCountInquiriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InquiryWhereInput
  }

  /**
   * AccommodationListingCountOutputType without action
   */
  export type AccommodationListingCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Count Type FoodServiceListingCountOutputType
   */

  export type FoodServiceListingCountOutputType = {
    inquiries: number
    reviews: number
  }

  export type FoodServiceListingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inquiries?: boolean | FoodServiceListingCountOutputTypeCountInquiriesArgs
    reviews?: boolean | FoodServiceListingCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * FoodServiceListingCountOutputType without action
   */
  export type FoodServiceListingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListingCountOutputType
     */
    select?: FoodServiceListingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FoodServiceListingCountOutputType without action
   */
  export type FoodServiceListingCountOutputTypeCountInquiriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InquiryWhereInput
  }

  /**
   * FoodServiceListingCountOutputType without action
   */
  export type FoodServiceListingCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Count Type ChatSessionCountOutputType
   */

  export type ChatSessionCountOutputType = {
    messages: number
  }

  export type ChatSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatSessionCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatSessionCountOutputType without action
   */
  export type ChatSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessionCountOutputType
     */
    select?: ChatSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatSessionCountOutputType without action
   */
  export type ChatSessionCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    phone: string | null
    userType: $Enums.UserType | null
    createdAt: Date | null
    updatedAt: Date | null
    university: string | null
    stream: $Enums.Stream | null
    serviceType: $Enums.ServiceType | null
    businessType: $Enums.BusinessType | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    phone: string | null
    userType: $Enums.UserType | null
    createdAt: Date | null
    updatedAt: Date | null
    university: string | null
    stream: $Enums.Stream | null
    serviceType: $Enums.ServiceType | null
    businessType: $Enums.BusinessType | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    phone: number
    userType: number
    createdAt: number
    updatedAt: number
    university: number
    stream: number
    serviceType: number
    businessType: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phone?: true
    userType?: true
    createdAt?: true
    updatedAt?: true
    university?: true
    stream?: true
    serviceType?: true
    businessType?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phone?: true
    userType?: true
    createdAt?: true
    updatedAt?: true
    university?: true
    stream?: true
    serviceType?: true
    businessType?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phone?: true
    userType?: true
    createdAt?: true
    updatedAt?: true
    university?: true
    stream?: true
    serviceType?: true
    businessType?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    phone: string
    userType: $Enums.UserType
    createdAt: Date
    updatedAt: Date
    university: string | null
    stream: $Enums.Stream | null
    serviceType: $Enums.ServiceType | null
    businessType: $Enums.BusinessType | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    userType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    university?: boolean
    stream?: boolean
    serviceType?: boolean
    businessType?: boolean
    accommodationListings?: boolean | User$accommodationListingsArgs<ExtArgs>
    foodServiceListings?: boolean | User$foodServiceListingsArgs<ExtArgs>
    inquiries?: boolean | User$inquiriesArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    userType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    university?: boolean
    stream?: boolean
    serviceType?: boolean
    businessType?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    userType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    university?: boolean
    stream?: boolean
    serviceType?: boolean
    businessType?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    userType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    university?: boolean
    stream?: boolean
    serviceType?: boolean
    businessType?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "phone" | "userType" | "createdAt" | "updatedAt" | "university" | "stream" | "serviceType" | "businessType", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accommodationListings?: boolean | User$accommodationListingsArgs<ExtArgs>
    foodServiceListings?: boolean | User$foodServiceListingsArgs<ExtArgs>
    inquiries?: boolean | User$inquiriesArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accommodationListings: Prisma.$AccommodationListingPayload<ExtArgs>[]
      foodServiceListings: Prisma.$FoodServiceListingPayload<ExtArgs>[]
      inquiries: Prisma.$InquiryPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string
      phone: string
      userType: $Enums.UserType
      createdAt: Date
      updatedAt: Date
      university: string | null
      stream: $Enums.Stream | null
      serviceType: $Enums.ServiceType | null
      businessType: $Enums.BusinessType | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accommodationListings<T extends User$accommodationListingsArgs<ExtArgs> = {}>(args?: Subset<T, User$accommodationListingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccommodationListingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    foodServiceListings<T extends User$foodServiceListingsArgs<ExtArgs> = {}>(args?: Subset<T, User$foodServiceListingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodServiceListingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inquiries<T extends User$inquiriesArgs<ExtArgs> = {}>(args?: Subset<T, User$inquiriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends User$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly userType: FieldRef<"User", 'UserType'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly university: FieldRef<"User", 'String'>
    readonly stream: FieldRef<"User", 'Stream'>
    readonly serviceType: FieldRef<"User", 'ServiceType'>
    readonly businessType: FieldRef<"User", 'BusinessType'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accommodationListings
   */
  export type User$accommodationListingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListing
     */
    select?: AccommodationListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccommodationListing
     */
    omit?: AccommodationListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccommodationListingInclude<ExtArgs> | null
    where?: AccommodationListingWhereInput
    orderBy?: AccommodationListingOrderByWithRelationInput | AccommodationListingOrderByWithRelationInput[]
    cursor?: AccommodationListingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccommodationListingScalarFieldEnum | AccommodationListingScalarFieldEnum[]
  }

  /**
   * User.foodServiceListings
   */
  export type User$foodServiceListingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListing
     */
    select?: FoodServiceListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodServiceListing
     */
    omit?: FoodServiceListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodServiceListingInclude<ExtArgs> | null
    where?: FoodServiceListingWhereInput
    orderBy?: FoodServiceListingOrderByWithRelationInput | FoodServiceListingOrderByWithRelationInput[]
    cursor?: FoodServiceListingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FoodServiceListingScalarFieldEnum | FoodServiceListingScalarFieldEnum[]
  }

  /**
   * User.inquiries
   */
  export type User$inquiriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inquiry
     */
    omit?: InquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    where?: InquiryWhereInput
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    cursor?: InquiryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * User.reviews
   */
  export type User$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model University
   */

  export type AggregateUniversity = {
    _count: UniversityCountAggregateOutputType | null
    _min: UniversityMinAggregateOutputType | null
    _max: UniversityMaxAggregateOutputType | null
  }

  export type UniversityMinAggregateOutputType = {
    id: string | null
    name: string | null
    stream: $Enums.Stream | null
    city: string | null
    state: string | null
  }

  export type UniversityMaxAggregateOutputType = {
    id: string | null
    name: string | null
    stream: $Enums.Stream | null
    city: string | null
    state: string | null
  }

  export type UniversityCountAggregateOutputType = {
    id: number
    name: number
    stream: number
    city: number
    state: number
    _all: number
  }


  export type UniversityMinAggregateInputType = {
    id?: true
    name?: true
    stream?: true
    city?: true
    state?: true
  }

  export type UniversityMaxAggregateInputType = {
    id?: true
    name?: true
    stream?: true
    city?: true
    state?: true
  }

  export type UniversityCountAggregateInputType = {
    id?: true
    name?: true
    stream?: true
    city?: true
    state?: true
    _all?: true
  }

  export type UniversityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which University to aggregate.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Universities
    **/
    _count?: true | UniversityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UniversityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UniversityMaxAggregateInputType
  }

  export type GetUniversityAggregateType<T extends UniversityAggregateArgs> = {
        [P in keyof T & keyof AggregateUniversity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUniversity[P]>
      : GetScalarType<T[P], AggregateUniversity[P]>
  }




  export type UniversityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UniversityWhereInput
    orderBy?: UniversityOrderByWithAggregationInput | UniversityOrderByWithAggregationInput[]
    by: UniversityScalarFieldEnum[] | UniversityScalarFieldEnum
    having?: UniversityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UniversityCountAggregateInputType | true
    _min?: UniversityMinAggregateInputType
    _max?: UniversityMaxAggregateInputType
  }

  export type UniversityGroupByOutputType = {
    id: string
    name: string
    stream: $Enums.Stream
    city: string
    state: string
    _count: UniversityCountAggregateOutputType | null
    _min: UniversityMinAggregateOutputType | null
    _max: UniversityMaxAggregateOutputType | null
  }

  type GetUniversityGroupByPayload<T extends UniversityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UniversityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UniversityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UniversityGroupByOutputType[P]>
            : GetScalarType<T[P], UniversityGroupByOutputType[P]>
        }
      >
    >


  export type UniversitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    stream?: boolean
    city?: boolean
    state?: boolean
  }, ExtArgs["result"]["university"]>

  export type UniversitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    stream?: boolean
    city?: boolean
    state?: boolean
  }, ExtArgs["result"]["university"]>

  export type UniversitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    stream?: boolean
    city?: boolean
    state?: boolean
  }, ExtArgs["result"]["university"]>

  export type UniversitySelectScalar = {
    id?: boolean
    name?: boolean
    stream?: boolean
    city?: boolean
    state?: boolean
  }

  export type UniversityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "stream" | "city" | "state", ExtArgs["result"]["university"]>

  export type $UniversityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "University"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      stream: $Enums.Stream
      city: string
      state: string
    }, ExtArgs["result"]["university"]>
    composites: {}
  }

  type UniversityGetPayload<S extends boolean | null | undefined | UniversityDefaultArgs> = $Result.GetResult<Prisma.$UniversityPayload, S>

  type UniversityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UniversityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UniversityCountAggregateInputType | true
    }

  export interface UniversityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['University'], meta: { name: 'University' } }
    /**
     * Find zero or one University that matches the filter.
     * @param {UniversityFindUniqueArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UniversityFindUniqueArgs>(args: SelectSubset<T, UniversityFindUniqueArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one University that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UniversityFindUniqueOrThrowArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UniversityFindUniqueOrThrowArgs>(args: SelectSubset<T, UniversityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first University that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityFindFirstArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UniversityFindFirstArgs>(args?: SelectSubset<T, UniversityFindFirstArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first University that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityFindFirstOrThrowArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UniversityFindFirstOrThrowArgs>(args?: SelectSubset<T, UniversityFindFirstOrThrowArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Universities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Universities
     * const universities = await prisma.university.findMany()
     * 
     * // Get first 10 Universities
     * const universities = await prisma.university.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const universityWithIdOnly = await prisma.university.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UniversityFindManyArgs>(args?: SelectSubset<T, UniversityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a University.
     * @param {UniversityCreateArgs} args - Arguments to create a University.
     * @example
     * // Create one University
     * const University = await prisma.university.create({
     *   data: {
     *     // ... data to create a University
     *   }
     * })
     * 
     */
    create<T extends UniversityCreateArgs>(args: SelectSubset<T, UniversityCreateArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Universities.
     * @param {UniversityCreateManyArgs} args - Arguments to create many Universities.
     * @example
     * // Create many Universities
     * const university = await prisma.university.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UniversityCreateManyArgs>(args?: SelectSubset<T, UniversityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Universities and returns the data saved in the database.
     * @param {UniversityCreateManyAndReturnArgs} args - Arguments to create many Universities.
     * @example
     * // Create many Universities
     * const university = await prisma.university.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Universities and only return the `id`
     * const universityWithIdOnly = await prisma.university.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UniversityCreateManyAndReturnArgs>(args?: SelectSubset<T, UniversityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a University.
     * @param {UniversityDeleteArgs} args - Arguments to delete one University.
     * @example
     * // Delete one University
     * const University = await prisma.university.delete({
     *   where: {
     *     // ... filter to delete one University
     *   }
     * })
     * 
     */
    delete<T extends UniversityDeleteArgs>(args: SelectSubset<T, UniversityDeleteArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one University.
     * @param {UniversityUpdateArgs} args - Arguments to update one University.
     * @example
     * // Update one University
     * const university = await prisma.university.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UniversityUpdateArgs>(args: SelectSubset<T, UniversityUpdateArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Universities.
     * @param {UniversityDeleteManyArgs} args - Arguments to filter Universities to delete.
     * @example
     * // Delete a few Universities
     * const { count } = await prisma.university.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UniversityDeleteManyArgs>(args?: SelectSubset<T, UniversityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Universities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Universities
     * const university = await prisma.university.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UniversityUpdateManyArgs>(args: SelectSubset<T, UniversityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Universities and returns the data updated in the database.
     * @param {UniversityUpdateManyAndReturnArgs} args - Arguments to update many Universities.
     * @example
     * // Update many Universities
     * const university = await prisma.university.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Universities and only return the `id`
     * const universityWithIdOnly = await prisma.university.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UniversityUpdateManyAndReturnArgs>(args: SelectSubset<T, UniversityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one University.
     * @param {UniversityUpsertArgs} args - Arguments to update or create a University.
     * @example
     * // Update or create a University
     * const university = await prisma.university.upsert({
     *   create: {
     *     // ... data to create a University
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the University we want to update
     *   }
     * })
     */
    upsert<T extends UniversityUpsertArgs>(args: SelectSubset<T, UniversityUpsertArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Universities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityCountArgs} args - Arguments to filter Universities to count.
     * @example
     * // Count the number of Universities
     * const count = await prisma.university.count({
     *   where: {
     *     // ... the filter for the Universities we want to count
     *   }
     * })
    **/
    count<T extends UniversityCountArgs>(
      args?: Subset<T, UniversityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UniversityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a University.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UniversityAggregateArgs>(args: Subset<T, UniversityAggregateArgs>): Prisma.PrismaPromise<GetUniversityAggregateType<T>>

    /**
     * Group by University.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UniversityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UniversityGroupByArgs['orderBy'] }
        : { orderBy?: UniversityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UniversityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUniversityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the University model
   */
  readonly fields: UniversityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for University.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UniversityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the University model
   */
  interface UniversityFieldRefs {
    readonly id: FieldRef<"University", 'String'>
    readonly name: FieldRef<"University", 'String'>
    readonly stream: FieldRef<"University", 'Stream'>
    readonly city: FieldRef<"University", 'String'>
    readonly state: FieldRef<"University", 'String'>
  }
    

  // Custom InputTypes
  /**
   * University findUnique
   */
  export type UniversityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the University
     */
    omit?: UniversityOmit<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where: UniversityWhereUniqueInput
  }

  /**
   * University findUniqueOrThrow
   */
  export type UniversityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the University
     */
    omit?: UniversityOmit<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where: UniversityWhereUniqueInput
  }

  /**
   * University findFirst
   */
  export type UniversityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the University
     */
    omit?: UniversityOmit<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Universities.
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Universities.
     */
    distinct?: UniversityScalarFieldEnum | UniversityScalarFieldEnum[]
  }

  /**
   * University findFirstOrThrow
   */
  export type UniversityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the University
     */
    omit?: UniversityOmit<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Universities.
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Universities.
     */
    distinct?: UniversityScalarFieldEnum | UniversityScalarFieldEnum[]
  }

  /**
   * University findMany
   */
  export type UniversityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the University
     */
    omit?: UniversityOmit<ExtArgs> | null
    /**
     * Filter, which Universities to fetch.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Universities.
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    distinct?: UniversityScalarFieldEnum | UniversityScalarFieldEnum[]
  }

  /**
   * University create
   */
  export type UniversityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the University
     */
    omit?: UniversityOmit<ExtArgs> | null
    /**
     * The data needed to create a University.
     */
    data: XOR<UniversityCreateInput, UniversityUncheckedCreateInput>
  }

  /**
   * University createMany
   */
  export type UniversityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Universities.
     */
    data: UniversityCreateManyInput | UniversityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * University createManyAndReturn
   */
  export type UniversityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the University
     */
    omit?: UniversityOmit<ExtArgs> | null
    /**
     * The data used to create many Universities.
     */
    data: UniversityCreateManyInput | UniversityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * University update
   */
  export type UniversityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the University
     */
    omit?: UniversityOmit<ExtArgs> | null
    /**
     * The data needed to update a University.
     */
    data: XOR<UniversityUpdateInput, UniversityUncheckedUpdateInput>
    /**
     * Choose, which University to update.
     */
    where: UniversityWhereUniqueInput
  }

  /**
   * University updateMany
   */
  export type UniversityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Universities.
     */
    data: XOR<UniversityUpdateManyMutationInput, UniversityUncheckedUpdateManyInput>
    /**
     * Filter which Universities to update
     */
    where?: UniversityWhereInput
    /**
     * Limit how many Universities to update.
     */
    limit?: number
  }

  /**
   * University updateManyAndReturn
   */
  export type UniversityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the University
     */
    omit?: UniversityOmit<ExtArgs> | null
    /**
     * The data used to update Universities.
     */
    data: XOR<UniversityUpdateManyMutationInput, UniversityUncheckedUpdateManyInput>
    /**
     * Filter which Universities to update
     */
    where?: UniversityWhereInput
    /**
     * Limit how many Universities to update.
     */
    limit?: number
  }

  /**
   * University upsert
   */
  export type UniversityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the University
     */
    omit?: UniversityOmit<ExtArgs> | null
    /**
     * The filter to search for the University to update in case it exists.
     */
    where: UniversityWhereUniqueInput
    /**
     * In case the University found by the `where` argument doesn't exist, create a new University with this data.
     */
    create: XOR<UniversityCreateInput, UniversityUncheckedCreateInput>
    /**
     * In case the University was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UniversityUpdateInput, UniversityUncheckedUpdateInput>
  }

  /**
   * University delete
   */
  export type UniversityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the University
     */
    omit?: UniversityOmit<ExtArgs> | null
    /**
     * Filter which University to delete.
     */
    where: UniversityWhereUniqueInput
  }

  /**
   * University deleteMany
   */
  export type UniversityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Universities to delete
     */
    where?: UniversityWhereInput
    /**
     * Limit how many Universities to delete.
     */
    limit?: number
  }

  /**
   * University without action
   */
  export type UniversityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the University
     */
    omit?: UniversityOmit<ExtArgs> | null
  }


  /**
   * Model AccommodationListing
   */

  export type AggregateAccommodationListing = {
    _count: AccommodationListingCountAggregateOutputType | null
    _avg: AccommodationListingAvgAggregateOutputType | null
    _sum: AccommodationListingSumAggregateOutputType | null
    _min: AccommodationListingMinAggregateOutputType | null
    _max: AccommodationListingMaxAggregateOutputType | null
  }

  export type AccommodationListingAvgAggregateOutputType = {
    dailyRate: number | null
    monthlyRent: number | null
    minStay: number | null
    deposit: number | null
    latitude: number | null
    longitude: number | null
    distanceFromUni: number | null
  }

  export type AccommodationListingSumAggregateOutputType = {
    dailyRate: number | null
    monthlyRent: number | null
    minStay: number | null
    deposit: number | null
    latitude: number | null
    longitude: number | null
    distanceFromUni: number | null
  }

  export type AccommodationListingMinAggregateOutputType = {
    id: string | null
    propertyName: string | null
    dailyRate: number | null
    monthlyRent: number | null
    minStay: number | null
    deposit: number | null
    availability: boolean | null
    roomType: $Enums.RoomType | null
    accommodationType: $Enums.AccommodationType | null
    foodPreference: $Enums.FoodPreference | null
    address: string | null
    latitude: number | null
    longitude: number | null
    contactInfo: string | null
    description: string | null
    distanceFromUni: number | null
    createdAt: Date | null
    updatedAt: Date | null
    ownerId: string | null
  }

  export type AccommodationListingMaxAggregateOutputType = {
    id: string | null
    propertyName: string | null
    dailyRate: number | null
    monthlyRent: number | null
    minStay: number | null
    deposit: number | null
    availability: boolean | null
    roomType: $Enums.RoomType | null
    accommodationType: $Enums.AccommodationType | null
    foodPreference: $Enums.FoodPreference | null
    address: string | null
    latitude: number | null
    longitude: number | null
    contactInfo: string | null
    description: string | null
    distanceFromUni: number | null
    createdAt: Date | null
    updatedAt: Date | null
    ownerId: string | null
  }

  export type AccommodationListingCountAggregateOutputType = {
    id: number
    propertyName: number
    photos: number
    dailyRate: number
    monthlyRent: number
    minStay: number
    deposit: number
    availability: number
    amenities: number
    roomType: number
    accommodationType: number
    livingPreferences: number
    foodPreference: number
    address: number
    latitude: number
    longitude: number
    contactInfo: number
    description: number
    nearbyUniversities: number
    distanceFromUni: number
    createdAt: number
    updatedAt: number
    ownerId: number
    _all: number
  }


  export type AccommodationListingAvgAggregateInputType = {
    dailyRate?: true
    monthlyRent?: true
    minStay?: true
    deposit?: true
    latitude?: true
    longitude?: true
    distanceFromUni?: true
  }

  export type AccommodationListingSumAggregateInputType = {
    dailyRate?: true
    monthlyRent?: true
    minStay?: true
    deposit?: true
    latitude?: true
    longitude?: true
    distanceFromUni?: true
  }

  export type AccommodationListingMinAggregateInputType = {
    id?: true
    propertyName?: true
    dailyRate?: true
    monthlyRent?: true
    minStay?: true
    deposit?: true
    availability?: true
    roomType?: true
    accommodationType?: true
    foodPreference?: true
    address?: true
    latitude?: true
    longitude?: true
    contactInfo?: true
    description?: true
    distanceFromUni?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
  }

  export type AccommodationListingMaxAggregateInputType = {
    id?: true
    propertyName?: true
    dailyRate?: true
    monthlyRent?: true
    minStay?: true
    deposit?: true
    availability?: true
    roomType?: true
    accommodationType?: true
    foodPreference?: true
    address?: true
    latitude?: true
    longitude?: true
    contactInfo?: true
    description?: true
    distanceFromUni?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
  }

  export type AccommodationListingCountAggregateInputType = {
    id?: true
    propertyName?: true
    photos?: true
    dailyRate?: true
    monthlyRent?: true
    minStay?: true
    deposit?: true
    availability?: true
    amenities?: true
    roomType?: true
    accommodationType?: true
    livingPreferences?: true
    foodPreference?: true
    address?: true
    latitude?: true
    longitude?: true
    contactInfo?: true
    description?: true
    nearbyUniversities?: true
    distanceFromUni?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
    _all?: true
  }

  export type AccommodationListingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccommodationListing to aggregate.
     */
    where?: AccommodationListingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccommodationListings to fetch.
     */
    orderBy?: AccommodationListingOrderByWithRelationInput | AccommodationListingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccommodationListingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccommodationListings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccommodationListings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccommodationListings
    **/
    _count?: true | AccommodationListingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccommodationListingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccommodationListingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccommodationListingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccommodationListingMaxAggregateInputType
  }

  export type GetAccommodationListingAggregateType<T extends AccommodationListingAggregateArgs> = {
        [P in keyof T & keyof AggregateAccommodationListing]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccommodationListing[P]>
      : GetScalarType<T[P], AggregateAccommodationListing[P]>
  }




  export type AccommodationListingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccommodationListingWhereInput
    orderBy?: AccommodationListingOrderByWithAggregationInput | AccommodationListingOrderByWithAggregationInput[]
    by: AccommodationListingScalarFieldEnum[] | AccommodationListingScalarFieldEnum
    having?: AccommodationListingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccommodationListingCountAggregateInputType | true
    _avg?: AccommodationListingAvgAggregateInputType
    _sum?: AccommodationListingSumAggregateInputType
    _min?: AccommodationListingMinAggregateInputType
    _max?: AccommodationListingMaxAggregateInputType
  }

  export type AccommodationListingGroupByOutputType = {
    id: string
    propertyName: string
    photos: string[]
    dailyRate: number
    monthlyRent: number
    minStay: number
    deposit: number | null
    availability: boolean
    amenities: string[]
    roomType: $Enums.RoomType
    accommodationType: $Enums.AccommodationType
    livingPreferences: string[]
    foodPreference: $Enums.FoodPreference
    address: string
    latitude: number | null
    longitude: number | null
    contactInfo: string
    description: string | null
    nearbyUniversities: string[]
    distanceFromUni: number | null
    createdAt: Date
    updatedAt: Date
    ownerId: string
    _count: AccommodationListingCountAggregateOutputType | null
    _avg: AccommodationListingAvgAggregateOutputType | null
    _sum: AccommodationListingSumAggregateOutputType | null
    _min: AccommodationListingMinAggregateOutputType | null
    _max: AccommodationListingMaxAggregateOutputType | null
  }

  type GetAccommodationListingGroupByPayload<T extends AccommodationListingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccommodationListingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccommodationListingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccommodationListingGroupByOutputType[P]>
            : GetScalarType<T[P], AccommodationListingGroupByOutputType[P]>
        }
      >
    >


  export type AccommodationListingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    propertyName?: boolean
    photos?: boolean
    dailyRate?: boolean
    monthlyRent?: boolean
    minStay?: boolean
    deposit?: boolean
    availability?: boolean
    amenities?: boolean
    roomType?: boolean
    accommodationType?: boolean
    livingPreferences?: boolean
    foodPreference?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    contactInfo?: boolean
    description?: boolean
    nearbyUniversities?: boolean
    distanceFromUni?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    inquiries?: boolean | AccommodationListing$inquiriesArgs<ExtArgs>
    reviews?: boolean | AccommodationListing$reviewsArgs<ExtArgs>
    _count?: boolean | AccommodationListingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accommodationListing"]>

  export type AccommodationListingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    propertyName?: boolean
    photos?: boolean
    dailyRate?: boolean
    monthlyRent?: boolean
    minStay?: boolean
    deposit?: boolean
    availability?: boolean
    amenities?: boolean
    roomType?: boolean
    accommodationType?: boolean
    livingPreferences?: boolean
    foodPreference?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    contactInfo?: boolean
    description?: boolean
    nearbyUniversities?: boolean
    distanceFromUni?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accommodationListing"]>

  export type AccommodationListingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    propertyName?: boolean
    photos?: boolean
    dailyRate?: boolean
    monthlyRent?: boolean
    minStay?: boolean
    deposit?: boolean
    availability?: boolean
    amenities?: boolean
    roomType?: boolean
    accommodationType?: boolean
    livingPreferences?: boolean
    foodPreference?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    contactInfo?: boolean
    description?: boolean
    nearbyUniversities?: boolean
    distanceFromUni?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accommodationListing"]>

  export type AccommodationListingSelectScalar = {
    id?: boolean
    propertyName?: boolean
    photos?: boolean
    dailyRate?: boolean
    monthlyRent?: boolean
    minStay?: boolean
    deposit?: boolean
    availability?: boolean
    amenities?: boolean
    roomType?: boolean
    accommodationType?: boolean
    livingPreferences?: boolean
    foodPreference?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    contactInfo?: boolean
    description?: boolean
    nearbyUniversities?: boolean
    distanceFromUni?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
  }

  export type AccommodationListingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "propertyName" | "photos" | "dailyRate" | "monthlyRent" | "minStay" | "deposit" | "availability" | "amenities" | "roomType" | "accommodationType" | "livingPreferences" | "foodPreference" | "address" | "latitude" | "longitude" | "contactInfo" | "description" | "nearbyUniversities" | "distanceFromUni" | "createdAt" | "updatedAt" | "ownerId", ExtArgs["result"]["accommodationListing"]>
  export type AccommodationListingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    inquiries?: boolean | AccommodationListing$inquiriesArgs<ExtArgs>
    reviews?: boolean | AccommodationListing$reviewsArgs<ExtArgs>
    _count?: boolean | AccommodationListingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AccommodationListingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccommodationListingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccommodationListingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccommodationListing"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      inquiries: Prisma.$InquiryPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      propertyName: string
      photos: string[]
      dailyRate: number
      monthlyRent: number
      minStay: number
      deposit: number | null
      availability: boolean
      amenities: string[]
      roomType: $Enums.RoomType
      accommodationType: $Enums.AccommodationType
      livingPreferences: string[]
      foodPreference: $Enums.FoodPreference
      address: string
      latitude: number | null
      longitude: number | null
      contactInfo: string
      description: string | null
      nearbyUniversities: string[]
      distanceFromUni: number | null
      createdAt: Date
      updatedAt: Date
      ownerId: string
    }, ExtArgs["result"]["accommodationListing"]>
    composites: {}
  }

  type AccommodationListingGetPayload<S extends boolean | null | undefined | AccommodationListingDefaultArgs> = $Result.GetResult<Prisma.$AccommodationListingPayload, S>

  type AccommodationListingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccommodationListingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccommodationListingCountAggregateInputType | true
    }

  export interface AccommodationListingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccommodationListing'], meta: { name: 'AccommodationListing' } }
    /**
     * Find zero or one AccommodationListing that matches the filter.
     * @param {AccommodationListingFindUniqueArgs} args - Arguments to find a AccommodationListing
     * @example
     * // Get one AccommodationListing
     * const accommodationListing = await prisma.accommodationListing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccommodationListingFindUniqueArgs>(args: SelectSubset<T, AccommodationListingFindUniqueArgs<ExtArgs>>): Prisma__AccommodationListingClient<$Result.GetResult<Prisma.$AccommodationListingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccommodationListing that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccommodationListingFindUniqueOrThrowArgs} args - Arguments to find a AccommodationListing
     * @example
     * // Get one AccommodationListing
     * const accommodationListing = await prisma.accommodationListing.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccommodationListingFindUniqueOrThrowArgs>(args: SelectSubset<T, AccommodationListingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccommodationListingClient<$Result.GetResult<Prisma.$AccommodationListingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccommodationListing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccommodationListingFindFirstArgs} args - Arguments to find a AccommodationListing
     * @example
     * // Get one AccommodationListing
     * const accommodationListing = await prisma.accommodationListing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccommodationListingFindFirstArgs>(args?: SelectSubset<T, AccommodationListingFindFirstArgs<ExtArgs>>): Prisma__AccommodationListingClient<$Result.GetResult<Prisma.$AccommodationListingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccommodationListing that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccommodationListingFindFirstOrThrowArgs} args - Arguments to find a AccommodationListing
     * @example
     * // Get one AccommodationListing
     * const accommodationListing = await prisma.accommodationListing.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccommodationListingFindFirstOrThrowArgs>(args?: SelectSubset<T, AccommodationListingFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccommodationListingClient<$Result.GetResult<Prisma.$AccommodationListingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccommodationListings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccommodationListingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccommodationListings
     * const accommodationListings = await prisma.accommodationListing.findMany()
     * 
     * // Get first 10 AccommodationListings
     * const accommodationListings = await prisma.accommodationListing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accommodationListingWithIdOnly = await prisma.accommodationListing.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccommodationListingFindManyArgs>(args?: SelectSubset<T, AccommodationListingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccommodationListingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccommodationListing.
     * @param {AccommodationListingCreateArgs} args - Arguments to create a AccommodationListing.
     * @example
     * // Create one AccommodationListing
     * const AccommodationListing = await prisma.accommodationListing.create({
     *   data: {
     *     // ... data to create a AccommodationListing
     *   }
     * })
     * 
     */
    create<T extends AccommodationListingCreateArgs>(args: SelectSubset<T, AccommodationListingCreateArgs<ExtArgs>>): Prisma__AccommodationListingClient<$Result.GetResult<Prisma.$AccommodationListingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccommodationListings.
     * @param {AccommodationListingCreateManyArgs} args - Arguments to create many AccommodationListings.
     * @example
     * // Create many AccommodationListings
     * const accommodationListing = await prisma.accommodationListing.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccommodationListingCreateManyArgs>(args?: SelectSubset<T, AccommodationListingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AccommodationListings and returns the data saved in the database.
     * @param {AccommodationListingCreateManyAndReturnArgs} args - Arguments to create many AccommodationListings.
     * @example
     * // Create many AccommodationListings
     * const accommodationListing = await prisma.accommodationListing.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AccommodationListings and only return the `id`
     * const accommodationListingWithIdOnly = await prisma.accommodationListing.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccommodationListingCreateManyAndReturnArgs>(args?: SelectSubset<T, AccommodationListingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccommodationListingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AccommodationListing.
     * @param {AccommodationListingDeleteArgs} args - Arguments to delete one AccommodationListing.
     * @example
     * // Delete one AccommodationListing
     * const AccommodationListing = await prisma.accommodationListing.delete({
     *   where: {
     *     // ... filter to delete one AccommodationListing
     *   }
     * })
     * 
     */
    delete<T extends AccommodationListingDeleteArgs>(args: SelectSubset<T, AccommodationListingDeleteArgs<ExtArgs>>): Prisma__AccommodationListingClient<$Result.GetResult<Prisma.$AccommodationListingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccommodationListing.
     * @param {AccommodationListingUpdateArgs} args - Arguments to update one AccommodationListing.
     * @example
     * // Update one AccommodationListing
     * const accommodationListing = await prisma.accommodationListing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccommodationListingUpdateArgs>(args: SelectSubset<T, AccommodationListingUpdateArgs<ExtArgs>>): Prisma__AccommodationListingClient<$Result.GetResult<Prisma.$AccommodationListingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccommodationListings.
     * @param {AccommodationListingDeleteManyArgs} args - Arguments to filter AccommodationListings to delete.
     * @example
     * // Delete a few AccommodationListings
     * const { count } = await prisma.accommodationListing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccommodationListingDeleteManyArgs>(args?: SelectSubset<T, AccommodationListingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccommodationListings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccommodationListingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccommodationListings
     * const accommodationListing = await prisma.accommodationListing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccommodationListingUpdateManyArgs>(args: SelectSubset<T, AccommodationListingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccommodationListings and returns the data updated in the database.
     * @param {AccommodationListingUpdateManyAndReturnArgs} args - Arguments to update many AccommodationListings.
     * @example
     * // Update many AccommodationListings
     * const accommodationListing = await prisma.accommodationListing.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AccommodationListings and only return the `id`
     * const accommodationListingWithIdOnly = await prisma.accommodationListing.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccommodationListingUpdateManyAndReturnArgs>(args: SelectSubset<T, AccommodationListingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccommodationListingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AccommodationListing.
     * @param {AccommodationListingUpsertArgs} args - Arguments to update or create a AccommodationListing.
     * @example
     * // Update or create a AccommodationListing
     * const accommodationListing = await prisma.accommodationListing.upsert({
     *   create: {
     *     // ... data to create a AccommodationListing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccommodationListing we want to update
     *   }
     * })
     */
    upsert<T extends AccommodationListingUpsertArgs>(args: SelectSubset<T, AccommodationListingUpsertArgs<ExtArgs>>): Prisma__AccommodationListingClient<$Result.GetResult<Prisma.$AccommodationListingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccommodationListings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccommodationListingCountArgs} args - Arguments to filter AccommodationListings to count.
     * @example
     * // Count the number of AccommodationListings
     * const count = await prisma.accommodationListing.count({
     *   where: {
     *     // ... the filter for the AccommodationListings we want to count
     *   }
     * })
    **/
    count<T extends AccommodationListingCountArgs>(
      args?: Subset<T, AccommodationListingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccommodationListingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccommodationListing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccommodationListingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccommodationListingAggregateArgs>(args: Subset<T, AccommodationListingAggregateArgs>): Prisma.PrismaPromise<GetAccommodationListingAggregateType<T>>

    /**
     * Group by AccommodationListing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccommodationListingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccommodationListingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccommodationListingGroupByArgs['orderBy'] }
        : { orderBy?: AccommodationListingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccommodationListingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccommodationListingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccommodationListing model
   */
  readonly fields: AccommodationListingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccommodationListing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccommodationListingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    inquiries<T extends AccommodationListing$inquiriesArgs<ExtArgs> = {}>(args?: Subset<T, AccommodationListing$inquiriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends AccommodationListing$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, AccommodationListing$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccommodationListing model
   */
  interface AccommodationListingFieldRefs {
    readonly id: FieldRef<"AccommodationListing", 'String'>
    readonly propertyName: FieldRef<"AccommodationListing", 'String'>
    readonly photos: FieldRef<"AccommodationListing", 'String[]'>
    readonly dailyRate: FieldRef<"AccommodationListing", 'Int'>
    readonly monthlyRent: FieldRef<"AccommodationListing", 'Int'>
    readonly minStay: FieldRef<"AccommodationListing", 'Int'>
    readonly deposit: FieldRef<"AccommodationListing", 'Int'>
    readonly availability: FieldRef<"AccommodationListing", 'Boolean'>
    readonly amenities: FieldRef<"AccommodationListing", 'String[]'>
    readonly roomType: FieldRef<"AccommodationListing", 'RoomType'>
    readonly accommodationType: FieldRef<"AccommodationListing", 'AccommodationType'>
    readonly livingPreferences: FieldRef<"AccommodationListing", 'String[]'>
    readonly foodPreference: FieldRef<"AccommodationListing", 'FoodPreference'>
    readonly address: FieldRef<"AccommodationListing", 'String'>
    readonly latitude: FieldRef<"AccommodationListing", 'Float'>
    readonly longitude: FieldRef<"AccommodationListing", 'Float'>
    readonly contactInfo: FieldRef<"AccommodationListing", 'String'>
    readonly description: FieldRef<"AccommodationListing", 'String'>
    readonly nearbyUniversities: FieldRef<"AccommodationListing", 'String[]'>
    readonly distanceFromUni: FieldRef<"AccommodationListing", 'Float'>
    readonly createdAt: FieldRef<"AccommodationListing", 'DateTime'>
    readonly updatedAt: FieldRef<"AccommodationListing", 'DateTime'>
    readonly ownerId: FieldRef<"AccommodationListing", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AccommodationListing findUnique
   */
  export type AccommodationListingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListing
     */
    select?: AccommodationListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccommodationListing
     */
    omit?: AccommodationListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccommodationListingInclude<ExtArgs> | null
    /**
     * Filter, which AccommodationListing to fetch.
     */
    where: AccommodationListingWhereUniqueInput
  }

  /**
   * AccommodationListing findUniqueOrThrow
   */
  export type AccommodationListingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListing
     */
    select?: AccommodationListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccommodationListing
     */
    omit?: AccommodationListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccommodationListingInclude<ExtArgs> | null
    /**
     * Filter, which AccommodationListing to fetch.
     */
    where: AccommodationListingWhereUniqueInput
  }

  /**
   * AccommodationListing findFirst
   */
  export type AccommodationListingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListing
     */
    select?: AccommodationListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccommodationListing
     */
    omit?: AccommodationListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccommodationListingInclude<ExtArgs> | null
    /**
     * Filter, which AccommodationListing to fetch.
     */
    where?: AccommodationListingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccommodationListings to fetch.
     */
    orderBy?: AccommodationListingOrderByWithRelationInput | AccommodationListingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccommodationListings.
     */
    cursor?: AccommodationListingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccommodationListings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccommodationListings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccommodationListings.
     */
    distinct?: AccommodationListingScalarFieldEnum | AccommodationListingScalarFieldEnum[]
  }

  /**
   * AccommodationListing findFirstOrThrow
   */
  export type AccommodationListingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListing
     */
    select?: AccommodationListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccommodationListing
     */
    omit?: AccommodationListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccommodationListingInclude<ExtArgs> | null
    /**
     * Filter, which AccommodationListing to fetch.
     */
    where?: AccommodationListingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccommodationListings to fetch.
     */
    orderBy?: AccommodationListingOrderByWithRelationInput | AccommodationListingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccommodationListings.
     */
    cursor?: AccommodationListingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccommodationListings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccommodationListings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccommodationListings.
     */
    distinct?: AccommodationListingScalarFieldEnum | AccommodationListingScalarFieldEnum[]
  }

  /**
   * AccommodationListing findMany
   */
  export type AccommodationListingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListing
     */
    select?: AccommodationListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccommodationListing
     */
    omit?: AccommodationListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccommodationListingInclude<ExtArgs> | null
    /**
     * Filter, which AccommodationListings to fetch.
     */
    where?: AccommodationListingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccommodationListings to fetch.
     */
    orderBy?: AccommodationListingOrderByWithRelationInput | AccommodationListingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccommodationListings.
     */
    cursor?: AccommodationListingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccommodationListings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccommodationListings.
     */
    skip?: number
    distinct?: AccommodationListingScalarFieldEnum | AccommodationListingScalarFieldEnum[]
  }

  /**
   * AccommodationListing create
   */
  export type AccommodationListingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListing
     */
    select?: AccommodationListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccommodationListing
     */
    omit?: AccommodationListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccommodationListingInclude<ExtArgs> | null
    /**
     * The data needed to create a AccommodationListing.
     */
    data: XOR<AccommodationListingCreateInput, AccommodationListingUncheckedCreateInput>
  }

  /**
   * AccommodationListing createMany
   */
  export type AccommodationListingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccommodationListings.
     */
    data: AccommodationListingCreateManyInput | AccommodationListingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccommodationListing createManyAndReturn
   */
  export type AccommodationListingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListing
     */
    select?: AccommodationListingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AccommodationListing
     */
    omit?: AccommodationListingOmit<ExtArgs> | null
    /**
     * The data used to create many AccommodationListings.
     */
    data: AccommodationListingCreateManyInput | AccommodationListingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccommodationListingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AccommodationListing update
   */
  export type AccommodationListingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListing
     */
    select?: AccommodationListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccommodationListing
     */
    omit?: AccommodationListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccommodationListingInclude<ExtArgs> | null
    /**
     * The data needed to update a AccommodationListing.
     */
    data: XOR<AccommodationListingUpdateInput, AccommodationListingUncheckedUpdateInput>
    /**
     * Choose, which AccommodationListing to update.
     */
    where: AccommodationListingWhereUniqueInput
  }

  /**
   * AccommodationListing updateMany
   */
  export type AccommodationListingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccommodationListings.
     */
    data: XOR<AccommodationListingUpdateManyMutationInput, AccommodationListingUncheckedUpdateManyInput>
    /**
     * Filter which AccommodationListings to update
     */
    where?: AccommodationListingWhereInput
    /**
     * Limit how many AccommodationListings to update.
     */
    limit?: number
  }

  /**
   * AccommodationListing updateManyAndReturn
   */
  export type AccommodationListingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListing
     */
    select?: AccommodationListingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AccommodationListing
     */
    omit?: AccommodationListingOmit<ExtArgs> | null
    /**
     * The data used to update AccommodationListings.
     */
    data: XOR<AccommodationListingUpdateManyMutationInput, AccommodationListingUncheckedUpdateManyInput>
    /**
     * Filter which AccommodationListings to update
     */
    where?: AccommodationListingWhereInput
    /**
     * Limit how many AccommodationListings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccommodationListingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AccommodationListing upsert
   */
  export type AccommodationListingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListing
     */
    select?: AccommodationListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccommodationListing
     */
    omit?: AccommodationListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccommodationListingInclude<ExtArgs> | null
    /**
     * The filter to search for the AccommodationListing to update in case it exists.
     */
    where: AccommodationListingWhereUniqueInput
    /**
     * In case the AccommodationListing found by the `where` argument doesn't exist, create a new AccommodationListing with this data.
     */
    create: XOR<AccommodationListingCreateInput, AccommodationListingUncheckedCreateInput>
    /**
     * In case the AccommodationListing was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccommodationListingUpdateInput, AccommodationListingUncheckedUpdateInput>
  }

  /**
   * AccommodationListing delete
   */
  export type AccommodationListingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListing
     */
    select?: AccommodationListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccommodationListing
     */
    omit?: AccommodationListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccommodationListingInclude<ExtArgs> | null
    /**
     * Filter which AccommodationListing to delete.
     */
    where: AccommodationListingWhereUniqueInput
  }

  /**
   * AccommodationListing deleteMany
   */
  export type AccommodationListingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccommodationListings to delete
     */
    where?: AccommodationListingWhereInput
    /**
     * Limit how many AccommodationListings to delete.
     */
    limit?: number
  }

  /**
   * AccommodationListing.inquiries
   */
  export type AccommodationListing$inquiriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inquiry
     */
    omit?: InquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    where?: InquiryWhereInput
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    cursor?: InquiryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * AccommodationListing.reviews
   */
  export type AccommodationListing$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * AccommodationListing without action
   */
  export type AccommodationListingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListing
     */
    select?: AccommodationListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccommodationListing
     */
    omit?: AccommodationListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccommodationListingInclude<ExtArgs> | null
  }


  /**
   * Model FoodServiceListing
   */

  export type AggregateFoodServiceListing = {
    _count: FoodServiceListingCountAggregateOutputType | null
    _avg: FoodServiceListingAvgAggregateOutputType | null
    _sum: FoodServiceListingSumAggregateOutputType | null
    _min: FoodServiceListingMinAggregateOutputType | null
    _max: FoodServiceListingMaxAggregateOutputType | null
  }

  export type FoodServiceListingAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type FoodServiceListingSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type FoodServiceListingMinAggregateOutputType = {
    id: string | null
    serviceName: string | null
    serviceType: $Enums.FoodServiceType | null
    priceRange: $Enums.PriceRange | null
    menuDetails: string | null
    vegOptions: boolean | null
    nonVegOptions: boolean | null
    address: string | null
    latitude: number | null
    longitude: number | null
    contactInfo: string | null
    description: string | null
    operatingHours: string | null
    deliveryAvailable: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    ownerId: string | null
  }

  export type FoodServiceListingMaxAggregateOutputType = {
    id: string | null
    serviceName: string | null
    serviceType: $Enums.FoodServiceType | null
    priceRange: $Enums.PriceRange | null
    menuDetails: string | null
    vegOptions: boolean | null
    nonVegOptions: boolean | null
    address: string | null
    latitude: number | null
    longitude: number | null
    contactInfo: string | null
    description: string | null
    operatingHours: string | null
    deliveryAvailable: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    ownerId: string | null
  }

  export type FoodServiceListingCountAggregateOutputType = {
    id: number
    serviceName: number
    photos: number
    serviceType: number
    priceRange: number
    menuDetails: number
    cuisineType: number
    vegOptions: number
    nonVegOptions: number
    address: number
    latitude: number
    longitude: number
    contactInfo: number
    description: number
    operatingHours: number
    deliveryAvailable: number
    createdAt: number
    updatedAt: number
    ownerId: number
    _all: number
  }


  export type FoodServiceListingAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type FoodServiceListingSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type FoodServiceListingMinAggregateInputType = {
    id?: true
    serviceName?: true
    serviceType?: true
    priceRange?: true
    menuDetails?: true
    vegOptions?: true
    nonVegOptions?: true
    address?: true
    latitude?: true
    longitude?: true
    contactInfo?: true
    description?: true
    operatingHours?: true
    deliveryAvailable?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
  }

  export type FoodServiceListingMaxAggregateInputType = {
    id?: true
    serviceName?: true
    serviceType?: true
    priceRange?: true
    menuDetails?: true
    vegOptions?: true
    nonVegOptions?: true
    address?: true
    latitude?: true
    longitude?: true
    contactInfo?: true
    description?: true
    operatingHours?: true
    deliveryAvailable?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
  }

  export type FoodServiceListingCountAggregateInputType = {
    id?: true
    serviceName?: true
    photos?: true
    serviceType?: true
    priceRange?: true
    menuDetails?: true
    cuisineType?: true
    vegOptions?: true
    nonVegOptions?: true
    address?: true
    latitude?: true
    longitude?: true
    contactInfo?: true
    description?: true
    operatingHours?: true
    deliveryAvailable?: true
    createdAt?: true
    updatedAt?: true
    ownerId?: true
    _all?: true
  }

  export type FoodServiceListingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodServiceListing to aggregate.
     */
    where?: FoodServiceListingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodServiceListings to fetch.
     */
    orderBy?: FoodServiceListingOrderByWithRelationInput | FoodServiceListingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodServiceListingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodServiceListings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodServiceListings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodServiceListings
    **/
    _count?: true | FoodServiceListingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FoodServiceListingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FoodServiceListingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodServiceListingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodServiceListingMaxAggregateInputType
  }

  export type GetFoodServiceListingAggregateType<T extends FoodServiceListingAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodServiceListing]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodServiceListing[P]>
      : GetScalarType<T[P], AggregateFoodServiceListing[P]>
  }




  export type FoodServiceListingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodServiceListingWhereInput
    orderBy?: FoodServiceListingOrderByWithAggregationInput | FoodServiceListingOrderByWithAggregationInput[]
    by: FoodServiceListingScalarFieldEnum[] | FoodServiceListingScalarFieldEnum
    having?: FoodServiceListingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodServiceListingCountAggregateInputType | true
    _avg?: FoodServiceListingAvgAggregateInputType
    _sum?: FoodServiceListingSumAggregateInputType
    _min?: FoodServiceListingMinAggregateInputType
    _max?: FoodServiceListingMaxAggregateInputType
  }

  export type FoodServiceListingGroupByOutputType = {
    id: string
    serviceName: string
    photos: string[]
    serviceType: $Enums.FoodServiceType
    priceRange: $Enums.PriceRange
    menuDetails: string | null
    cuisineType: string[]
    vegOptions: boolean
    nonVegOptions: boolean
    address: string
    latitude: number | null
    longitude: number | null
    contactInfo: string
    description: string | null
    operatingHours: string | null
    deliveryAvailable: boolean
    createdAt: Date
    updatedAt: Date
    ownerId: string
    _count: FoodServiceListingCountAggregateOutputType | null
    _avg: FoodServiceListingAvgAggregateOutputType | null
    _sum: FoodServiceListingSumAggregateOutputType | null
    _min: FoodServiceListingMinAggregateOutputType | null
    _max: FoodServiceListingMaxAggregateOutputType | null
  }

  type GetFoodServiceListingGroupByPayload<T extends FoodServiceListingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodServiceListingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodServiceListingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodServiceListingGroupByOutputType[P]>
            : GetScalarType<T[P], FoodServiceListingGroupByOutputType[P]>
        }
      >
    >


  export type FoodServiceListingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    photos?: boolean
    serviceType?: boolean
    priceRange?: boolean
    menuDetails?: boolean
    cuisineType?: boolean
    vegOptions?: boolean
    nonVegOptions?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    contactInfo?: boolean
    description?: boolean
    operatingHours?: boolean
    deliveryAvailable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    inquiries?: boolean | FoodServiceListing$inquiriesArgs<ExtArgs>
    reviews?: boolean | FoodServiceListing$reviewsArgs<ExtArgs>
    _count?: boolean | FoodServiceListingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodServiceListing"]>

  export type FoodServiceListingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    photos?: boolean
    serviceType?: boolean
    priceRange?: boolean
    menuDetails?: boolean
    cuisineType?: boolean
    vegOptions?: boolean
    nonVegOptions?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    contactInfo?: boolean
    description?: boolean
    operatingHours?: boolean
    deliveryAvailable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodServiceListing"]>

  export type FoodServiceListingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    photos?: boolean
    serviceType?: boolean
    priceRange?: boolean
    menuDetails?: boolean
    cuisineType?: boolean
    vegOptions?: boolean
    nonVegOptions?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    contactInfo?: boolean
    description?: boolean
    operatingHours?: boolean
    deliveryAvailable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foodServiceListing"]>

  export type FoodServiceListingSelectScalar = {
    id?: boolean
    serviceName?: boolean
    photos?: boolean
    serviceType?: boolean
    priceRange?: boolean
    menuDetails?: boolean
    cuisineType?: boolean
    vegOptions?: boolean
    nonVegOptions?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    contactInfo?: boolean
    description?: boolean
    operatingHours?: boolean
    deliveryAvailable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ownerId?: boolean
  }

  export type FoodServiceListingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "serviceName" | "photos" | "serviceType" | "priceRange" | "menuDetails" | "cuisineType" | "vegOptions" | "nonVegOptions" | "address" | "latitude" | "longitude" | "contactInfo" | "description" | "operatingHours" | "deliveryAvailable" | "createdAt" | "updatedAt" | "ownerId", ExtArgs["result"]["foodServiceListing"]>
  export type FoodServiceListingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    inquiries?: boolean | FoodServiceListing$inquiriesArgs<ExtArgs>
    reviews?: boolean | FoodServiceListing$reviewsArgs<ExtArgs>
    _count?: boolean | FoodServiceListingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FoodServiceListingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FoodServiceListingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FoodServiceListingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FoodServiceListing"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      inquiries: Prisma.$InquiryPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      serviceName: string
      photos: string[]
      serviceType: $Enums.FoodServiceType
      priceRange: $Enums.PriceRange
      menuDetails: string | null
      cuisineType: string[]
      vegOptions: boolean
      nonVegOptions: boolean
      address: string
      latitude: number | null
      longitude: number | null
      contactInfo: string
      description: string | null
      operatingHours: string | null
      deliveryAvailable: boolean
      createdAt: Date
      updatedAt: Date
      ownerId: string
    }, ExtArgs["result"]["foodServiceListing"]>
    composites: {}
  }

  type FoodServiceListingGetPayload<S extends boolean | null | undefined | FoodServiceListingDefaultArgs> = $Result.GetResult<Prisma.$FoodServiceListingPayload, S>

  type FoodServiceListingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FoodServiceListingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FoodServiceListingCountAggregateInputType | true
    }

  export interface FoodServiceListingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FoodServiceListing'], meta: { name: 'FoodServiceListing' } }
    /**
     * Find zero or one FoodServiceListing that matches the filter.
     * @param {FoodServiceListingFindUniqueArgs} args - Arguments to find a FoodServiceListing
     * @example
     * // Get one FoodServiceListing
     * const foodServiceListing = await prisma.foodServiceListing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodServiceListingFindUniqueArgs>(args: SelectSubset<T, FoodServiceListingFindUniqueArgs<ExtArgs>>): Prisma__FoodServiceListingClient<$Result.GetResult<Prisma.$FoodServiceListingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FoodServiceListing that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FoodServiceListingFindUniqueOrThrowArgs} args - Arguments to find a FoodServiceListing
     * @example
     * // Get one FoodServiceListing
     * const foodServiceListing = await prisma.foodServiceListing.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodServiceListingFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodServiceListingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodServiceListingClient<$Result.GetResult<Prisma.$FoodServiceListingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodServiceListing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodServiceListingFindFirstArgs} args - Arguments to find a FoodServiceListing
     * @example
     * // Get one FoodServiceListing
     * const foodServiceListing = await prisma.foodServiceListing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodServiceListingFindFirstArgs>(args?: SelectSubset<T, FoodServiceListingFindFirstArgs<ExtArgs>>): Prisma__FoodServiceListingClient<$Result.GetResult<Prisma.$FoodServiceListingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FoodServiceListing that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodServiceListingFindFirstOrThrowArgs} args - Arguments to find a FoodServiceListing
     * @example
     * // Get one FoodServiceListing
     * const foodServiceListing = await prisma.foodServiceListing.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodServiceListingFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodServiceListingFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodServiceListingClient<$Result.GetResult<Prisma.$FoodServiceListingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FoodServiceListings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodServiceListingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodServiceListings
     * const foodServiceListings = await prisma.foodServiceListing.findMany()
     * 
     * // Get first 10 FoodServiceListings
     * const foodServiceListings = await prisma.foodServiceListing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodServiceListingWithIdOnly = await prisma.foodServiceListing.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodServiceListingFindManyArgs>(args?: SelectSubset<T, FoodServiceListingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodServiceListingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FoodServiceListing.
     * @param {FoodServiceListingCreateArgs} args - Arguments to create a FoodServiceListing.
     * @example
     * // Create one FoodServiceListing
     * const FoodServiceListing = await prisma.foodServiceListing.create({
     *   data: {
     *     // ... data to create a FoodServiceListing
     *   }
     * })
     * 
     */
    create<T extends FoodServiceListingCreateArgs>(args: SelectSubset<T, FoodServiceListingCreateArgs<ExtArgs>>): Prisma__FoodServiceListingClient<$Result.GetResult<Prisma.$FoodServiceListingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FoodServiceListings.
     * @param {FoodServiceListingCreateManyArgs} args - Arguments to create many FoodServiceListings.
     * @example
     * // Create many FoodServiceListings
     * const foodServiceListing = await prisma.foodServiceListing.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodServiceListingCreateManyArgs>(args?: SelectSubset<T, FoodServiceListingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FoodServiceListings and returns the data saved in the database.
     * @param {FoodServiceListingCreateManyAndReturnArgs} args - Arguments to create many FoodServiceListings.
     * @example
     * // Create many FoodServiceListings
     * const foodServiceListing = await prisma.foodServiceListing.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FoodServiceListings and only return the `id`
     * const foodServiceListingWithIdOnly = await prisma.foodServiceListing.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodServiceListingCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodServiceListingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodServiceListingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FoodServiceListing.
     * @param {FoodServiceListingDeleteArgs} args - Arguments to delete one FoodServiceListing.
     * @example
     * // Delete one FoodServiceListing
     * const FoodServiceListing = await prisma.foodServiceListing.delete({
     *   where: {
     *     // ... filter to delete one FoodServiceListing
     *   }
     * })
     * 
     */
    delete<T extends FoodServiceListingDeleteArgs>(args: SelectSubset<T, FoodServiceListingDeleteArgs<ExtArgs>>): Prisma__FoodServiceListingClient<$Result.GetResult<Prisma.$FoodServiceListingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FoodServiceListing.
     * @param {FoodServiceListingUpdateArgs} args - Arguments to update one FoodServiceListing.
     * @example
     * // Update one FoodServiceListing
     * const foodServiceListing = await prisma.foodServiceListing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodServiceListingUpdateArgs>(args: SelectSubset<T, FoodServiceListingUpdateArgs<ExtArgs>>): Prisma__FoodServiceListingClient<$Result.GetResult<Prisma.$FoodServiceListingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FoodServiceListings.
     * @param {FoodServiceListingDeleteManyArgs} args - Arguments to filter FoodServiceListings to delete.
     * @example
     * // Delete a few FoodServiceListings
     * const { count } = await prisma.foodServiceListing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodServiceListingDeleteManyArgs>(args?: SelectSubset<T, FoodServiceListingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodServiceListings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodServiceListingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodServiceListings
     * const foodServiceListing = await prisma.foodServiceListing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodServiceListingUpdateManyArgs>(args: SelectSubset<T, FoodServiceListingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodServiceListings and returns the data updated in the database.
     * @param {FoodServiceListingUpdateManyAndReturnArgs} args - Arguments to update many FoodServiceListings.
     * @example
     * // Update many FoodServiceListings
     * const foodServiceListing = await prisma.foodServiceListing.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FoodServiceListings and only return the `id`
     * const foodServiceListingWithIdOnly = await prisma.foodServiceListing.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FoodServiceListingUpdateManyAndReturnArgs>(args: SelectSubset<T, FoodServiceListingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodServiceListingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FoodServiceListing.
     * @param {FoodServiceListingUpsertArgs} args - Arguments to update or create a FoodServiceListing.
     * @example
     * // Update or create a FoodServiceListing
     * const foodServiceListing = await prisma.foodServiceListing.upsert({
     *   create: {
     *     // ... data to create a FoodServiceListing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodServiceListing we want to update
     *   }
     * })
     */
    upsert<T extends FoodServiceListingUpsertArgs>(args: SelectSubset<T, FoodServiceListingUpsertArgs<ExtArgs>>): Prisma__FoodServiceListingClient<$Result.GetResult<Prisma.$FoodServiceListingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FoodServiceListings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodServiceListingCountArgs} args - Arguments to filter FoodServiceListings to count.
     * @example
     * // Count the number of FoodServiceListings
     * const count = await prisma.foodServiceListing.count({
     *   where: {
     *     // ... the filter for the FoodServiceListings we want to count
     *   }
     * })
    **/
    count<T extends FoodServiceListingCountArgs>(
      args?: Subset<T, FoodServiceListingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodServiceListingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodServiceListing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodServiceListingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodServiceListingAggregateArgs>(args: Subset<T, FoodServiceListingAggregateArgs>): Prisma.PrismaPromise<GetFoodServiceListingAggregateType<T>>

    /**
     * Group by FoodServiceListing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodServiceListingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodServiceListingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodServiceListingGroupByArgs['orderBy'] }
        : { orderBy?: FoodServiceListingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodServiceListingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodServiceListingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FoodServiceListing model
   */
  readonly fields: FoodServiceListingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodServiceListing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodServiceListingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    inquiries<T extends FoodServiceListing$inquiriesArgs<ExtArgs> = {}>(args?: Subset<T, FoodServiceListing$inquiriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends FoodServiceListing$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, FoodServiceListing$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FoodServiceListing model
   */
  interface FoodServiceListingFieldRefs {
    readonly id: FieldRef<"FoodServiceListing", 'String'>
    readonly serviceName: FieldRef<"FoodServiceListing", 'String'>
    readonly photos: FieldRef<"FoodServiceListing", 'String[]'>
    readonly serviceType: FieldRef<"FoodServiceListing", 'FoodServiceType'>
    readonly priceRange: FieldRef<"FoodServiceListing", 'PriceRange'>
    readonly menuDetails: FieldRef<"FoodServiceListing", 'String'>
    readonly cuisineType: FieldRef<"FoodServiceListing", 'String[]'>
    readonly vegOptions: FieldRef<"FoodServiceListing", 'Boolean'>
    readonly nonVegOptions: FieldRef<"FoodServiceListing", 'Boolean'>
    readonly address: FieldRef<"FoodServiceListing", 'String'>
    readonly latitude: FieldRef<"FoodServiceListing", 'Float'>
    readonly longitude: FieldRef<"FoodServiceListing", 'Float'>
    readonly contactInfo: FieldRef<"FoodServiceListing", 'String'>
    readonly description: FieldRef<"FoodServiceListing", 'String'>
    readonly operatingHours: FieldRef<"FoodServiceListing", 'String'>
    readonly deliveryAvailable: FieldRef<"FoodServiceListing", 'Boolean'>
    readonly createdAt: FieldRef<"FoodServiceListing", 'DateTime'>
    readonly updatedAt: FieldRef<"FoodServiceListing", 'DateTime'>
    readonly ownerId: FieldRef<"FoodServiceListing", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FoodServiceListing findUnique
   */
  export type FoodServiceListingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListing
     */
    select?: FoodServiceListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodServiceListing
     */
    omit?: FoodServiceListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodServiceListingInclude<ExtArgs> | null
    /**
     * Filter, which FoodServiceListing to fetch.
     */
    where: FoodServiceListingWhereUniqueInput
  }

  /**
   * FoodServiceListing findUniqueOrThrow
   */
  export type FoodServiceListingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListing
     */
    select?: FoodServiceListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodServiceListing
     */
    omit?: FoodServiceListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodServiceListingInclude<ExtArgs> | null
    /**
     * Filter, which FoodServiceListing to fetch.
     */
    where: FoodServiceListingWhereUniqueInput
  }

  /**
   * FoodServiceListing findFirst
   */
  export type FoodServiceListingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListing
     */
    select?: FoodServiceListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodServiceListing
     */
    omit?: FoodServiceListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodServiceListingInclude<ExtArgs> | null
    /**
     * Filter, which FoodServiceListing to fetch.
     */
    where?: FoodServiceListingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodServiceListings to fetch.
     */
    orderBy?: FoodServiceListingOrderByWithRelationInput | FoodServiceListingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodServiceListings.
     */
    cursor?: FoodServiceListingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodServiceListings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodServiceListings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodServiceListings.
     */
    distinct?: FoodServiceListingScalarFieldEnum | FoodServiceListingScalarFieldEnum[]
  }

  /**
   * FoodServiceListing findFirstOrThrow
   */
  export type FoodServiceListingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListing
     */
    select?: FoodServiceListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodServiceListing
     */
    omit?: FoodServiceListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodServiceListingInclude<ExtArgs> | null
    /**
     * Filter, which FoodServiceListing to fetch.
     */
    where?: FoodServiceListingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodServiceListings to fetch.
     */
    orderBy?: FoodServiceListingOrderByWithRelationInput | FoodServiceListingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodServiceListings.
     */
    cursor?: FoodServiceListingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodServiceListings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodServiceListings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodServiceListings.
     */
    distinct?: FoodServiceListingScalarFieldEnum | FoodServiceListingScalarFieldEnum[]
  }

  /**
   * FoodServiceListing findMany
   */
  export type FoodServiceListingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListing
     */
    select?: FoodServiceListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodServiceListing
     */
    omit?: FoodServiceListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodServiceListingInclude<ExtArgs> | null
    /**
     * Filter, which FoodServiceListings to fetch.
     */
    where?: FoodServiceListingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodServiceListings to fetch.
     */
    orderBy?: FoodServiceListingOrderByWithRelationInput | FoodServiceListingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodServiceListings.
     */
    cursor?: FoodServiceListingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodServiceListings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodServiceListings.
     */
    skip?: number
    distinct?: FoodServiceListingScalarFieldEnum | FoodServiceListingScalarFieldEnum[]
  }

  /**
   * FoodServiceListing create
   */
  export type FoodServiceListingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListing
     */
    select?: FoodServiceListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodServiceListing
     */
    omit?: FoodServiceListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodServiceListingInclude<ExtArgs> | null
    /**
     * The data needed to create a FoodServiceListing.
     */
    data: XOR<FoodServiceListingCreateInput, FoodServiceListingUncheckedCreateInput>
  }

  /**
   * FoodServiceListing createMany
   */
  export type FoodServiceListingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FoodServiceListings.
     */
    data: FoodServiceListingCreateManyInput | FoodServiceListingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FoodServiceListing createManyAndReturn
   */
  export type FoodServiceListingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListing
     */
    select?: FoodServiceListingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodServiceListing
     */
    omit?: FoodServiceListingOmit<ExtArgs> | null
    /**
     * The data used to create many FoodServiceListings.
     */
    data: FoodServiceListingCreateManyInput | FoodServiceListingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodServiceListingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodServiceListing update
   */
  export type FoodServiceListingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListing
     */
    select?: FoodServiceListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodServiceListing
     */
    omit?: FoodServiceListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodServiceListingInclude<ExtArgs> | null
    /**
     * The data needed to update a FoodServiceListing.
     */
    data: XOR<FoodServiceListingUpdateInput, FoodServiceListingUncheckedUpdateInput>
    /**
     * Choose, which FoodServiceListing to update.
     */
    where: FoodServiceListingWhereUniqueInput
  }

  /**
   * FoodServiceListing updateMany
   */
  export type FoodServiceListingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FoodServiceListings.
     */
    data: XOR<FoodServiceListingUpdateManyMutationInput, FoodServiceListingUncheckedUpdateManyInput>
    /**
     * Filter which FoodServiceListings to update
     */
    where?: FoodServiceListingWhereInput
    /**
     * Limit how many FoodServiceListings to update.
     */
    limit?: number
  }

  /**
   * FoodServiceListing updateManyAndReturn
   */
  export type FoodServiceListingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListing
     */
    select?: FoodServiceListingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FoodServiceListing
     */
    omit?: FoodServiceListingOmit<ExtArgs> | null
    /**
     * The data used to update FoodServiceListings.
     */
    data: XOR<FoodServiceListingUpdateManyMutationInput, FoodServiceListingUncheckedUpdateManyInput>
    /**
     * Filter which FoodServiceListings to update
     */
    where?: FoodServiceListingWhereInput
    /**
     * Limit how many FoodServiceListings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodServiceListingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FoodServiceListing upsert
   */
  export type FoodServiceListingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListing
     */
    select?: FoodServiceListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodServiceListing
     */
    omit?: FoodServiceListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodServiceListingInclude<ExtArgs> | null
    /**
     * The filter to search for the FoodServiceListing to update in case it exists.
     */
    where: FoodServiceListingWhereUniqueInput
    /**
     * In case the FoodServiceListing found by the `where` argument doesn't exist, create a new FoodServiceListing with this data.
     */
    create: XOR<FoodServiceListingCreateInput, FoodServiceListingUncheckedCreateInput>
    /**
     * In case the FoodServiceListing was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodServiceListingUpdateInput, FoodServiceListingUncheckedUpdateInput>
  }

  /**
   * FoodServiceListing delete
   */
  export type FoodServiceListingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListing
     */
    select?: FoodServiceListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodServiceListing
     */
    omit?: FoodServiceListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodServiceListingInclude<ExtArgs> | null
    /**
     * Filter which FoodServiceListing to delete.
     */
    where: FoodServiceListingWhereUniqueInput
  }

  /**
   * FoodServiceListing deleteMany
   */
  export type FoodServiceListingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FoodServiceListings to delete
     */
    where?: FoodServiceListingWhereInput
    /**
     * Limit how many FoodServiceListings to delete.
     */
    limit?: number
  }

  /**
   * FoodServiceListing.inquiries
   */
  export type FoodServiceListing$inquiriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inquiry
     */
    omit?: InquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    where?: InquiryWhereInput
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    cursor?: InquiryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * FoodServiceListing.reviews
   */
  export type FoodServiceListing$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * FoodServiceListing without action
   */
  export type FoodServiceListingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListing
     */
    select?: FoodServiceListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodServiceListing
     */
    omit?: FoodServiceListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodServiceListingInclude<ExtArgs> | null
  }


  /**
   * Model Inquiry
   */

  export type AggregateInquiry = {
    _count: InquiryCountAggregateOutputType | null
    _min: InquiryMinAggregateOutputType | null
    _max: InquiryMaxAggregateOutputType | null
  }

  export type InquiryMinAggregateOutputType = {
    id: string | null
    message: string | null
    studentName: string | null
    studentEmail: string | null
    studentPhone: string | null
    status: $Enums.InquiryStatus | null
    response: string | null
    createdAt: Date | null
    updatedAt: Date | null
    studentId: string | null
    accommodationListingId: string | null
    foodServiceListingId: string | null
  }

  export type InquiryMaxAggregateOutputType = {
    id: string | null
    message: string | null
    studentName: string | null
    studentEmail: string | null
    studentPhone: string | null
    status: $Enums.InquiryStatus | null
    response: string | null
    createdAt: Date | null
    updatedAt: Date | null
    studentId: string | null
    accommodationListingId: string | null
    foodServiceListingId: string | null
  }

  export type InquiryCountAggregateOutputType = {
    id: number
    message: number
    studentName: number
    studentEmail: number
    studentPhone: number
    status: number
    response: number
    createdAt: number
    updatedAt: number
    studentId: number
    accommodationListingId: number
    foodServiceListingId: number
    _all: number
  }


  export type InquiryMinAggregateInputType = {
    id?: true
    message?: true
    studentName?: true
    studentEmail?: true
    studentPhone?: true
    status?: true
    response?: true
    createdAt?: true
    updatedAt?: true
    studentId?: true
    accommodationListingId?: true
    foodServiceListingId?: true
  }

  export type InquiryMaxAggregateInputType = {
    id?: true
    message?: true
    studentName?: true
    studentEmail?: true
    studentPhone?: true
    status?: true
    response?: true
    createdAt?: true
    updatedAt?: true
    studentId?: true
    accommodationListingId?: true
    foodServiceListingId?: true
  }

  export type InquiryCountAggregateInputType = {
    id?: true
    message?: true
    studentName?: true
    studentEmail?: true
    studentPhone?: true
    status?: true
    response?: true
    createdAt?: true
    updatedAt?: true
    studentId?: true
    accommodationListingId?: true
    foodServiceListingId?: true
    _all?: true
  }

  export type InquiryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inquiry to aggregate.
     */
    where?: InquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inquiries to fetch.
     */
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inquiries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Inquiries
    **/
    _count?: true | InquiryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InquiryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InquiryMaxAggregateInputType
  }

  export type GetInquiryAggregateType<T extends InquiryAggregateArgs> = {
        [P in keyof T & keyof AggregateInquiry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInquiry[P]>
      : GetScalarType<T[P], AggregateInquiry[P]>
  }




  export type InquiryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InquiryWhereInput
    orderBy?: InquiryOrderByWithAggregationInput | InquiryOrderByWithAggregationInput[]
    by: InquiryScalarFieldEnum[] | InquiryScalarFieldEnum
    having?: InquiryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InquiryCountAggregateInputType | true
    _min?: InquiryMinAggregateInputType
    _max?: InquiryMaxAggregateInputType
  }

  export type InquiryGroupByOutputType = {
    id: string
    message: string
    studentName: string
    studentEmail: string
    studentPhone: string
    status: $Enums.InquiryStatus
    response: string | null
    createdAt: Date
    updatedAt: Date
    studentId: string
    accommodationListingId: string | null
    foodServiceListingId: string | null
    _count: InquiryCountAggregateOutputType | null
    _min: InquiryMinAggregateOutputType | null
    _max: InquiryMaxAggregateOutputType | null
  }

  type GetInquiryGroupByPayload<T extends InquiryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InquiryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InquiryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InquiryGroupByOutputType[P]>
            : GetScalarType<T[P], InquiryGroupByOutputType[P]>
        }
      >
    >


  export type InquirySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    studentName?: boolean
    studentEmail?: boolean
    studentPhone?: boolean
    status?: boolean
    response?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    studentId?: boolean
    accommodationListingId?: boolean
    foodServiceListingId?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    accommodationListing?: boolean | Inquiry$accommodationListingArgs<ExtArgs>
    foodServiceListing?: boolean | Inquiry$foodServiceListingArgs<ExtArgs>
  }, ExtArgs["result"]["inquiry"]>

  export type InquirySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    studentName?: boolean
    studentEmail?: boolean
    studentPhone?: boolean
    status?: boolean
    response?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    studentId?: boolean
    accommodationListingId?: boolean
    foodServiceListingId?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    accommodationListing?: boolean | Inquiry$accommodationListingArgs<ExtArgs>
    foodServiceListing?: boolean | Inquiry$foodServiceListingArgs<ExtArgs>
  }, ExtArgs["result"]["inquiry"]>

  export type InquirySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    studentName?: boolean
    studentEmail?: boolean
    studentPhone?: boolean
    status?: boolean
    response?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    studentId?: boolean
    accommodationListingId?: boolean
    foodServiceListingId?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    accommodationListing?: boolean | Inquiry$accommodationListingArgs<ExtArgs>
    foodServiceListing?: boolean | Inquiry$foodServiceListingArgs<ExtArgs>
  }, ExtArgs["result"]["inquiry"]>

  export type InquirySelectScalar = {
    id?: boolean
    message?: boolean
    studentName?: boolean
    studentEmail?: boolean
    studentPhone?: boolean
    status?: boolean
    response?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    studentId?: boolean
    accommodationListingId?: boolean
    foodServiceListingId?: boolean
  }

  export type InquiryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "message" | "studentName" | "studentEmail" | "studentPhone" | "status" | "response" | "createdAt" | "updatedAt" | "studentId" | "accommodationListingId" | "foodServiceListingId", ExtArgs["result"]["inquiry"]>
  export type InquiryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    accommodationListing?: boolean | Inquiry$accommodationListingArgs<ExtArgs>
    foodServiceListing?: boolean | Inquiry$foodServiceListingArgs<ExtArgs>
  }
  export type InquiryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    accommodationListing?: boolean | Inquiry$accommodationListingArgs<ExtArgs>
    foodServiceListing?: boolean | Inquiry$foodServiceListingArgs<ExtArgs>
  }
  export type InquiryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    accommodationListing?: boolean | Inquiry$accommodationListingArgs<ExtArgs>
    foodServiceListing?: boolean | Inquiry$foodServiceListingArgs<ExtArgs>
  }

  export type $InquiryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Inquiry"
    objects: {
      student: Prisma.$UserPayload<ExtArgs>
      accommodationListing: Prisma.$AccommodationListingPayload<ExtArgs> | null
      foodServiceListing: Prisma.$FoodServiceListingPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      message: string
      studentName: string
      studentEmail: string
      studentPhone: string
      status: $Enums.InquiryStatus
      response: string | null
      createdAt: Date
      updatedAt: Date
      studentId: string
      accommodationListingId: string | null
      foodServiceListingId: string | null
    }, ExtArgs["result"]["inquiry"]>
    composites: {}
  }

  type InquiryGetPayload<S extends boolean | null | undefined | InquiryDefaultArgs> = $Result.GetResult<Prisma.$InquiryPayload, S>

  type InquiryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InquiryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InquiryCountAggregateInputType | true
    }

  export interface InquiryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inquiry'], meta: { name: 'Inquiry' } }
    /**
     * Find zero or one Inquiry that matches the filter.
     * @param {InquiryFindUniqueArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InquiryFindUniqueArgs>(args: SelectSubset<T, InquiryFindUniqueArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Inquiry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InquiryFindUniqueOrThrowArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InquiryFindUniqueOrThrowArgs>(args: SelectSubset<T, InquiryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inquiry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryFindFirstArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InquiryFindFirstArgs>(args?: SelectSubset<T, InquiryFindFirstArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inquiry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryFindFirstOrThrowArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InquiryFindFirstOrThrowArgs>(args?: SelectSubset<T, InquiryFindFirstOrThrowArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Inquiries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inquiries
     * const inquiries = await prisma.inquiry.findMany()
     * 
     * // Get first 10 Inquiries
     * const inquiries = await prisma.inquiry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inquiryWithIdOnly = await prisma.inquiry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InquiryFindManyArgs>(args?: SelectSubset<T, InquiryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Inquiry.
     * @param {InquiryCreateArgs} args - Arguments to create a Inquiry.
     * @example
     * // Create one Inquiry
     * const Inquiry = await prisma.inquiry.create({
     *   data: {
     *     // ... data to create a Inquiry
     *   }
     * })
     * 
     */
    create<T extends InquiryCreateArgs>(args: SelectSubset<T, InquiryCreateArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Inquiries.
     * @param {InquiryCreateManyArgs} args - Arguments to create many Inquiries.
     * @example
     * // Create many Inquiries
     * const inquiry = await prisma.inquiry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InquiryCreateManyArgs>(args?: SelectSubset<T, InquiryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Inquiries and returns the data saved in the database.
     * @param {InquiryCreateManyAndReturnArgs} args - Arguments to create many Inquiries.
     * @example
     * // Create many Inquiries
     * const inquiry = await prisma.inquiry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Inquiries and only return the `id`
     * const inquiryWithIdOnly = await prisma.inquiry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InquiryCreateManyAndReturnArgs>(args?: SelectSubset<T, InquiryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Inquiry.
     * @param {InquiryDeleteArgs} args - Arguments to delete one Inquiry.
     * @example
     * // Delete one Inquiry
     * const Inquiry = await prisma.inquiry.delete({
     *   where: {
     *     // ... filter to delete one Inquiry
     *   }
     * })
     * 
     */
    delete<T extends InquiryDeleteArgs>(args: SelectSubset<T, InquiryDeleteArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Inquiry.
     * @param {InquiryUpdateArgs} args - Arguments to update one Inquiry.
     * @example
     * // Update one Inquiry
     * const inquiry = await prisma.inquiry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InquiryUpdateArgs>(args: SelectSubset<T, InquiryUpdateArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Inquiries.
     * @param {InquiryDeleteManyArgs} args - Arguments to filter Inquiries to delete.
     * @example
     * // Delete a few Inquiries
     * const { count } = await prisma.inquiry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InquiryDeleteManyArgs>(args?: SelectSubset<T, InquiryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inquiries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inquiries
     * const inquiry = await prisma.inquiry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InquiryUpdateManyArgs>(args: SelectSubset<T, InquiryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inquiries and returns the data updated in the database.
     * @param {InquiryUpdateManyAndReturnArgs} args - Arguments to update many Inquiries.
     * @example
     * // Update many Inquiries
     * const inquiry = await prisma.inquiry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Inquiries and only return the `id`
     * const inquiryWithIdOnly = await prisma.inquiry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InquiryUpdateManyAndReturnArgs>(args: SelectSubset<T, InquiryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Inquiry.
     * @param {InquiryUpsertArgs} args - Arguments to update or create a Inquiry.
     * @example
     * // Update or create a Inquiry
     * const inquiry = await prisma.inquiry.upsert({
     *   create: {
     *     // ... data to create a Inquiry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inquiry we want to update
     *   }
     * })
     */
    upsert<T extends InquiryUpsertArgs>(args: SelectSubset<T, InquiryUpsertArgs<ExtArgs>>): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Inquiries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryCountArgs} args - Arguments to filter Inquiries to count.
     * @example
     * // Count the number of Inquiries
     * const count = await prisma.inquiry.count({
     *   where: {
     *     // ... the filter for the Inquiries we want to count
     *   }
     * })
    **/
    count<T extends InquiryCountArgs>(
      args?: Subset<T, InquiryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InquiryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inquiry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InquiryAggregateArgs>(args: Subset<T, InquiryAggregateArgs>): Prisma.PrismaPromise<GetInquiryAggregateType<T>>

    /**
     * Group by Inquiry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InquiryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InquiryGroupByArgs['orderBy'] }
        : { orderBy?: InquiryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InquiryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInquiryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Inquiry model
   */
  readonly fields: InquiryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Inquiry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InquiryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    accommodationListing<T extends Inquiry$accommodationListingArgs<ExtArgs> = {}>(args?: Subset<T, Inquiry$accommodationListingArgs<ExtArgs>>): Prisma__AccommodationListingClient<$Result.GetResult<Prisma.$AccommodationListingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    foodServiceListing<T extends Inquiry$foodServiceListingArgs<ExtArgs> = {}>(args?: Subset<T, Inquiry$foodServiceListingArgs<ExtArgs>>): Prisma__FoodServiceListingClient<$Result.GetResult<Prisma.$FoodServiceListingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Inquiry model
   */
  interface InquiryFieldRefs {
    readonly id: FieldRef<"Inquiry", 'String'>
    readonly message: FieldRef<"Inquiry", 'String'>
    readonly studentName: FieldRef<"Inquiry", 'String'>
    readonly studentEmail: FieldRef<"Inquiry", 'String'>
    readonly studentPhone: FieldRef<"Inquiry", 'String'>
    readonly status: FieldRef<"Inquiry", 'InquiryStatus'>
    readonly response: FieldRef<"Inquiry", 'String'>
    readonly createdAt: FieldRef<"Inquiry", 'DateTime'>
    readonly updatedAt: FieldRef<"Inquiry", 'DateTime'>
    readonly studentId: FieldRef<"Inquiry", 'String'>
    readonly accommodationListingId: FieldRef<"Inquiry", 'String'>
    readonly foodServiceListingId: FieldRef<"Inquiry", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Inquiry findUnique
   */
  export type InquiryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inquiry
     */
    omit?: InquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter, which Inquiry to fetch.
     */
    where: InquiryWhereUniqueInput
  }

  /**
   * Inquiry findUniqueOrThrow
   */
  export type InquiryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inquiry
     */
    omit?: InquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter, which Inquiry to fetch.
     */
    where: InquiryWhereUniqueInput
  }

  /**
   * Inquiry findFirst
   */
  export type InquiryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inquiry
     */
    omit?: InquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter, which Inquiry to fetch.
     */
    where?: InquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inquiries to fetch.
     */
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inquiries.
     */
    cursor?: InquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inquiries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inquiries.
     */
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * Inquiry findFirstOrThrow
   */
  export type InquiryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inquiry
     */
    omit?: InquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter, which Inquiry to fetch.
     */
    where?: InquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inquiries to fetch.
     */
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inquiries.
     */
    cursor?: InquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inquiries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inquiries.
     */
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * Inquiry findMany
   */
  export type InquiryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inquiry
     */
    omit?: InquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter, which Inquiries to fetch.
     */
    where?: InquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inquiries to fetch.
     */
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Inquiries.
     */
    cursor?: InquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inquiries.
     */
    skip?: number
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * Inquiry create
   */
  export type InquiryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inquiry
     */
    omit?: InquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * The data needed to create a Inquiry.
     */
    data: XOR<InquiryCreateInput, InquiryUncheckedCreateInput>
  }

  /**
   * Inquiry createMany
   */
  export type InquiryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Inquiries.
     */
    data: InquiryCreateManyInput | InquiryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Inquiry createManyAndReturn
   */
  export type InquiryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Inquiry
     */
    omit?: InquiryOmit<ExtArgs> | null
    /**
     * The data used to create many Inquiries.
     */
    data: InquiryCreateManyInput | InquiryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Inquiry update
   */
  export type InquiryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inquiry
     */
    omit?: InquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * The data needed to update a Inquiry.
     */
    data: XOR<InquiryUpdateInput, InquiryUncheckedUpdateInput>
    /**
     * Choose, which Inquiry to update.
     */
    where: InquiryWhereUniqueInput
  }

  /**
   * Inquiry updateMany
   */
  export type InquiryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Inquiries.
     */
    data: XOR<InquiryUpdateManyMutationInput, InquiryUncheckedUpdateManyInput>
    /**
     * Filter which Inquiries to update
     */
    where?: InquiryWhereInput
    /**
     * Limit how many Inquiries to update.
     */
    limit?: number
  }

  /**
   * Inquiry updateManyAndReturn
   */
  export type InquiryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Inquiry
     */
    omit?: InquiryOmit<ExtArgs> | null
    /**
     * The data used to update Inquiries.
     */
    data: XOR<InquiryUpdateManyMutationInput, InquiryUncheckedUpdateManyInput>
    /**
     * Filter which Inquiries to update
     */
    where?: InquiryWhereInput
    /**
     * Limit how many Inquiries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Inquiry upsert
   */
  export type InquiryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inquiry
     */
    omit?: InquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * The filter to search for the Inquiry to update in case it exists.
     */
    where: InquiryWhereUniqueInput
    /**
     * In case the Inquiry found by the `where` argument doesn't exist, create a new Inquiry with this data.
     */
    create: XOR<InquiryCreateInput, InquiryUncheckedCreateInput>
    /**
     * In case the Inquiry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InquiryUpdateInput, InquiryUncheckedUpdateInput>
  }

  /**
   * Inquiry delete
   */
  export type InquiryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inquiry
     */
    omit?: InquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter which Inquiry to delete.
     */
    where: InquiryWhereUniqueInput
  }

  /**
   * Inquiry deleteMany
   */
  export type InquiryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inquiries to delete
     */
    where?: InquiryWhereInput
    /**
     * Limit how many Inquiries to delete.
     */
    limit?: number
  }

  /**
   * Inquiry.accommodationListing
   */
  export type Inquiry$accommodationListingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListing
     */
    select?: AccommodationListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccommodationListing
     */
    omit?: AccommodationListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccommodationListingInclude<ExtArgs> | null
    where?: AccommodationListingWhereInput
  }

  /**
   * Inquiry.foodServiceListing
   */
  export type Inquiry$foodServiceListingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListing
     */
    select?: FoodServiceListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodServiceListing
     */
    omit?: FoodServiceListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodServiceListingInclude<ExtArgs> | null
    where?: FoodServiceListingWhereInput
  }

  /**
   * Inquiry without action
   */
  export type InquiryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inquiry
     */
    omit?: InquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    rating: number | null
  }

  export type ReviewSumAggregateOutputType = {
    rating: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    accommodationListingId: string | null
    foodServiceListingId: string | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    accommodationListingId: string | null
    foodServiceListingId: string | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    rating: number
    comment: number
    createdAt: number
    updatedAt: number
    userId: number
    accommodationListingId: number
    foodServiceListingId: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    rating?: true
  }

  export type ReviewSumAggregateInputType = {
    rating?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    rating?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    accommodationListingId?: true
    foodServiceListingId?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    rating?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    accommodationListingId?: true
    foodServiceListingId?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    rating?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    accommodationListingId?: true
    foodServiceListingId?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: string
    rating: number
    comment: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
    accommodationListingId: string | null
    foodServiceListingId: string | null
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    accommodationListingId?: boolean
    foodServiceListingId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    accommodationListing?: boolean | Review$accommodationListingArgs<ExtArgs>
    foodServiceListing?: boolean | Review$foodServiceListingArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    accommodationListingId?: boolean
    foodServiceListingId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    accommodationListing?: boolean | Review$accommodationListingArgs<ExtArgs>
    foodServiceListing?: boolean | Review$foodServiceListingArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    accommodationListingId?: boolean
    foodServiceListingId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    accommodationListing?: boolean | Review$accommodationListingArgs<ExtArgs>
    foodServiceListing?: boolean | Review$foodServiceListingArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    accommodationListingId?: boolean
    foodServiceListingId?: boolean
  }

  export type ReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "rating" | "comment" | "createdAt" | "updatedAt" | "userId" | "accommodationListingId" | "foodServiceListingId", ExtArgs["result"]["review"]>
  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    accommodationListing?: boolean | Review$accommodationListingArgs<ExtArgs>
    foodServiceListing?: boolean | Review$foodServiceListingArgs<ExtArgs>
  }
  export type ReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    accommodationListing?: boolean | Review$accommodationListingArgs<ExtArgs>
    foodServiceListing?: boolean | Review$foodServiceListingArgs<ExtArgs>
  }
  export type ReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    accommodationListing?: boolean | Review$accommodationListingArgs<ExtArgs>
    foodServiceListing?: boolean | Review$foodServiceListingArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      accommodationListing: Prisma.$AccommodationListingPayload<ExtArgs> | null
      foodServiceListing: Prisma.$FoodServiceListingPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      rating: number
      comment: string | null
      createdAt: Date
      updatedAt: Date
      userId: string
      accommodationListingId: string | null
      foodServiceListingId: string | null
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {ReviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews and returns the data updated in the database.
     * @param {ReviewUpdateManyAndReturnArgs} args - Arguments to update many Reviews.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    accommodationListing<T extends Review$accommodationListingArgs<ExtArgs> = {}>(args?: Subset<T, Review$accommodationListingArgs<ExtArgs>>): Prisma__AccommodationListingClient<$Result.GetResult<Prisma.$AccommodationListingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    foodServiceListing<T extends Review$foodServiceListingArgs<ExtArgs> = {}>(args?: Subset<T, Review$foodServiceListingArgs<ExtArgs>>): Prisma__FoodServiceListingClient<$Result.GetResult<Prisma.$FoodServiceListingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'String'>
    readonly rating: FieldRef<"Review", 'Int'>
    readonly comment: FieldRef<"Review", 'String'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
    readonly updatedAt: FieldRef<"Review", 'DateTime'>
    readonly userId: FieldRef<"Review", 'String'>
    readonly accommodationListingId: FieldRef<"Review", 'String'>
    readonly foodServiceListingId: FieldRef<"Review", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review createManyAndReturn
   */
  export type ReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
  }

  /**
   * Review updateManyAndReturn
   */
  export type ReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to delete.
     */
    limit?: number
  }

  /**
   * Review.accommodationListing
   */
  export type Review$accommodationListingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccommodationListing
     */
    select?: AccommodationListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccommodationListing
     */
    omit?: AccommodationListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccommodationListingInclude<ExtArgs> | null
    where?: AccommodationListingWhereInput
  }

  /**
   * Review.foodServiceListing
   */
  export type Review$foodServiceListingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodServiceListing
     */
    select?: FoodServiceListingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FoodServiceListing
     */
    omit?: FoodServiceListingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodServiceListingInclude<ExtArgs> | null
    where?: FoodServiceListingWhereInput
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model ChatSession
   */

  export type AggregateChatSession = {
    _count: ChatSessionCountAggregateOutputType | null
    _min: ChatSessionMinAggregateOutputType | null
    _max: ChatSessionMaxAggregateOutputType | null
  }

  export type ChatSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatSessionCountAggregateOutputType = {
    id: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChatSessionMinAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatSessionCountAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChatSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatSession to aggregate.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatSessions
    **/
    _count?: true | ChatSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatSessionMaxAggregateInputType
  }

  export type GetChatSessionAggregateType<T extends ChatSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateChatSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatSession[P]>
      : GetScalarType<T[P], AggregateChatSession[P]>
  }




  export type ChatSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatSessionWhereInput
    orderBy?: ChatSessionOrderByWithAggregationInput | ChatSessionOrderByWithAggregationInput[]
    by: ChatSessionScalarFieldEnum[] | ChatSessionScalarFieldEnum
    having?: ChatSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatSessionCountAggregateInputType | true
    _min?: ChatSessionMinAggregateInputType
    _max?: ChatSessionMaxAggregateInputType
  }

  export type ChatSessionGroupByOutputType = {
    id: string
    userId: string | null
    createdAt: Date
    updatedAt: Date
    _count: ChatSessionCountAggregateOutputType | null
    _min: ChatSessionMinAggregateOutputType | null
    _max: ChatSessionMaxAggregateOutputType | null
  }

  type GetChatSessionGroupByPayload<T extends ChatSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatSessionGroupByOutputType[P]>
            : GetScalarType<T[P], ChatSessionGroupByOutputType[P]>
        }
      >
    >


  export type ChatSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    messages?: boolean | ChatSession$messagesArgs<ExtArgs>
    _count?: boolean | ChatSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChatSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["chatSession"]>
  export type ChatSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatSession$messagesArgs<ExtArgs>
    _count?: boolean | ChatSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ChatSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ChatSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatSession"
    objects: {
      messages: Prisma.$ChatMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chatSession"]>
    composites: {}
  }

  type ChatSessionGetPayload<S extends boolean | null | undefined | ChatSessionDefaultArgs> = $Result.GetResult<Prisma.$ChatSessionPayload, S>

  type ChatSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatSessionCountAggregateInputType | true
    }

  export interface ChatSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatSession'], meta: { name: 'ChatSession' } }
    /**
     * Find zero or one ChatSession that matches the filter.
     * @param {ChatSessionFindUniqueArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatSessionFindUniqueArgs>(args: SelectSubset<T, ChatSessionFindUniqueArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatSessionFindUniqueOrThrowArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindFirstArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatSessionFindFirstArgs>(args?: SelectSubset<T, ChatSessionFindFirstArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindFirstOrThrowArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatSessions
     * const chatSessions = await prisma.chatSession.findMany()
     * 
     * // Get first 10 ChatSessions
     * const chatSessions = await prisma.chatSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatSessionFindManyArgs>(args?: SelectSubset<T, ChatSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatSession.
     * @param {ChatSessionCreateArgs} args - Arguments to create a ChatSession.
     * @example
     * // Create one ChatSession
     * const ChatSession = await prisma.chatSession.create({
     *   data: {
     *     // ... data to create a ChatSession
     *   }
     * })
     * 
     */
    create<T extends ChatSessionCreateArgs>(args: SelectSubset<T, ChatSessionCreateArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatSessions.
     * @param {ChatSessionCreateManyArgs} args - Arguments to create many ChatSessions.
     * @example
     * // Create many ChatSessions
     * const chatSession = await prisma.chatSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatSessionCreateManyArgs>(args?: SelectSubset<T, ChatSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatSessions and returns the data saved in the database.
     * @param {ChatSessionCreateManyAndReturnArgs} args - Arguments to create many ChatSessions.
     * @example
     * // Create many ChatSessions
     * const chatSession = await prisma.chatSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatSessions and only return the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatSession.
     * @param {ChatSessionDeleteArgs} args - Arguments to delete one ChatSession.
     * @example
     * // Delete one ChatSession
     * const ChatSession = await prisma.chatSession.delete({
     *   where: {
     *     // ... filter to delete one ChatSession
     *   }
     * })
     * 
     */
    delete<T extends ChatSessionDeleteArgs>(args: SelectSubset<T, ChatSessionDeleteArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatSession.
     * @param {ChatSessionUpdateArgs} args - Arguments to update one ChatSession.
     * @example
     * // Update one ChatSession
     * const chatSession = await prisma.chatSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatSessionUpdateArgs>(args: SelectSubset<T, ChatSessionUpdateArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatSessions.
     * @param {ChatSessionDeleteManyArgs} args - Arguments to filter ChatSessions to delete.
     * @example
     * // Delete a few ChatSessions
     * const { count } = await prisma.chatSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatSessionDeleteManyArgs>(args?: SelectSubset<T, ChatSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatSessions
     * const chatSession = await prisma.chatSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatSessionUpdateManyArgs>(args: SelectSubset<T, ChatSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatSessions and returns the data updated in the database.
     * @param {ChatSessionUpdateManyAndReturnArgs} args - Arguments to update many ChatSessions.
     * @example
     * // Update many ChatSessions
     * const chatSession = await prisma.chatSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatSessions and only return the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatSession.
     * @param {ChatSessionUpsertArgs} args - Arguments to update or create a ChatSession.
     * @example
     * // Update or create a ChatSession
     * const chatSession = await prisma.chatSession.upsert({
     *   create: {
     *     // ... data to create a ChatSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatSession we want to update
     *   }
     * })
     */
    upsert<T extends ChatSessionUpsertArgs>(args: SelectSubset<T, ChatSessionUpsertArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionCountArgs} args - Arguments to filter ChatSessions to count.
     * @example
     * // Count the number of ChatSessions
     * const count = await prisma.chatSession.count({
     *   where: {
     *     // ... the filter for the ChatSessions we want to count
     *   }
     * })
    **/
    count<T extends ChatSessionCountArgs>(
      args?: Subset<T, ChatSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatSessionAggregateArgs>(args: Subset<T, ChatSessionAggregateArgs>): Prisma.PrismaPromise<GetChatSessionAggregateType<T>>

    /**
     * Group by ChatSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatSessionGroupByArgs['orderBy'] }
        : { orderBy?: ChatSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatSession model
   */
  readonly fields: ChatSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    messages<T extends ChatSession$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatSession$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatSession model
   */
  interface ChatSessionFieldRefs {
    readonly id: FieldRef<"ChatSession", 'String'>
    readonly userId: FieldRef<"ChatSession", 'String'>
    readonly createdAt: FieldRef<"ChatSession", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatSession findUnique
   */
  export type ChatSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession findUniqueOrThrow
   */
  export type ChatSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession findFirst
   */
  export type ChatSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSessions.
     */
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession findFirstOrThrow
   */
  export type ChatSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSessions.
     */
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession findMany
   */
  export type ChatSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSessions to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession create
   */
  export type ChatSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatSession.
     */
    data: XOR<ChatSessionCreateInput, ChatSessionUncheckedCreateInput>
  }

  /**
   * ChatSession createMany
   */
  export type ChatSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatSessions.
     */
    data: ChatSessionCreateManyInput | ChatSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatSession createManyAndReturn
   */
  export type ChatSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * The data used to create many ChatSessions.
     */
    data: ChatSessionCreateManyInput | ChatSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatSession update
   */
  export type ChatSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatSession.
     */
    data: XOR<ChatSessionUpdateInput, ChatSessionUncheckedUpdateInput>
    /**
     * Choose, which ChatSession to update.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession updateMany
   */
  export type ChatSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatSessions.
     */
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyInput>
    /**
     * Filter which ChatSessions to update
     */
    where?: ChatSessionWhereInput
    /**
     * Limit how many ChatSessions to update.
     */
    limit?: number
  }

  /**
   * ChatSession updateManyAndReturn
   */
  export type ChatSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * The data used to update ChatSessions.
     */
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyInput>
    /**
     * Filter which ChatSessions to update
     */
    where?: ChatSessionWhereInput
    /**
     * Limit how many ChatSessions to update.
     */
    limit?: number
  }

  /**
   * ChatSession upsert
   */
  export type ChatSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatSession to update in case it exists.
     */
    where: ChatSessionWhereUniqueInput
    /**
     * In case the ChatSession found by the `where` argument doesn't exist, create a new ChatSession with this data.
     */
    create: XOR<ChatSessionCreateInput, ChatSessionUncheckedCreateInput>
    /**
     * In case the ChatSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatSessionUpdateInput, ChatSessionUncheckedUpdateInput>
  }

  /**
   * ChatSession delete
   */
  export type ChatSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter which ChatSession to delete.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession deleteMany
   */
  export type ChatSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatSessions to delete
     */
    where?: ChatSessionWhereInput
    /**
     * Limit how many ChatSessions to delete.
     */
    limit?: number
  }

  /**
   * ChatSession.messages
   */
  export type ChatSession$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatSession without action
   */
  export type ChatSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
  }


  /**
   * Model ChatMessage
   */

  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  export type ChatMessageMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    role: $Enums.ChatRole | null
    content: string | null
    createdAt: Date | null
  }

  export type ChatMessageMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    role: $Enums.ChatRole | null
    content: string | null
    createdAt: Date | null
  }

  export type ChatMessageCountAggregateOutputType = {
    id: number
    sessionId: number
    role: number
    content: number
    meta: number
    createdAt: number
    _all: number
  }


  export type ChatMessageMinAggregateInputType = {
    id?: true
    sessionId?: true
    role?: true
    content?: true
    createdAt?: true
  }

  export type ChatMessageMaxAggregateInputType = {
    id?: true
    sessionId?: true
    role?: true
    content?: true
    createdAt?: true
  }

  export type ChatMessageCountAggregateInputType = {
    id?: true
    sessionId?: true
    role?: true
    content?: true
    meta?: true
    createdAt?: true
    _all?: true
  }

  export type ChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessage to aggregate.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessageMaxAggregateInputType
  }

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessage[P]>
      : GetScalarType<T[P], AggregateChatMessage[P]>
  }




  export type ChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithAggregationInput | ChatMessageOrderByWithAggregationInput[]
    by: ChatMessageScalarFieldEnum[] | ChatMessageScalarFieldEnum
    having?: ChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessageCountAggregateInputType | true
    _min?: ChatMessageMinAggregateInputType
    _max?: ChatMessageMaxAggregateInputType
  }

  export type ChatMessageGroupByOutputType = {
    id: string
    sessionId: string
    role: $Enums.ChatRole
    content: string
    meta: JsonValue | null
    createdAt: Date
    _count: ChatMessageCountAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    role?: boolean
    content?: boolean
    meta?: boolean
    createdAt?: boolean
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    role?: boolean
    content?: boolean
    meta?: boolean
    createdAt?: boolean
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    role?: boolean
    content?: boolean
    meta?: boolean
    createdAt?: boolean
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectScalar = {
    id?: boolean
    sessionId?: boolean
    role?: boolean
    content?: boolean
    meta?: boolean
    createdAt?: boolean
  }

  export type ChatMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "role" | "content" | "meta" | "createdAt", ExtArgs["result"]["chatMessage"]>
  export type ChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }

  export type $ChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatMessage"
    objects: {
      session: Prisma.$ChatSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      role: $Enums.ChatRole
      content: string
      meta: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["chatMessage"]>
    composites: {}
  }

  type ChatMessageGetPayload<S extends boolean | null | undefined | ChatMessageDefaultArgs> = $Result.GetResult<Prisma.$ChatMessagePayload, S>

  type ChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatMessageCountAggregateInputType | true
    }

  export interface ChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessage'], meta: { name: 'ChatMessage' } }
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatMessageFindUniqueArgs>(args: SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatMessageFindFirstArgs>(args?: SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatMessageFindManyArgs>(args?: SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     * 
     */
    create<T extends ChatMessageCreateArgs>(args: SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatMessages.
     * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatMessageCreateManyArgs>(args?: SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatMessages and returns the data saved in the database.
     * @param {ChatMessageCreateManyAndReturnArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     * 
     */
    delete<T extends ChatMessageDeleteArgs>(args: SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatMessageUpdateArgs>(args: SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatMessageDeleteManyArgs>(args?: SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatMessageUpdateManyArgs>(args: SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages and returns the data updated in the database.
     * @param {ChatMessageUpdateManyAndReturnArgs} args - Arguments to update many ChatMessages.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ChatMessageUpsertArgs>(args: SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessageAggregateArgs>(args: Subset<T, ChatMessageAggregateArgs>): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatMessage model
   */
  readonly fields: ChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends ChatSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatSessionDefaultArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatMessage model
   */
  interface ChatMessageFieldRefs {
    readonly id: FieldRef<"ChatMessage", 'String'>
    readonly sessionId: FieldRef<"ChatMessage", 'String'>
    readonly role: FieldRef<"ChatMessage", 'ChatRole'>
    readonly content: FieldRef<"ChatMessage", 'String'>
    readonly meta: FieldRef<"ChatMessage", 'Json'>
    readonly createdAt: FieldRef<"ChatMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findUniqueOrThrow
   */
  export type ChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findFirstOrThrow
   */
  export type ChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatMessage.
     */
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
  }

  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatMessage createManyAndReturn
   */
  export type ChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatMessage.
     */
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ChatMessage to update.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
  }

  /**
   * ChatMessage updateManyAndReturn
   */
  export type ChatMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     */
    where: ChatMessageWhereUniqueInput
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     */
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
  }

  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter which ChatMessage to delete.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to delete.
     */
    limit?: number
  }

  /**
   * ChatMessage without action
   */
  export type ChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    phone: 'phone',
    userType: 'userType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    university: 'university',
    stream: 'stream',
    serviceType: 'serviceType',
    businessType: 'businessType'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UniversityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    stream: 'stream',
    city: 'city',
    state: 'state'
  };

  export type UniversityScalarFieldEnum = (typeof UniversityScalarFieldEnum)[keyof typeof UniversityScalarFieldEnum]


  export const AccommodationListingScalarFieldEnum: {
    id: 'id',
    propertyName: 'propertyName',
    photos: 'photos',
    dailyRate: 'dailyRate',
    monthlyRent: 'monthlyRent',
    minStay: 'minStay',
    deposit: 'deposit',
    availability: 'availability',
    amenities: 'amenities',
    roomType: 'roomType',
    accommodationType: 'accommodationType',
    livingPreferences: 'livingPreferences',
    foodPreference: 'foodPreference',
    address: 'address',
    latitude: 'latitude',
    longitude: 'longitude',
    contactInfo: 'contactInfo',
    description: 'description',
    nearbyUniversities: 'nearbyUniversities',
    distanceFromUni: 'distanceFromUni',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ownerId: 'ownerId'
  };

  export type AccommodationListingScalarFieldEnum = (typeof AccommodationListingScalarFieldEnum)[keyof typeof AccommodationListingScalarFieldEnum]


  export const FoodServiceListingScalarFieldEnum: {
    id: 'id',
    serviceName: 'serviceName',
    photos: 'photos',
    serviceType: 'serviceType',
    priceRange: 'priceRange',
    menuDetails: 'menuDetails',
    cuisineType: 'cuisineType',
    vegOptions: 'vegOptions',
    nonVegOptions: 'nonVegOptions',
    address: 'address',
    latitude: 'latitude',
    longitude: 'longitude',
    contactInfo: 'contactInfo',
    description: 'description',
    operatingHours: 'operatingHours',
    deliveryAvailable: 'deliveryAvailable',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ownerId: 'ownerId'
  };

  export type FoodServiceListingScalarFieldEnum = (typeof FoodServiceListingScalarFieldEnum)[keyof typeof FoodServiceListingScalarFieldEnum]


  export const InquiryScalarFieldEnum: {
    id: 'id',
    message: 'message',
    studentName: 'studentName',
    studentEmail: 'studentEmail',
    studentPhone: 'studentPhone',
    status: 'status',
    response: 'response',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    studentId: 'studentId',
    accommodationListingId: 'accommodationListingId',
    foodServiceListingId: 'foodServiceListingId'
  };

  export type InquiryScalarFieldEnum = (typeof InquiryScalarFieldEnum)[keyof typeof InquiryScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    rating: 'rating',
    comment: 'comment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    accommodationListingId: 'accommodationListingId',
    foodServiceListingId: 'foodServiceListingId'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const ChatSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChatSessionScalarFieldEnum = (typeof ChatSessionScalarFieldEnum)[keyof typeof ChatSessionScalarFieldEnum]


  export const ChatMessageScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    role: 'role',
    content: 'content',
    meta: 'meta',
    createdAt: 'createdAt'
  };

  export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserType'
   */
  export type EnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType'>
    


  /**
   * Reference to a field of type 'UserType[]'
   */
  export type ListEnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Stream'
   */
  export type EnumStreamFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Stream'>
    


  /**
   * Reference to a field of type 'Stream[]'
   */
  export type ListEnumStreamFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Stream[]'>
    


  /**
   * Reference to a field of type 'ServiceType'
   */
  export type EnumServiceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServiceType'>
    


  /**
   * Reference to a field of type 'ServiceType[]'
   */
  export type ListEnumServiceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServiceType[]'>
    


  /**
   * Reference to a field of type 'BusinessType'
   */
  export type EnumBusinessTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BusinessType'>
    


  /**
   * Reference to a field of type 'BusinessType[]'
   */
  export type ListEnumBusinessTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BusinessType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'RoomType'
   */
  export type EnumRoomTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoomType'>
    


  /**
   * Reference to a field of type 'RoomType[]'
   */
  export type ListEnumRoomTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoomType[]'>
    


  /**
   * Reference to a field of type 'AccommodationType'
   */
  export type EnumAccommodationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccommodationType'>
    


  /**
   * Reference to a field of type 'AccommodationType[]'
   */
  export type ListEnumAccommodationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccommodationType[]'>
    


  /**
   * Reference to a field of type 'FoodPreference'
   */
  export type EnumFoodPreferenceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FoodPreference'>
    


  /**
   * Reference to a field of type 'FoodPreference[]'
   */
  export type ListEnumFoodPreferenceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FoodPreference[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'FoodServiceType'
   */
  export type EnumFoodServiceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FoodServiceType'>
    


  /**
   * Reference to a field of type 'FoodServiceType[]'
   */
  export type ListEnumFoodServiceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FoodServiceType[]'>
    


  /**
   * Reference to a field of type 'PriceRange'
   */
  export type EnumPriceRangeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PriceRange'>
    


  /**
   * Reference to a field of type 'PriceRange[]'
   */
  export type ListEnumPriceRangeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PriceRange[]'>
    


  /**
   * Reference to a field of type 'InquiryStatus'
   */
  export type EnumInquiryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InquiryStatus'>
    


  /**
   * Reference to a field of type 'InquiryStatus[]'
   */
  export type ListEnumInquiryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InquiryStatus[]'>
    


  /**
   * Reference to a field of type 'ChatRole'
   */
  export type EnumChatRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChatRole'>
    


  /**
   * Reference to a field of type 'ChatRole[]'
   */
  export type ListEnumChatRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChatRole[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    userType?: EnumUserTypeFilter<"User"> | $Enums.UserType
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    university?: StringNullableFilter<"User"> | string | null
    stream?: EnumStreamNullableFilter<"User"> | $Enums.Stream | null
    serviceType?: EnumServiceTypeNullableFilter<"User"> | $Enums.ServiceType | null
    businessType?: EnumBusinessTypeNullableFilter<"User"> | $Enums.BusinessType | null
    accommodationListings?: AccommodationListingListRelationFilter
    foodServiceListings?: FoodServiceListingListRelationFilter
    inquiries?: InquiryListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    userType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    university?: SortOrderInput | SortOrder
    stream?: SortOrderInput | SortOrder
    serviceType?: SortOrderInput | SortOrder
    businessType?: SortOrderInput | SortOrder
    accommodationListings?: AccommodationListingOrderByRelationAggregateInput
    foodServiceListings?: FoodServiceListingOrderByRelationAggregateInput
    inquiries?: InquiryOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    userType?: EnumUserTypeFilter<"User"> | $Enums.UserType
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    university?: StringNullableFilter<"User"> | string | null
    stream?: EnumStreamNullableFilter<"User"> | $Enums.Stream | null
    serviceType?: EnumServiceTypeNullableFilter<"User"> | $Enums.ServiceType | null
    businessType?: EnumBusinessTypeNullableFilter<"User"> | $Enums.BusinessType | null
    accommodationListings?: AccommodationListingListRelationFilter
    foodServiceListings?: FoodServiceListingListRelationFilter
    inquiries?: InquiryListRelationFilter
    reviews?: ReviewListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    userType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    university?: SortOrderInput | SortOrder
    stream?: SortOrderInput | SortOrder
    serviceType?: SortOrderInput | SortOrder
    businessType?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    phone?: StringWithAggregatesFilter<"User"> | string
    userType?: EnumUserTypeWithAggregatesFilter<"User"> | $Enums.UserType
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    university?: StringNullableWithAggregatesFilter<"User"> | string | null
    stream?: EnumStreamNullableWithAggregatesFilter<"User"> | $Enums.Stream | null
    serviceType?: EnumServiceTypeNullableWithAggregatesFilter<"User"> | $Enums.ServiceType | null
    businessType?: EnumBusinessTypeNullableWithAggregatesFilter<"User"> | $Enums.BusinessType | null
  }

  export type UniversityWhereInput = {
    AND?: UniversityWhereInput | UniversityWhereInput[]
    OR?: UniversityWhereInput[]
    NOT?: UniversityWhereInput | UniversityWhereInput[]
    id?: StringFilter<"University"> | string
    name?: StringFilter<"University"> | string
    stream?: EnumStreamFilter<"University"> | $Enums.Stream
    city?: StringFilter<"University"> | string
    state?: StringFilter<"University"> | string
  }

  export type UniversityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    stream?: SortOrder
    city?: SortOrder
    state?: SortOrder
  }

  export type UniversityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UniversityWhereInput | UniversityWhereInput[]
    OR?: UniversityWhereInput[]
    NOT?: UniversityWhereInput | UniversityWhereInput[]
    name?: StringFilter<"University"> | string
    stream?: EnumStreamFilter<"University"> | $Enums.Stream
    city?: StringFilter<"University"> | string
    state?: StringFilter<"University"> | string
  }, "id">

  export type UniversityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    stream?: SortOrder
    city?: SortOrder
    state?: SortOrder
    _count?: UniversityCountOrderByAggregateInput
    _max?: UniversityMaxOrderByAggregateInput
    _min?: UniversityMinOrderByAggregateInput
  }

  export type UniversityScalarWhereWithAggregatesInput = {
    AND?: UniversityScalarWhereWithAggregatesInput | UniversityScalarWhereWithAggregatesInput[]
    OR?: UniversityScalarWhereWithAggregatesInput[]
    NOT?: UniversityScalarWhereWithAggregatesInput | UniversityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"University"> | string
    name?: StringWithAggregatesFilter<"University"> | string
    stream?: EnumStreamWithAggregatesFilter<"University"> | $Enums.Stream
    city?: StringWithAggregatesFilter<"University"> | string
    state?: StringWithAggregatesFilter<"University"> | string
  }

  export type AccommodationListingWhereInput = {
    AND?: AccommodationListingWhereInput | AccommodationListingWhereInput[]
    OR?: AccommodationListingWhereInput[]
    NOT?: AccommodationListingWhereInput | AccommodationListingWhereInput[]
    id?: StringFilter<"AccommodationListing"> | string
    propertyName?: StringFilter<"AccommodationListing"> | string
    photos?: StringNullableListFilter<"AccommodationListing">
    dailyRate?: IntFilter<"AccommodationListing"> | number
    monthlyRent?: IntFilter<"AccommodationListing"> | number
    minStay?: IntFilter<"AccommodationListing"> | number
    deposit?: IntNullableFilter<"AccommodationListing"> | number | null
    availability?: BoolFilter<"AccommodationListing"> | boolean
    amenities?: StringNullableListFilter<"AccommodationListing">
    roomType?: EnumRoomTypeFilter<"AccommodationListing"> | $Enums.RoomType
    accommodationType?: EnumAccommodationTypeFilter<"AccommodationListing"> | $Enums.AccommodationType
    livingPreferences?: StringNullableListFilter<"AccommodationListing">
    foodPreference?: EnumFoodPreferenceFilter<"AccommodationListing"> | $Enums.FoodPreference
    address?: StringFilter<"AccommodationListing"> | string
    latitude?: FloatNullableFilter<"AccommodationListing"> | number | null
    longitude?: FloatNullableFilter<"AccommodationListing"> | number | null
    contactInfo?: StringFilter<"AccommodationListing"> | string
    description?: StringNullableFilter<"AccommodationListing"> | string | null
    nearbyUniversities?: StringNullableListFilter<"AccommodationListing">
    distanceFromUni?: FloatNullableFilter<"AccommodationListing"> | number | null
    createdAt?: DateTimeFilter<"AccommodationListing"> | Date | string
    updatedAt?: DateTimeFilter<"AccommodationListing"> | Date | string
    ownerId?: StringFilter<"AccommodationListing"> | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    inquiries?: InquiryListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type AccommodationListingOrderByWithRelationInput = {
    id?: SortOrder
    propertyName?: SortOrder
    photos?: SortOrder
    dailyRate?: SortOrder
    monthlyRent?: SortOrder
    minStay?: SortOrder
    deposit?: SortOrderInput | SortOrder
    availability?: SortOrder
    amenities?: SortOrder
    roomType?: SortOrder
    accommodationType?: SortOrder
    livingPreferences?: SortOrder
    foodPreference?: SortOrder
    address?: SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    contactInfo?: SortOrder
    description?: SortOrderInput | SortOrder
    nearbyUniversities?: SortOrder
    distanceFromUni?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    owner?: UserOrderByWithRelationInput
    inquiries?: InquiryOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type AccommodationListingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccommodationListingWhereInput | AccommodationListingWhereInput[]
    OR?: AccommodationListingWhereInput[]
    NOT?: AccommodationListingWhereInput | AccommodationListingWhereInput[]
    propertyName?: StringFilter<"AccommodationListing"> | string
    photos?: StringNullableListFilter<"AccommodationListing">
    dailyRate?: IntFilter<"AccommodationListing"> | number
    monthlyRent?: IntFilter<"AccommodationListing"> | number
    minStay?: IntFilter<"AccommodationListing"> | number
    deposit?: IntNullableFilter<"AccommodationListing"> | number | null
    availability?: BoolFilter<"AccommodationListing"> | boolean
    amenities?: StringNullableListFilter<"AccommodationListing">
    roomType?: EnumRoomTypeFilter<"AccommodationListing"> | $Enums.RoomType
    accommodationType?: EnumAccommodationTypeFilter<"AccommodationListing"> | $Enums.AccommodationType
    livingPreferences?: StringNullableListFilter<"AccommodationListing">
    foodPreference?: EnumFoodPreferenceFilter<"AccommodationListing"> | $Enums.FoodPreference
    address?: StringFilter<"AccommodationListing"> | string
    latitude?: FloatNullableFilter<"AccommodationListing"> | number | null
    longitude?: FloatNullableFilter<"AccommodationListing"> | number | null
    contactInfo?: StringFilter<"AccommodationListing"> | string
    description?: StringNullableFilter<"AccommodationListing"> | string | null
    nearbyUniversities?: StringNullableListFilter<"AccommodationListing">
    distanceFromUni?: FloatNullableFilter<"AccommodationListing"> | number | null
    createdAt?: DateTimeFilter<"AccommodationListing"> | Date | string
    updatedAt?: DateTimeFilter<"AccommodationListing"> | Date | string
    ownerId?: StringFilter<"AccommodationListing"> | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    inquiries?: InquiryListRelationFilter
    reviews?: ReviewListRelationFilter
  }, "id">

  export type AccommodationListingOrderByWithAggregationInput = {
    id?: SortOrder
    propertyName?: SortOrder
    photos?: SortOrder
    dailyRate?: SortOrder
    monthlyRent?: SortOrder
    minStay?: SortOrder
    deposit?: SortOrderInput | SortOrder
    availability?: SortOrder
    amenities?: SortOrder
    roomType?: SortOrder
    accommodationType?: SortOrder
    livingPreferences?: SortOrder
    foodPreference?: SortOrder
    address?: SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    contactInfo?: SortOrder
    description?: SortOrderInput | SortOrder
    nearbyUniversities?: SortOrder
    distanceFromUni?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    _count?: AccommodationListingCountOrderByAggregateInput
    _avg?: AccommodationListingAvgOrderByAggregateInput
    _max?: AccommodationListingMaxOrderByAggregateInput
    _min?: AccommodationListingMinOrderByAggregateInput
    _sum?: AccommodationListingSumOrderByAggregateInput
  }

  export type AccommodationListingScalarWhereWithAggregatesInput = {
    AND?: AccommodationListingScalarWhereWithAggregatesInput | AccommodationListingScalarWhereWithAggregatesInput[]
    OR?: AccommodationListingScalarWhereWithAggregatesInput[]
    NOT?: AccommodationListingScalarWhereWithAggregatesInput | AccommodationListingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AccommodationListing"> | string
    propertyName?: StringWithAggregatesFilter<"AccommodationListing"> | string
    photos?: StringNullableListFilter<"AccommodationListing">
    dailyRate?: IntWithAggregatesFilter<"AccommodationListing"> | number
    monthlyRent?: IntWithAggregatesFilter<"AccommodationListing"> | number
    minStay?: IntWithAggregatesFilter<"AccommodationListing"> | number
    deposit?: IntNullableWithAggregatesFilter<"AccommodationListing"> | number | null
    availability?: BoolWithAggregatesFilter<"AccommodationListing"> | boolean
    amenities?: StringNullableListFilter<"AccommodationListing">
    roomType?: EnumRoomTypeWithAggregatesFilter<"AccommodationListing"> | $Enums.RoomType
    accommodationType?: EnumAccommodationTypeWithAggregatesFilter<"AccommodationListing"> | $Enums.AccommodationType
    livingPreferences?: StringNullableListFilter<"AccommodationListing">
    foodPreference?: EnumFoodPreferenceWithAggregatesFilter<"AccommodationListing"> | $Enums.FoodPreference
    address?: StringWithAggregatesFilter<"AccommodationListing"> | string
    latitude?: FloatNullableWithAggregatesFilter<"AccommodationListing"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"AccommodationListing"> | number | null
    contactInfo?: StringWithAggregatesFilter<"AccommodationListing"> | string
    description?: StringNullableWithAggregatesFilter<"AccommodationListing"> | string | null
    nearbyUniversities?: StringNullableListFilter<"AccommodationListing">
    distanceFromUni?: FloatNullableWithAggregatesFilter<"AccommodationListing"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"AccommodationListing"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AccommodationListing"> | Date | string
    ownerId?: StringWithAggregatesFilter<"AccommodationListing"> | string
  }

  export type FoodServiceListingWhereInput = {
    AND?: FoodServiceListingWhereInput | FoodServiceListingWhereInput[]
    OR?: FoodServiceListingWhereInput[]
    NOT?: FoodServiceListingWhereInput | FoodServiceListingWhereInput[]
    id?: StringFilter<"FoodServiceListing"> | string
    serviceName?: StringFilter<"FoodServiceListing"> | string
    photos?: StringNullableListFilter<"FoodServiceListing">
    serviceType?: EnumFoodServiceTypeFilter<"FoodServiceListing"> | $Enums.FoodServiceType
    priceRange?: EnumPriceRangeFilter<"FoodServiceListing"> | $Enums.PriceRange
    menuDetails?: StringNullableFilter<"FoodServiceListing"> | string | null
    cuisineType?: StringNullableListFilter<"FoodServiceListing">
    vegOptions?: BoolFilter<"FoodServiceListing"> | boolean
    nonVegOptions?: BoolFilter<"FoodServiceListing"> | boolean
    address?: StringFilter<"FoodServiceListing"> | string
    latitude?: FloatNullableFilter<"FoodServiceListing"> | number | null
    longitude?: FloatNullableFilter<"FoodServiceListing"> | number | null
    contactInfo?: StringFilter<"FoodServiceListing"> | string
    description?: StringNullableFilter<"FoodServiceListing"> | string | null
    operatingHours?: StringNullableFilter<"FoodServiceListing"> | string | null
    deliveryAvailable?: BoolFilter<"FoodServiceListing"> | boolean
    createdAt?: DateTimeFilter<"FoodServiceListing"> | Date | string
    updatedAt?: DateTimeFilter<"FoodServiceListing"> | Date | string
    ownerId?: StringFilter<"FoodServiceListing"> | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    inquiries?: InquiryListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type FoodServiceListingOrderByWithRelationInput = {
    id?: SortOrder
    serviceName?: SortOrder
    photos?: SortOrder
    serviceType?: SortOrder
    priceRange?: SortOrder
    menuDetails?: SortOrderInput | SortOrder
    cuisineType?: SortOrder
    vegOptions?: SortOrder
    nonVegOptions?: SortOrder
    address?: SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    contactInfo?: SortOrder
    description?: SortOrderInput | SortOrder
    operatingHours?: SortOrderInput | SortOrder
    deliveryAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    owner?: UserOrderByWithRelationInput
    inquiries?: InquiryOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type FoodServiceListingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FoodServiceListingWhereInput | FoodServiceListingWhereInput[]
    OR?: FoodServiceListingWhereInput[]
    NOT?: FoodServiceListingWhereInput | FoodServiceListingWhereInput[]
    serviceName?: StringFilter<"FoodServiceListing"> | string
    photos?: StringNullableListFilter<"FoodServiceListing">
    serviceType?: EnumFoodServiceTypeFilter<"FoodServiceListing"> | $Enums.FoodServiceType
    priceRange?: EnumPriceRangeFilter<"FoodServiceListing"> | $Enums.PriceRange
    menuDetails?: StringNullableFilter<"FoodServiceListing"> | string | null
    cuisineType?: StringNullableListFilter<"FoodServiceListing">
    vegOptions?: BoolFilter<"FoodServiceListing"> | boolean
    nonVegOptions?: BoolFilter<"FoodServiceListing"> | boolean
    address?: StringFilter<"FoodServiceListing"> | string
    latitude?: FloatNullableFilter<"FoodServiceListing"> | number | null
    longitude?: FloatNullableFilter<"FoodServiceListing"> | number | null
    contactInfo?: StringFilter<"FoodServiceListing"> | string
    description?: StringNullableFilter<"FoodServiceListing"> | string | null
    operatingHours?: StringNullableFilter<"FoodServiceListing"> | string | null
    deliveryAvailable?: BoolFilter<"FoodServiceListing"> | boolean
    createdAt?: DateTimeFilter<"FoodServiceListing"> | Date | string
    updatedAt?: DateTimeFilter<"FoodServiceListing"> | Date | string
    ownerId?: StringFilter<"FoodServiceListing"> | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    inquiries?: InquiryListRelationFilter
    reviews?: ReviewListRelationFilter
  }, "id">

  export type FoodServiceListingOrderByWithAggregationInput = {
    id?: SortOrder
    serviceName?: SortOrder
    photos?: SortOrder
    serviceType?: SortOrder
    priceRange?: SortOrder
    menuDetails?: SortOrderInput | SortOrder
    cuisineType?: SortOrder
    vegOptions?: SortOrder
    nonVegOptions?: SortOrder
    address?: SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    contactInfo?: SortOrder
    description?: SortOrderInput | SortOrder
    operatingHours?: SortOrderInput | SortOrder
    deliveryAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
    _count?: FoodServiceListingCountOrderByAggregateInput
    _avg?: FoodServiceListingAvgOrderByAggregateInput
    _max?: FoodServiceListingMaxOrderByAggregateInput
    _min?: FoodServiceListingMinOrderByAggregateInput
    _sum?: FoodServiceListingSumOrderByAggregateInput
  }

  export type FoodServiceListingScalarWhereWithAggregatesInput = {
    AND?: FoodServiceListingScalarWhereWithAggregatesInput | FoodServiceListingScalarWhereWithAggregatesInput[]
    OR?: FoodServiceListingScalarWhereWithAggregatesInput[]
    NOT?: FoodServiceListingScalarWhereWithAggregatesInput | FoodServiceListingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FoodServiceListing"> | string
    serviceName?: StringWithAggregatesFilter<"FoodServiceListing"> | string
    photos?: StringNullableListFilter<"FoodServiceListing">
    serviceType?: EnumFoodServiceTypeWithAggregatesFilter<"FoodServiceListing"> | $Enums.FoodServiceType
    priceRange?: EnumPriceRangeWithAggregatesFilter<"FoodServiceListing"> | $Enums.PriceRange
    menuDetails?: StringNullableWithAggregatesFilter<"FoodServiceListing"> | string | null
    cuisineType?: StringNullableListFilter<"FoodServiceListing">
    vegOptions?: BoolWithAggregatesFilter<"FoodServiceListing"> | boolean
    nonVegOptions?: BoolWithAggregatesFilter<"FoodServiceListing"> | boolean
    address?: StringWithAggregatesFilter<"FoodServiceListing"> | string
    latitude?: FloatNullableWithAggregatesFilter<"FoodServiceListing"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"FoodServiceListing"> | number | null
    contactInfo?: StringWithAggregatesFilter<"FoodServiceListing"> | string
    description?: StringNullableWithAggregatesFilter<"FoodServiceListing"> | string | null
    operatingHours?: StringNullableWithAggregatesFilter<"FoodServiceListing"> | string | null
    deliveryAvailable?: BoolWithAggregatesFilter<"FoodServiceListing"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"FoodServiceListing"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FoodServiceListing"> | Date | string
    ownerId?: StringWithAggregatesFilter<"FoodServiceListing"> | string
  }

  export type InquiryWhereInput = {
    AND?: InquiryWhereInput | InquiryWhereInput[]
    OR?: InquiryWhereInput[]
    NOT?: InquiryWhereInput | InquiryWhereInput[]
    id?: StringFilter<"Inquiry"> | string
    message?: StringFilter<"Inquiry"> | string
    studentName?: StringFilter<"Inquiry"> | string
    studentEmail?: StringFilter<"Inquiry"> | string
    studentPhone?: StringFilter<"Inquiry"> | string
    status?: EnumInquiryStatusFilter<"Inquiry"> | $Enums.InquiryStatus
    response?: StringNullableFilter<"Inquiry"> | string | null
    createdAt?: DateTimeFilter<"Inquiry"> | Date | string
    updatedAt?: DateTimeFilter<"Inquiry"> | Date | string
    studentId?: StringFilter<"Inquiry"> | string
    accommodationListingId?: StringNullableFilter<"Inquiry"> | string | null
    foodServiceListingId?: StringNullableFilter<"Inquiry"> | string | null
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    accommodationListing?: XOR<AccommodationListingNullableScalarRelationFilter, AccommodationListingWhereInput> | null
    foodServiceListing?: XOR<FoodServiceListingNullableScalarRelationFilter, FoodServiceListingWhereInput> | null
  }

  export type InquiryOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    studentName?: SortOrder
    studentEmail?: SortOrder
    studentPhone?: SortOrder
    status?: SortOrder
    response?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    studentId?: SortOrder
    accommodationListingId?: SortOrderInput | SortOrder
    foodServiceListingId?: SortOrderInput | SortOrder
    student?: UserOrderByWithRelationInput
    accommodationListing?: AccommodationListingOrderByWithRelationInput
    foodServiceListing?: FoodServiceListingOrderByWithRelationInput
  }

  export type InquiryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InquiryWhereInput | InquiryWhereInput[]
    OR?: InquiryWhereInput[]
    NOT?: InquiryWhereInput | InquiryWhereInput[]
    message?: StringFilter<"Inquiry"> | string
    studentName?: StringFilter<"Inquiry"> | string
    studentEmail?: StringFilter<"Inquiry"> | string
    studentPhone?: StringFilter<"Inquiry"> | string
    status?: EnumInquiryStatusFilter<"Inquiry"> | $Enums.InquiryStatus
    response?: StringNullableFilter<"Inquiry"> | string | null
    createdAt?: DateTimeFilter<"Inquiry"> | Date | string
    updatedAt?: DateTimeFilter<"Inquiry"> | Date | string
    studentId?: StringFilter<"Inquiry"> | string
    accommodationListingId?: StringNullableFilter<"Inquiry"> | string | null
    foodServiceListingId?: StringNullableFilter<"Inquiry"> | string | null
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    accommodationListing?: XOR<AccommodationListingNullableScalarRelationFilter, AccommodationListingWhereInput> | null
    foodServiceListing?: XOR<FoodServiceListingNullableScalarRelationFilter, FoodServiceListingWhereInput> | null
  }, "id">

  export type InquiryOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    studentName?: SortOrder
    studentEmail?: SortOrder
    studentPhone?: SortOrder
    status?: SortOrder
    response?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    studentId?: SortOrder
    accommodationListingId?: SortOrderInput | SortOrder
    foodServiceListingId?: SortOrderInput | SortOrder
    _count?: InquiryCountOrderByAggregateInput
    _max?: InquiryMaxOrderByAggregateInput
    _min?: InquiryMinOrderByAggregateInput
  }

  export type InquiryScalarWhereWithAggregatesInput = {
    AND?: InquiryScalarWhereWithAggregatesInput | InquiryScalarWhereWithAggregatesInput[]
    OR?: InquiryScalarWhereWithAggregatesInput[]
    NOT?: InquiryScalarWhereWithAggregatesInput | InquiryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Inquiry"> | string
    message?: StringWithAggregatesFilter<"Inquiry"> | string
    studentName?: StringWithAggregatesFilter<"Inquiry"> | string
    studentEmail?: StringWithAggregatesFilter<"Inquiry"> | string
    studentPhone?: StringWithAggregatesFilter<"Inquiry"> | string
    status?: EnumInquiryStatusWithAggregatesFilter<"Inquiry"> | $Enums.InquiryStatus
    response?: StringNullableWithAggregatesFilter<"Inquiry"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Inquiry"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Inquiry"> | Date | string
    studentId?: StringWithAggregatesFilter<"Inquiry"> | string
    accommodationListingId?: StringNullableWithAggregatesFilter<"Inquiry"> | string | null
    foodServiceListingId?: StringNullableWithAggregatesFilter<"Inquiry"> | string | null
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    comment?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    userId?: StringFilter<"Review"> | string
    accommodationListingId?: StringNullableFilter<"Review"> | string | null
    foodServiceListingId?: StringNullableFilter<"Review"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    accommodationListing?: XOR<AccommodationListingNullableScalarRelationFilter, AccommodationListingWhereInput> | null
    foodServiceListing?: XOR<FoodServiceListingNullableScalarRelationFilter, FoodServiceListingWhereInput> | null
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    accommodationListingId?: SortOrderInput | SortOrder
    foodServiceListingId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    accommodationListing?: AccommodationListingOrderByWithRelationInput
    foodServiceListing?: FoodServiceListingOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    rating?: IntFilter<"Review"> | number
    comment?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    userId?: StringFilter<"Review"> | string
    accommodationListingId?: StringNullableFilter<"Review"> | string | null
    foodServiceListingId?: StringNullableFilter<"Review"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    accommodationListing?: XOR<AccommodationListingNullableScalarRelationFilter, AccommodationListingWhereInput> | null
    foodServiceListing?: XOR<FoodServiceListingNullableScalarRelationFilter, FoodServiceListingWhereInput> | null
  }, "id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    accommodationListingId?: SortOrderInput | SortOrder
    foodServiceListingId?: SortOrderInput | SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Review"> | string
    rating?: IntWithAggregatesFilter<"Review"> | number
    comment?: StringNullableWithAggregatesFilter<"Review"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
    userId?: StringWithAggregatesFilter<"Review"> | string
    accommodationListingId?: StringNullableWithAggregatesFilter<"Review"> | string | null
    foodServiceListingId?: StringNullableWithAggregatesFilter<"Review"> | string | null
  }

  export type ChatSessionWhereInput = {
    AND?: ChatSessionWhereInput | ChatSessionWhereInput[]
    OR?: ChatSessionWhereInput[]
    NOT?: ChatSessionWhereInput | ChatSessionWhereInput[]
    id?: StringFilter<"ChatSession"> | string
    userId?: StringNullableFilter<"ChatSession"> | string | null
    createdAt?: DateTimeFilter<"ChatSession"> | Date | string
    updatedAt?: DateTimeFilter<"ChatSession"> | Date | string
    messages?: ChatMessageListRelationFilter
  }

  export type ChatSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    messages?: ChatMessageOrderByRelationAggregateInput
  }

  export type ChatSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatSessionWhereInput | ChatSessionWhereInput[]
    OR?: ChatSessionWhereInput[]
    NOT?: ChatSessionWhereInput | ChatSessionWhereInput[]
    userId?: StringNullableFilter<"ChatSession"> | string | null
    createdAt?: DateTimeFilter<"ChatSession"> | Date | string
    updatedAt?: DateTimeFilter<"ChatSession"> | Date | string
    messages?: ChatMessageListRelationFilter
  }, "id">

  export type ChatSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChatSessionCountOrderByAggregateInput
    _max?: ChatSessionMaxOrderByAggregateInput
    _min?: ChatSessionMinOrderByAggregateInput
  }

  export type ChatSessionScalarWhereWithAggregatesInput = {
    AND?: ChatSessionScalarWhereWithAggregatesInput | ChatSessionScalarWhereWithAggregatesInput[]
    OR?: ChatSessionScalarWhereWithAggregatesInput[]
    NOT?: ChatSessionScalarWhereWithAggregatesInput | ChatSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatSession"> | string
    userId?: StringNullableWithAggregatesFilter<"ChatSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ChatSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatSession"> | Date | string
  }

  export type ChatMessageWhereInput = {
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    sessionId?: StringFilter<"ChatMessage"> | string
    role?: EnumChatRoleFilter<"ChatMessage"> | $Enums.ChatRole
    content?: StringFilter<"ChatMessage"> | string
    meta?: JsonNullableFilter<"ChatMessage">
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    session?: XOR<ChatSessionScalarRelationFilter, ChatSessionWhereInput>
  }

  export type ChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    session?: ChatSessionOrderByWithRelationInput
  }

  export type ChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    sessionId?: StringFilter<"ChatMessage"> | string
    role?: EnumChatRoleFilter<"ChatMessage"> | $Enums.ChatRole
    content?: StringFilter<"ChatMessage"> | string
    meta?: JsonNullableFilter<"ChatMessage">
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    session?: XOR<ChatSessionScalarRelationFilter, ChatSessionWhereInput>
  }, "id">

  export type ChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ChatMessageCountOrderByAggregateInput
    _max?: ChatMessageMaxOrderByAggregateInput
    _min?: ChatMessageMinOrderByAggregateInput
  }

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    OR?: ChatMessageScalarWhereWithAggregatesInput[]
    NOT?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChatMessage"> | string
    sessionId?: StringWithAggregatesFilter<"ChatMessage"> | string
    role?: EnumChatRoleWithAggregatesFilter<"ChatMessage"> | $Enums.ChatRole
    content?: StringWithAggregatesFilter<"ChatMessage"> | string
    meta?: JsonNullableWithAggregatesFilter<"ChatMessage">
    createdAt?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: string
    userType: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    university?: string | null
    stream?: $Enums.Stream | null
    serviceType?: $Enums.ServiceType | null
    businessType?: $Enums.BusinessType | null
    accommodationListings?: AccommodationListingCreateNestedManyWithoutOwnerInput
    foodServiceListings?: FoodServiceListingCreateNestedManyWithoutOwnerInput
    inquiries?: InquiryCreateNestedManyWithoutStudentInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: string
    userType: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    university?: string | null
    stream?: $Enums.Stream | null
    serviceType?: $Enums.ServiceType | null
    businessType?: $Enums.BusinessType | null
    accommodationListings?: AccommodationListingUncheckedCreateNestedManyWithoutOwnerInput
    foodServiceListings?: FoodServiceListingUncheckedCreateNestedManyWithoutOwnerInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutStudentInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    university?: NullableStringFieldUpdateOperationsInput | string | null
    stream?: NullableEnumStreamFieldUpdateOperationsInput | $Enums.Stream | null
    serviceType?: NullableEnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType | null
    businessType?: NullableEnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType | null
    accommodationListings?: AccommodationListingUpdateManyWithoutOwnerNestedInput
    foodServiceListings?: FoodServiceListingUpdateManyWithoutOwnerNestedInput
    inquiries?: InquiryUpdateManyWithoutStudentNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    university?: NullableStringFieldUpdateOperationsInput | string | null
    stream?: NullableEnumStreamFieldUpdateOperationsInput | $Enums.Stream | null
    serviceType?: NullableEnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType | null
    businessType?: NullableEnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType | null
    accommodationListings?: AccommodationListingUncheckedUpdateManyWithoutOwnerNestedInput
    foodServiceListings?: FoodServiceListingUncheckedUpdateManyWithoutOwnerNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutStudentNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: string
    userType: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    university?: string | null
    stream?: $Enums.Stream | null
    serviceType?: $Enums.ServiceType | null
    businessType?: $Enums.BusinessType | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    university?: NullableStringFieldUpdateOperationsInput | string | null
    stream?: NullableEnumStreamFieldUpdateOperationsInput | $Enums.Stream | null
    serviceType?: NullableEnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType | null
    businessType?: NullableEnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    university?: NullableStringFieldUpdateOperationsInput | string | null
    stream?: NullableEnumStreamFieldUpdateOperationsInput | $Enums.Stream | null
    serviceType?: NullableEnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType | null
    businessType?: NullableEnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType | null
  }

  export type UniversityCreateInput = {
    id?: string
    name: string
    stream: $Enums.Stream
    city: string
    state: string
  }

  export type UniversityUncheckedCreateInput = {
    id?: string
    name: string
    stream: $Enums.Stream
    city: string
    state: string
  }

  export type UniversityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    stream?: EnumStreamFieldUpdateOperationsInput | $Enums.Stream
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type UniversityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    stream?: EnumStreamFieldUpdateOperationsInput | $Enums.Stream
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type UniversityCreateManyInput = {
    id?: string
    name: string
    stream: $Enums.Stream
    city: string
    state: string
  }

  export type UniversityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    stream?: EnumStreamFieldUpdateOperationsInput | $Enums.Stream
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type UniversityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    stream?: EnumStreamFieldUpdateOperationsInput | $Enums.Stream
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type AccommodationListingCreateInput = {
    id?: string
    propertyName: string
    photos?: AccommodationListingCreatephotosInput | string[]
    dailyRate: number
    monthlyRent?: number
    minStay?: number
    deposit?: number | null
    availability?: boolean
    amenities?: AccommodationListingCreateamenitiesInput | string[]
    roomType: $Enums.RoomType
    accommodationType: $Enums.AccommodationType
    livingPreferences?: AccommodationListingCreatelivingPreferencesInput | string[]
    foodPreference: $Enums.FoodPreference
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    nearbyUniversities?: AccommodationListingCreatenearbyUniversitiesInput | string[]
    distanceFromUni?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutAccommodationListingsInput
    inquiries?: InquiryCreateNestedManyWithoutAccommodationListingInput
    reviews?: ReviewCreateNestedManyWithoutAccommodationListingInput
  }

  export type AccommodationListingUncheckedCreateInput = {
    id?: string
    propertyName: string
    photos?: AccommodationListingCreatephotosInput | string[]
    dailyRate: number
    monthlyRent?: number
    minStay?: number
    deposit?: number | null
    availability?: boolean
    amenities?: AccommodationListingCreateamenitiesInput | string[]
    roomType: $Enums.RoomType
    accommodationType: $Enums.AccommodationType
    livingPreferences?: AccommodationListingCreatelivingPreferencesInput | string[]
    foodPreference: $Enums.FoodPreference
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    nearbyUniversities?: AccommodationListingCreatenearbyUniversitiesInput | string[]
    distanceFromUni?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    inquiries?: InquiryUncheckedCreateNestedManyWithoutAccommodationListingInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutAccommodationListingInput
  }

  export type AccommodationListingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    propertyName?: StringFieldUpdateOperationsInput | string
    photos?: AccommodationListingUpdatephotosInput | string[]
    dailyRate?: IntFieldUpdateOperationsInput | number
    monthlyRent?: IntFieldUpdateOperationsInput | number
    minStay?: IntFieldUpdateOperationsInput | number
    deposit?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: AccommodationListingUpdateamenitiesInput | string[]
    roomType?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    accommodationType?: EnumAccommodationTypeFieldUpdateOperationsInput | $Enums.AccommodationType
    livingPreferences?: AccommodationListingUpdatelivingPreferencesInput | string[]
    foodPreference?: EnumFoodPreferenceFieldUpdateOperationsInput | $Enums.FoodPreference
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyUniversities?: AccommodationListingUpdatenearbyUniversitiesInput | string[]
    distanceFromUni?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutAccommodationListingsNestedInput
    inquiries?: InquiryUpdateManyWithoutAccommodationListingNestedInput
    reviews?: ReviewUpdateManyWithoutAccommodationListingNestedInput
  }

  export type AccommodationListingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    propertyName?: StringFieldUpdateOperationsInput | string
    photos?: AccommodationListingUpdatephotosInput | string[]
    dailyRate?: IntFieldUpdateOperationsInput | number
    monthlyRent?: IntFieldUpdateOperationsInput | number
    minStay?: IntFieldUpdateOperationsInput | number
    deposit?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: AccommodationListingUpdateamenitiesInput | string[]
    roomType?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    accommodationType?: EnumAccommodationTypeFieldUpdateOperationsInput | $Enums.AccommodationType
    livingPreferences?: AccommodationListingUpdatelivingPreferencesInput | string[]
    foodPreference?: EnumFoodPreferenceFieldUpdateOperationsInput | $Enums.FoodPreference
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyUniversities?: AccommodationListingUpdatenearbyUniversitiesInput | string[]
    distanceFromUni?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    inquiries?: InquiryUncheckedUpdateManyWithoutAccommodationListingNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutAccommodationListingNestedInput
  }

  export type AccommodationListingCreateManyInput = {
    id?: string
    propertyName: string
    photos?: AccommodationListingCreatephotosInput | string[]
    dailyRate: number
    monthlyRent?: number
    minStay?: number
    deposit?: number | null
    availability?: boolean
    amenities?: AccommodationListingCreateamenitiesInput | string[]
    roomType: $Enums.RoomType
    accommodationType: $Enums.AccommodationType
    livingPreferences?: AccommodationListingCreatelivingPreferencesInput | string[]
    foodPreference: $Enums.FoodPreference
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    nearbyUniversities?: AccommodationListingCreatenearbyUniversitiesInput | string[]
    distanceFromUni?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
  }

  export type AccommodationListingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    propertyName?: StringFieldUpdateOperationsInput | string
    photos?: AccommodationListingUpdatephotosInput | string[]
    dailyRate?: IntFieldUpdateOperationsInput | number
    monthlyRent?: IntFieldUpdateOperationsInput | number
    minStay?: IntFieldUpdateOperationsInput | number
    deposit?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: AccommodationListingUpdateamenitiesInput | string[]
    roomType?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    accommodationType?: EnumAccommodationTypeFieldUpdateOperationsInput | $Enums.AccommodationType
    livingPreferences?: AccommodationListingUpdatelivingPreferencesInput | string[]
    foodPreference?: EnumFoodPreferenceFieldUpdateOperationsInput | $Enums.FoodPreference
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyUniversities?: AccommodationListingUpdatenearbyUniversitiesInput | string[]
    distanceFromUni?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccommodationListingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    propertyName?: StringFieldUpdateOperationsInput | string
    photos?: AccommodationListingUpdatephotosInput | string[]
    dailyRate?: IntFieldUpdateOperationsInput | number
    monthlyRent?: IntFieldUpdateOperationsInput | number
    minStay?: IntFieldUpdateOperationsInput | number
    deposit?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: AccommodationListingUpdateamenitiesInput | string[]
    roomType?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    accommodationType?: EnumAccommodationTypeFieldUpdateOperationsInput | $Enums.AccommodationType
    livingPreferences?: AccommodationListingUpdatelivingPreferencesInput | string[]
    foodPreference?: EnumFoodPreferenceFieldUpdateOperationsInput | $Enums.FoodPreference
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyUniversities?: AccommodationListingUpdatenearbyUniversitiesInput | string[]
    distanceFromUni?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
  }

  export type FoodServiceListingCreateInput = {
    id?: string
    serviceName: string
    photos?: FoodServiceListingCreatephotosInput | string[]
    serviceType: $Enums.FoodServiceType
    priceRange: $Enums.PriceRange
    menuDetails?: string | null
    cuisineType?: FoodServiceListingCreatecuisineTypeInput | string[]
    vegOptions: boolean
    nonVegOptions: boolean
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    operatingHours?: string | null
    deliveryAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutFoodServiceListingsInput
    inquiries?: InquiryCreateNestedManyWithoutFoodServiceListingInput
    reviews?: ReviewCreateNestedManyWithoutFoodServiceListingInput
  }

  export type FoodServiceListingUncheckedCreateInput = {
    id?: string
    serviceName: string
    photos?: FoodServiceListingCreatephotosInput | string[]
    serviceType: $Enums.FoodServiceType
    priceRange: $Enums.PriceRange
    menuDetails?: string | null
    cuisineType?: FoodServiceListingCreatecuisineTypeInput | string[]
    vegOptions: boolean
    nonVegOptions: boolean
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    operatingHours?: string | null
    deliveryAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    inquiries?: InquiryUncheckedCreateNestedManyWithoutFoodServiceListingInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutFoodServiceListingInput
  }

  export type FoodServiceListingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    photos?: FoodServiceListingUpdatephotosInput | string[]
    serviceType?: EnumFoodServiceTypeFieldUpdateOperationsInput | $Enums.FoodServiceType
    priceRange?: EnumPriceRangeFieldUpdateOperationsInput | $Enums.PriceRange
    menuDetails?: NullableStringFieldUpdateOperationsInput | string | null
    cuisineType?: FoodServiceListingUpdatecuisineTypeInput | string[]
    vegOptions?: BoolFieldUpdateOperationsInput | boolean
    nonVegOptions?: BoolFieldUpdateOperationsInput | boolean
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutFoodServiceListingsNestedInput
    inquiries?: InquiryUpdateManyWithoutFoodServiceListingNestedInput
    reviews?: ReviewUpdateManyWithoutFoodServiceListingNestedInput
  }

  export type FoodServiceListingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    photos?: FoodServiceListingUpdatephotosInput | string[]
    serviceType?: EnumFoodServiceTypeFieldUpdateOperationsInput | $Enums.FoodServiceType
    priceRange?: EnumPriceRangeFieldUpdateOperationsInput | $Enums.PriceRange
    menuDetails?: NullableStringFieldUpdateOperationsInput | string | null
    cuisineType?: FoodServiceListingUpdatecuisineTypeInput | string[]
    vegOptions?: BoolFieldUpdateOperationsInput | boolean
    nonVegOptions?: BoolFieldUpdateOperationsInput | boolean
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    inquiries?: InquiryUncheckedUpdateManyWithoutFoodServiceListingNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutFoodServiceListingNestedInput
  }

  export type FoodServiceListingCreateManyInput = {
    id?: string
    serviceName: string
    photos?: FoodServiceListingCreatephotosInput | string[]
    serviceType: $Enums.FoodServiceType
    priceRange: $Enums.PriceRange
    menuDetails?: string | null
    cuisineType?: FoodServiceListingCreatecuisineTypeInput | string[]
    vegOptions: boolean
    nonVegOptions: boolean
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    operatingHours?: string | null
    deliveryAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
  }

  export type FoodServiceListingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    photos?: FoodServiceListingUpdatephotosInput | string[]
    serviceType?: EnumFoodServiceTypeFieldUpdateOperationsInput | $Enums.FoodServiceType
    priceRange?: EnumPriceRangeFieldUpdateOperationsInput | $Enums.PriceRange
    menuDetails?: NullableStringFieldUpdateOperationsInput | string | null
    cuisineType?: FoodServiceListingUpdatecuisineTypeInput | string[]
    vegOptions?: BoolFieldUpdateOperationsInput | boolean
    nonVegOptions?: BoolFieldUpdateOperationsInput | boolean
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodServiceListingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    photos?: FoodServiceListingUpdatephotosInput | string[]
    serviceType?: EnumFoodServiceTypeFieldUpdateOperationsInput | $Enums.FoodServiceType
    priceRange?: EnumPriceRangeFieldUpdateOperationsInput | $Enums.PriceRange
    menuDetails?: NullableStringFieldUpdateOperationsInput | string | null
    cuisineType?: FoodServiceListingUpdatecuisineTypeInput | string[]
    vegOptions?: BoolFieldUpdateOperationsInput | boolean
    nonVegOptions?: BoolFieldUpdateOperationsInput | boolean
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
  }

  export type InquiryCreateInput = {
    id?: string
    message: string
    studentName: string
    studentEmail: string
    studentPhone: string
    status?: $Enums.InquiryStatus
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutInquiriesInput
    accommodationListing?: AccommodationListingCreateNestedOneWithoutInquiriesInput
    foodServiceListing?: FoodServiceListingCreateNestedOneWithoutInquiriesInput
  }

  export type InquiryUncheckedCreateInput = {
    id?: string
    message: string
    studentName: string
    studentEmail: string
    studentPhone: string
    status?: $Enums.InquiryStatus
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    studentId: string
    accommodationListingId?: string | null
    foodServiceListingId?: string | null
  }

  export type InquiryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    status?: EnumInquiryStatusFieldUpdateOperationsInput | $Enums.InquiryStatus
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutInquiriesNestedInput
    accommodationListing?: AccommodationListingUpdateOneWithoutInquiriesNestedInput
    foodServiceListing?: FoodServiceListingUpdateOneWithoutInquiriesNestedInput
  }

  export type InquiryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    status?: EnumInquiryStatusFieldUpdateOperationsInput | $Enums.InquiryStatus
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentId?: StringFieldUpdateOperationsInput | string
    accommodationListingId?: NullableStringFieldUpdateOperationsInput | string | null
    foodServiceListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InquiryCreateManyInput = {
    id?: string
    message: string
    studentName: string
    studentEmail: string
    studentPhone: string
    status?: $Enums.InquiryStatus
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    studentId: string
    accommodationListingId?: string | null
    foodServiceListingId?: string | null
  }

  export type InquiryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    status?: EnumInquiryStatusFieldUpdateOperationsInput | $Enums.InquiryStatus
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InquiryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    status?: EnumInquiryStatusFieldUpdateOperationsInput | $Enums.InquiryStatus
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentId?: StringFieldUpdateOperationsInput | string
    accommodationListingId?: NullableStringFieldUpdateOperationsInput | string | null
    foodServiceListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewCreateInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
    accommodationListing?: AccommodationListingCreateNestedOneWithoutReviewsInput
    foodServiceListing?: FoodServiceListingCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    accommodationListingId?: string | null
    foodServiceListingId?: string | null
  }

  export type ReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    accommodationListing?: AccommodationListingUpdateOneWithoutReviewsNestedInput
    foodServiceListing?: FoodServiceListingUpdateOneWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    accommodationListingId?: NullableStringFieldUpdateOperationsInput | string | null
    foodServiceListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewCreateManyInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    accommodationListingId?: string | null
    foodServiceListingId?: string | null
  }

  export type ReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    accommodationListingId?: NullableStringFieldUpdateOperationsInput | string | null
    foodServiceListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatSessionCreateInput = {
    id?: string
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChatMessageCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionUncheckedCreateInput = {
    id?: string
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChatMessageUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ChatSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChatMessageUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChatMessageUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ChatSessionCreateManyInput = {
    id?: string
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateInput = {
    id?: string
    role: $Enums.ChatRole
    content: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    session: ChatSessionCreateNestedOneWithoutMessagesInput
  }

  export type ChatMessageUncheckedCreateInput = {
    id?: string
    sessionId: string
    role: $Enums.ChatRole
    content: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ChatMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumChatRoleFieldUpdateOperationsInput | $Enums.ChatRole
    content?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: ChatSessionUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    role?: EnumChatRoleFieldUpdateOperationsInput | $Enums.ChatRole
    content?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateManyInput = {
    id?: string
    sessionId: string
    role: $Enums.ChatRole
    content: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ChatMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumChatRoleFieldUpdateOperationsInput | $Enums.ChatRole
    content?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    role?: EnumChatRoleFieldUpdateOperationsInput | $Enums.ChatRole
    content?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumStreamNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Stream | EnumStreamFieldRefInput<$PrismaModel> | null
    in?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStreamNullableFilter<$PrismaModel> | $Enums.Stream | null
  }

  export type EnumServiceTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumServiceTypeNullableFilter<$PrismaModel> | $Enums.ServiceType | null
  }

  export type EnumBusinessTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessType | EnumBusinessTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBusinessTypeNullableFilter<$PrismaModel> | $Enums.BusinessType | null
  }

  export type AccommodationListingListRelationFilter = {
    every?: AccommodationListingWhereInput
    some?: AccommodationListingWhereInput
    none?: AccommodationListingWhereInput
  }

  export type FoodServiceListingListRelationFilter = {
    every?: FoodServiceListingWhereInput
    some?: FoodServiceListingWhereInput
    none?: FoodServiceListingWhereInput
  }

  export type InquiryListRelationFilter = {
    every?: InquiryWhereInput
    some?: InquiryWhereInput
    none?: InquiryWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccommodationListingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FoodServiceListingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InquiryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    userType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    university?: SortOrder
    stream?: SortOrder
    serviceType?: SortOrder
    businessType?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    userType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    university?: SortOrder
    stream?: SortOrder
    serviceType?: SortOrder
    businessType?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    userType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    university?: SortOrder
    stream?: SortOrder
    serviceType?: SortOrder
    businessType?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumStreamNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Stream | EnumStreamFieldRefInput<$PrismaModel> | null
    in?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStreamNullableWithAggregatesFilter<$PrismaModel> | $Enums.Stream | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStreamNullableFilter<$PrismaModel>
    _max?: NestedEnumStreamNullableFilter<$PrismaModel>
  }

  export type EnumServiceTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumServiceTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.ServiceType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumServiceTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumServiceTypeNullableFilter<$PrismaModel>
  }

  export type EnumBusinessTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessType | EnumBusinessTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBusinessTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BusinessType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBusinessTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumBusinessTypeNullableFilter<$PrismaModel>
  }

  export type EnumStreamFilter<$PrismaModel = never> = {
    equals?: $Enums.Stream | EnumStreamFieldRefInput<$PrismaModel>
    in?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel>
    notIn?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel>
    not?: NestedEnumStreamFilter<$PrismaModel> | $Enums.Stream
  }

  export type UniversityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    stream?: SortOrder
    city?: SortOrder
    state?: SortOrder
  }

  export type UniversityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    stream?: SortOrder
    city?: SortOrder
    state?: SortOrder
  }

  export type UniversityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    stream?: SortOrder
    city?: SortOrder
    state?: SortOrder
  }

  export type EnumStreamWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Stream | EnumStreamFieldRefInput<$PrismaModel>
    in?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel>
    notIn?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel>
    not?: NestedEnumStreamWithAggregatesFilter<$PrismaModel> | $Enums.Stream
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStreamFilter<$PrismaModel>
    _max?: NestedEnumStreamFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumRoomTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomType | EnumRoomTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomTypeFilter<$PrismaModel> | $Enums.RoomType
  }

  export type EnumAccommodationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccommodationType | EnumAccommodationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccommodationType[] | ListEnumAccommodationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccommodationType[] | ListEnumAccommodationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccommodationTypeFilter<$PrismaModel> | $Enums.AccommodationType
  }

  export type EnumFoodPreferenceFilter<$PrismaModel = never> = {
    equals?: $Enums.FoodPreference | EnumFoodPreferenceFieldRefInput<$PrismaModel>
    in?: $Enums.FoodPreference[] | ListEnumFoodPreferenceFieldRefInput<$PrismaModel>
    notIn?: $Enums.FoodPreference[] | ListEnumFoodPreferenceFieldRefInput<$PrismaModel>
    not?: NestedEnumFoodPreferenceFilter<$PrismaModel> | $Enums.FoodPreference
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccommodationListingCountOrderByAggregateInput = {
    id?: SortOrder
    propertyName?: SortOrder
    photos?: SortOrder
    dailyRate?: SortOrder
    monthlyRent?: SortOrder
    minStay?: SortOrder
    deposit?: SortOrder
    availability?: SortOrder
    amenities?: SortOrder
    roomType?: SortOrder
    accommodationType?: SortOrder
    livingPreferences?: SortOrder
    foodPreference?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    contactInfo?: SortOrder
    description?: SortOrder
    nearbyUniversities?: SortOrder
    distanceFromUni?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type AccommodationListingAvgOrderByAggregateInput = {
    dailyRate?: SortOrder
    monthlyRent?: SortOrder
    minStay?: SortOrder
    deposit?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    distanceFromUni?: SortOrder
  }

  export type AccommodationListingMaxOrderByAggregateInput = {
    id?: SortOrder
    propertyName?: SortOrder
    dailyRate?: SortOrder
    monthlyRent?: SortOrder
    minStay?: SortOrder
    deposit?: SortOrder
    availability?: SortOrder
    roomType?: SortOrder
    accommodationType?: SortOrder
    foodPreference?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    contactInfo?: SortOrder
    description?: SortOrder
    distanceFromUni?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type AccommodationListingMinOrderByAggregateInput = {
    id?: SortOrder
    propertyName?: SortOrder
    dailyRate?: SortOrder
    monthlyRent?: SortOrder
    minStay?: SortOrder
    deposit?: SortOrder
    availability?: SortOrder
    roomType?: SortOrder
    accommodationType?: SortOrder
    foodPreference?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    contactInfo?: SortOrder
    description?: SortOrder
    distanceFromUni?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type AccommodationListingSumOrderByAggregateInput = {
    dailyRate?: SortOrder
    monthlyRent?: SortOrder
    minStay?: SortOrder
    deposit?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    distanceFromUni?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoomTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomType | EnumRoomTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomTypeWithAggregatesFilter<$PrismaModel> | $Enums.RoomType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoomTypeFilter<$PrismaModel>
    _max?: NestedEnumRoomTypeFilter<$PrismaModel>
  }

  export type EnumAccommodationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccommodationType | EnumAccommodationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccommodationType[] | ListEnumAccommodationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccommodationType[] | ListEnumAccommodationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccommodationTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccommodationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccommodationTypeFilter<$PrismaModel>
    _max?: NestedEnumAccommodationTypeFilter<$PrismaModel>
  }

  export type EnumFoodPreferenceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FoodPreference | EnumFoodPreferenceFieldRefInput<$PrismaModel>
    in?: $Enums.FoodPreference[] | ListEnumFoodPreferenceFieldRefInput<$PrismaModel>
    notIn?: $Enums.FoodPreference[] | ListEnumFoodPreferenceFieldRefInput<$PrismaModel>
    not?: NestedEnumFoodPreferenceWithAggregatesFilter<$PrismaModel> | $Enums.FoodPreference
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFoodPreferenceFilter<$PrismaModel>
    _max?: NestedEnumFoodPreferenceFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumFoodServiceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FoodServiceType | EnumFoodServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FoodServiceType[] | ListEnumFoodServiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FoodServiceType[] | ListEnumFoodServiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFoodServiceTypeFilter<$PrismaModel> | $Enums.FoodServiceType
  }

  export type EnumPriceRangeFilter<$PrismaModel = never> = {
    equals?: $Enums.PriceRange | EnumPriceRangeFieldRefInput<$PrismaModel>
    in?: $Enums.PriceRange[] | ListEnumPriceRangeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriceRange[] | ListEnumPriceRangeFieldRefInput<$PrismaModel>
    not?: NestedEnumPriceRangeFilter<$PrismaModel> | $Enums.PriceRange
  }

  export type FoodServiceListingCountOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    photos?: SortOrder
    serviceType?: SortOrder
    priceRange?: SortOrder
    menuDetails?: SortOrder
    cuisineType?: SortOrder
    vegOptions?: SortOrder
    nonVegOptions?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    contactInfo?: SortOrder
    description?: SortOrder
    operatingHours?: SortOrder
    deliveryAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type FoodServiceListingAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FoodServiceListingMaxOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    serviceType?: SortOrder
    priceRange?: SortOrder
    menuDetails?: SortOrder
    vegOptions?: SortOrder
    nonVegOptions?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    contactInfo?: SortOrder
    description?: SortOrder
    operatingHours?: SortOrder
    deliveryAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type FoodServiceListingMinOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    serviceType?: SortOrder
    priceRange?: SortOrder
    menuDetails?: SortOrder
    vegOptions?: SortOrder
    nonVegOptions?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    contactInfo?: SortOrder
    description?: SortOrder
    operatingHours?: SortOrder
    deliveryAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ownerId?: SortOrder
  }

  export type FoodServiceListingSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type EnumFoodServiceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FoodServiceType | EnumFoodServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FoodServiceType[] | ListEnumFoodServiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FoodServiceType[] | ListEnumFoodServiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFoodServiceTypeWithAggregatesFilter<$PrismaModel> | $Enums.FoodServiceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFoodServiceTypeFilter<$PrismaModel>
    _max?: NestedEnumFoodServiceTypeFilter<$PrismaModel>
  }

  export type EnumPriceRangeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PriceRange | EnumPriceRangeFieldRefInput<$PrismaModel>
    in?: $Enums.PriceRange[] | ListEnumPriceRangeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriceRange[] | ListEnumPriceRangeFieldRefInput<$PrismaModel>
    not?: NestedEnumPriceRangeWithAggregatesFilter<$PrismaModel> | $Enums.PriceRange
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriceRangeFilter<$PrismaModel>
    _max?: NestedEnumPriceRangeFilter<$PrismaModel>
  }

  export type EnumInquiryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InquiryStatus | EnumInquiryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InquiryStatus[] | ListEnumInquiryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InquiryStatus[] | ListEnumInquiryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInquiryStatusFilter<$PrismaModel> | $Enums.InquiryStatus
  }

  export type AccommodationListingNullableScalarRelationFilter = {
    is?: AccommodationListingWhereInput | null
    isNot?: AccommodationListingWhereInput | null
  }

  export type FoodServiceListingNullableScalarRelationFilter = {
    is?: FoodServiceListingWhereInput | null
    isNot?: FoodServiceListingWhereInput | null
  }

  export type InquiryCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    studentName?: SortOrder
    studentEmail?: SortOrder
    studentPhone?: SortOrder
    status?: SortOrder
    response?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    studentId?: SortOrder
    accommodationListingId?: SortOrder
    foodServiceListingId?: SortOrder
  }

  export type InquiryMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    studentName?: SortOrder
    studentEmail?: SortOrder
    studentPhone?: SortOrder
    status?: SortOrder
    response?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    studentId?: SortOrder
    accommodationListingId?: SortOrder
    foodServiceListingId?: SortOrder
  }

  export type InquiryMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    studentName?: SortOrder
    studentEmail?: SortOrder
    studentPhone?: SortOrder
    status?: SortOrder
    response?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    studentId?: SortOrder
    accommodationListingId?: SortOrder
    foodServiceListingId?: SortOrder
  }

  export type EnumInquiryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InquiryStatus | EnumInquiryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InquiryStatus[] | ListEnumInquiryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InquiryStatus[] | ListEnumInquiryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInquiryStatusWithAggregatesFilter<$PrismaModel> | $Enums.InquiryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInquiryStatusFilter<$PrismaModel>
    _max?: NestedEnumInquiryStatusFilter<$PrismaModel>
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    accommodationListingId?: SortOrder
    foodServiceListingId?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    accommodationListingId?: SortOrder
    foodServiceListingId?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    accommodationListingId?: SortOrder
    foodServiceListingId?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ChatMessageListRelationFilter = {
    every?: ChatMessageWhereInput
    some?: ChatMessageWhereInput
    none?: ChatMessageWhereInput
  }

  export type ChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumChatRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ChatRole | EnumChatRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChatRole[] | ListEnumChatRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChatRole[] | ListEnumChatRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChatRoleFilter<$PrismaModel> | $Enums.ChatRole
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ChatSessionScalarRelationFilter = {
    is?: ChatSessionWhereInput
    isNot?: ChatSessionWhereInput
  }

  export type ChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumChatRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChatRole | EnumChatRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChatRole[] | ListEnumChatRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChatRole[] | ListEnumChatRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChatRoleWithAggregatesFilter<$PrismaModel> | $Enums.ChatRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChatRoleFilter<$PrismaModel>
    _max?: NestedEnumChatRoleFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type AccommodationListingCreateNestedManyWithoutOwnerInput = {
    create?: XOR<AccommodationListingCreateWithoutOwnerInput, AccommodationListingUncheckedCreateWithoutOwnerInput> | AccommodationListingCreateWithoutOwnerInput[] | AccommodationListingUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: AccommodationListingCreateOrConnectWithoutOwnerInput | AccommodationListingCreateOrConnectWithoutOwnerInput[]
    createMany?: AccommodationListingCreateManyOwnerInputEnvelope
    connect?: AccommodationListingWhereUniqueInput | AccommodationListingWhereUniqueInput[]
  }

  export type FoodServiceListingCreateNestedManyWithoutOwnerInput = {
    create?: XOR<FoodServiceListingCreateWithoutOwnerInput, FoodServiceListingUncheckedCreateWithoutOwnerInput> | FoodServiceListingCreateWithoutOwnerInput[] | FoodServiceListingUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: FoodServiceListingCreateOrConnectWithoutOwnerInput | FoodServiceListingCreateOrConnectWithoutOwnerInput[]
    createMany?: FoodServiceListingCreateManyOwnerInputEnvelope
    connect?: FoodServiceListingWhereUniqueInput | FoodServiceListingWhereUniqueInput[]
  }

  export type InquiryCreateNestedManyWithoutStudentInput = {
    create?: XOR<InquiryCreateWithoutStudentInput, InquiryUncheckedCreateWithoutStudentInput> | InquiryCreateWithoutStudentInput[] | InquiryUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutStudentInput | InquiryCreateOrConnectWithoutStudentInput[]
    createMany?: InquiryCreateManyStudentInputEnvelope
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type AccommodationListingUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<AccommodationListingCreateWithoutOwnerInput, AccommodationListingUncheckedCreateWithoutOwnerInput> | AccommodationListingCreateWithoutOwnerInput[] | AccommodationListingUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: AccommodationListingCreateOrConnectWithoutOwnerInput | AccommodationListingCreateOrConnectWithoutOwnerInput[]
    createMany?: AccommodationListingCreateManyOwnerInputEnvelope
    connect?: AccommodationListingWhereUniqueInput | AccommodationListingWhereUniqueInput[]
  }

  export type FoodServiceListingUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<FoodServiceListingCreateWithoutOwnerInput, FoodServiceListingUncheckedCreateWithoutOwnerInput> | FoodServiceListingCreateWithoutOwnerInput[] | FoodServiceListingUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: FoodServiceListingCreateOrConnectWithoutOwnerInput | FoodServiceListingCreateOrConnectWithoutOwnerInput[]
    createMany?: FoodServiceListingCreateManyOwnerInputEnvelope
    connect?: FoodServiceListingWhereUniqueInput | FoodServiceListingWhereUniqueInput[]
  }

  export type InquiryUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<InquiryCreateWithoutStudentInput, InquiryUncheckedCreateWithoutStudentInput> | InquiryCreateWithoutStudentInput[] | InquiryUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutStudentInput | InquiryCreateOrConnectWithoutStudentInput[]
    createMany?: InquiryCreateManyStudentInputEnvelope
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserTypeFieldUpdateOperationsInput = {
    set?: $Enums.UserType
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableEnumStreamFieldUpdateOperationsInput = {
    set?: $Enums.Stream | null
  }

  export type NullableEnumServiceTypeFieldUpdateOperationsInput = {
    set?: $Enums.ServiceType | null
  }

  export type NullableEnumBusinessTypeFieldUpdateOperationsInput = {
    set?: $Enums.BusinessType | null
  }

  export type AccommodationListingUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<AccommodationListingCreateWithoutOwnerInput, AccommodationListingUncheckedCreateWithoutOwnerInput> | AccommodationListingCreateWithoutOwnerInput[] | AccommodationListingUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: AccommodationListingCreateOrConnectWithoutOwnerInput | AccommodationListingCreateOrConnectWithoutOwnerInput[]
    upsert?: AccommodationListingUpsertWithWhereUniqueWithoutOwnerInput | AccommodationListingUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: AccommodationListingCreateManyOwnerInputEnvelope
    set?: AccommodationListingWhereUniqueInput | AccommodationListingWhereUniqueInput[]
    disconnect?: AccommodationListingWhereUniqueInput | AccommodationListingWhereUniqueInput[]
    delete?: AccommodationListingWhereUniqueInput | AccommodationListingWhereUniqueInput[]
    connect?: AccommodationListingWhereUniqueInput | AccommodationListingWhereUniqueInput[]
    update?: AccommodationListingUpdateWithWhereUniqueWithoutOwnerInput | AccommodationListingUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: AccommodationListingUpdateManyWithWhereWithoutOwnerInput | AccommodationListingUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: AccommodationListingScalarWhereInput | AccommodationListingScalarWhereInput[]
  }

  export type FoodServiceListingUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<FoodServiceListingCreateWithoutOwnerInput, FoodServiceListingUncheckedCreateWithoutOwnerInput> | FoodServiceListingCreateWithoutOwnerInput[] | FoodServiceListingUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: FoodServiceListingCreateOrConnectWithoutOwnerInput | FoodServiceListingCreateOrConnectWithoutOwnerInput[]
    upsert?: FoodServiceListingUpsertWithWhereUniqueWithoutOwnerInput | FoodServiceListingUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: FoodServiceListingCreateManyOwnerInputEnvelope
    set?: FoodServiceListingWhereUniqueInput | FoodServiceListingWhereUniqueInput[]
    disconnect?: FoodServiceListingWhereUniqueInput | FoodServiceListingWhereUniqueInput[]
    delete?: FoodServiceListingWhereUniqueInput | FoodServiceListingWhereUniqueInput[]
    connect?: FoodServiceListingWhereUniqueInput | FoodServiceListingWhereUniqueInput[]
    update?: FoodServiceListingUpdateWithWhereUniqueWithoutOwnerInput | FoodServiceListingUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: FoodServiceListingUpdateManyWithWhereWithoutOwnerInput | FoodServiceListingUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: FoodServiceListingScalarWhereInput | FoodServiceListingScalarWhereInput[]
  }

  export type InquiryUpdateManyWithoutStudentNestedInput = {
    create?: XOR<InquiryCreateWithoutStudentInput, InquiryUncheckedCreateWithoutStudentInput> | InquiryCreateWithoutStudentInput[] | InquiryUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutStudentInput | InquiryCreateOrConnectWithoutStudentInput[]
    upsert?: InquiryUpsertWithWhereUniqueWithoutStudentInput | InquiryUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: InquiryCreateManyStudentInputEnvelope
    set?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    disconnect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    delete?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    update?: InquiryUpdateWithWhereUniqueWithoutStudentInput | InquiryUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: InquiryUpdateManyWithWhereWithoutStudentInput | InquiryUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type AccommodationListingUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<AccommodationListingCreateWithoutOwnerInput, AccommodationListingUncheckedCreateWithoutOwnerInput> | AccommodationListingCreateWithoutOwnerInput[] | AccommodationListingUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: AccommodationListingCreateOrConnectWithoutOwnerInput | AccommodationListingCreateOrConnectWithoutOwnerInput[]
    upsert?: AccommodationListingUpsertWithWhereUniqueWithoutOwnerInput | AccommodationListingUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: AccommodationListingCreateManyOwnerInputEnvelope
    set?: AccommodationListingWhereUniqueInput | AccommodationListingWhereUniqueInput[]
    disconnect?: AccommodationListingWhereUniqueInput | AccommodationListingWhereUniqueInput[]
    delete?: AccommodationListingWhereUniqueInput | AccommodationListingWhereUniqueInput[]
    connect?: AccommodationListingWhereUniqueInput | AccommodationListingWhereUniqueInput[]
    update?: AccommodationListingUpdateWithWhereUniqueWithoutOwnerInput | AccommodationListingUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: AccommodationListingUpdateManyWithWhereWithoutOwnerInput | AccommodationListingUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: AccommodationListingScalarWhereInput | AccommodationListingScalarWhereInput[]
  }

  export type FoodServiceListingUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<FoodServiceListingCreateWithoutOwnerInput, FoodServiceListingUncheckedCreateWithoutOwnerInput> | FoodServiceListingCreateWithoutOwnerInput[] | FoodServiceListingUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: FoodServiceListingCreateOrConnectWithoutOwnerInput | FoodServiceListingCreateOrConnectWithoutOwnerInput[]
    upsert?: FoodServiceListingUpsertWithWhereUniqueWithoutOwnerInput | FoodServiceListingUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: FoodServiceListingCreateManyOwnerInputEnvelope
    set?: FoodServiceListingWhereUniqueInput | FoodServiceListingWhereUniqueInput[]
    disconnect?: FoodServiceListingWhereUniqueInput | FoodServiceListingWhereUniqueInput[]
    delete?: FoodServiceListingWhereUniqueInput | FoodServiceListingWhereUniqueInput[]
    connect?: FoodServiceListingWhereUniqueInput | FoodServiceListingWhereUniqueInput[]
    update?: FoodServiceListingUpdateWithWhereUniqueWithoutOwnerInput | FoodServiceListingUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: FoodServiceListingUpdateManyWithWhereWithoutOwnerInput | FoodServiceListingUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: FoodServiceListingScalarWhereInput | FoodServiceListingScalarWhereInput[]
  }

  export type InquiryUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<InquiryCreateWithoutStudentInput, InquiryUncheckedCreateWithoutStudentInput> | InquiryCreateWithoutStudentInput[] | InquiryUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutStudentInput | InquiryCreateOrConnectWithoutStudentInput[]
    upsert?: InquiryUpsertWithWhereUniqueWithoutStudentInput | InquiryUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: InquiryCreateManyStudentInputEnvelope
    set?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    disconnect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    delete?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    update?: InquiryUpdateWithWhereUniqueWithoutStudentInput | InquiryUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: InquiryUpdateManyWithWhereWithoutStudentInput | InquiryUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type EnumStreamFieldUpdateOperationsInput = {
    set?: $Enums.Stream
  }

  export type AccommodationListingCreatephotosInput = {
    set: string[]
  }

  export type AccommodationListingCreateamenitiesInput = {
    set: string[]
  }

  export type AccommodationListingCreatelivingPreferencesInput = {
    set: string[]
  }

  export type AccommodationListingCreatenearbyUniversitiesInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutAccommodationListingsInput = {
    create?: XOR<UserCreateWithoutAccommodationListingsInput, UserUncheckedCreateWithoutAccommodationListingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccommodationListingsInput
    connect?: UserWhereUniqueInput
  }

  export type InquiryCreateNestedManyWithoutAccommodationListingInput = {
    create?: XOR<InquiryCreateWithoutAccommodationListingInput, InquiryUncheckedCreateWithoutAccommodationListingInput> | InquiryCreateWithoutAccommodationListingInput[] | InquiryUncheckedCreateWithoutAccommodationListingInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutAccommodationListingInput | InquiryCreateOrConnectWithoutAccommodationListingInput[]
    createMany?: InquiryCreateManyAccommodationListingInputEnvelope
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutAccommodationListingInput = {
    create?: XOR<ReviewCreateWithoutAccommodationListingInput, ReviewUncheckedCreateWithoutAccommodationListingInput> | ReviewCreateWithoutAccommodationListingInput[] | ReviewUncheckedCreateWithoutAccommodationListingInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAccommodationListingInput | ReviewCreateOrConnectWithoutAccommodationListingInput[]
    createMany?: ReviewCreateManyAccommodationListingInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type InquiryUncheckedCreateNestedManyWithoutAccommodationListingInput = {
    create?: XOR<InquiryCreateWithoutAccommodationListingInput, InquiryUncheckedCreateWithoutAccommodationListingInput> | InquiryCreateWithoutAccommodationListingInput[] | InquiryUncheckedCreateWithoutAccommodationListingInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutAccommodationListingInput | InquiryCreateOrConnectWithoutAccommodationListingInput[]
    createMany?: InquiryCreateManyAccommodationListingInputEnvelope
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutAccommodationListingInput = {
    create?: XOR<ReviewCreateWithoutAccommodationListingInput, ReviewUncheckedCreateWithoutAccommodationListingInput> | ReviewCreateWithoutAccommodationListingInput[] | ReviewUncheckedCreateWithoutAccommodationListingInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAccommodationListingInput | ReviewCreateOrConnectWithoutAccommodationListingInput[]
    createMany?: ReviewCreateManyAccommodationListingInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type AccommodationListingUpdatephotosInput = {
    set?: string[]
    push?: string | string[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AccommodationListingUpdateamenitiesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumRoomTypeFieldUpdateOperationsInput = {
    set?: $Enums.RoomType
  }

  export type EnumAccommodationTypeFieldUpdateOperationsInput = {
    set?: $Enums.AccommodationType
  }

  export type AccommodationListingUpdatelivingPreferencesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumFoodPreferenceFieldUpdateOperationsInput = {
    set?: $Enums.FoodPreference
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccommodationListingUpdatenearbyUniversitiesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutAccommodationListingsNestedInput = {
    create?: XOR<UserCreateWithoutAccommodationListingsInput, UserUncheckedCreateWithoutAccommodationListingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccommodationListingsInput
    upsert?: UserUpsertWithoutAccommodationListingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccommodationListingsInput, UserUpdateWithoutAccommodationListingsInput>, UserUncheckedUpdateWithoutAccommodationListingsInput>
  }

  export type InquiryUpdateManyWithoutAccommodationListingNestedInput = {
    create?: XOR<InquiryCreateWithoutAccommodationListingInput, InquiryUncheckedCreateWithoutAccommodationListingInput> | InquiryCreateWithoutAccommodationListingInput[] | InquiryUncheckedCreateWithoutAccommodationListingInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutAccommodationListingInput | InquiryCreateOrConnectWithoutAccommodationListingInput[]
    upsert?: InquiryUpsertWithWhereUniqueWithoutAccommodationListingInput | InquiryUpsertWithWhereUniqueWithoutAccommodationListingInput[]
    createMany?: InquiryCreateManyAccommodationListingInputEnvelope
    set?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    disconnect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    delete?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    update?: InquiryUpdateWithWhereUniqueWithoutAccommodationListingInput | InquiryUpdateWithWhereUniqueWithoutAccommodationListingInput[]
    updateMany?: InquiryUpdateManyWithWhereWithoutAccommodationListingInput | InquiryUpdateManyWithWhereWithoutAccommodationListingInput[]
    deleteMany?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutAccommodationListingNestedInput = {
    create?: XOR<ReviewCreateWithoutAccommodationListingInput, ReviewUncheckedCreateWithoutAccommodationListingInput> | ReviewCreateWithoutAccommodationListingInput[] | ReviewUncheckedCreateWithoutAccommodationListingInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAccommodationListingInput | ReviewCreateOrConnectWithoutAccommodationListingInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutAccommodationListingInput | ReviewUpsertWithWhereUniqueWithoutAccommodationListingInput[]
    createMany?: ReviewCreateManyAccommodationListingInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutAccommodationListingInput | ReviewUpdateWithWhereUniqueWithoutAccommodationListingInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutAccommodationListingInput | ReviewUpdateManyWithWhereWithoutAccommodationListingInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type InquiryUncheckedUpdateManyWithoutAccommodationListingNestedInput = {
    create?: XOR<InquiryCreateWithoutAccommodationListingInput, InquiryUncheckedCreateWithoutAccommodationListingInput> | InquiryCreateWithoutAccommodationListingInput[] | InquiryUncheckedCreateWithoutAccommodationListingInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutAccommodationListingInput | InquiryCreateOrConnectWithoutAccommodationListingInput[]
    upsert?: InquiryUpsertWithWhereUniqueWithoutAccommodationListingInput | InquiryUpsertWithWhereUniqueWithoutAccommodationListingInput[]
    createMany?: InquiryCreateManyAccommodationListingInputEnvelope
    set?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    disconnect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    delete?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    update?: InquiryUpdateWithWhereUniqueWithoutAccommodationListingInput | InquiryUpdateWithWhereUniqueWithoutAccommodationListingInput[]
    updateMany?: InquiryUpdateManyWithWhereWithoutAccommodationListingInput | InquiryUpdateManyWithWhereWithoutAccommodationListingInput[]
    deleteMany?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutAccommodationListingNestedInput = {
    create?: XOR<ReviewCreateWithoutAccommodationListingInput, ReviewUncheckedCreateWithoutAccommodationListingInput> | ReviewCreateWithoutAccommodationListingInput[] | ReviewUncheckedCreateWithoutAccommodationListingInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutAccommodationListingInput | ReviewCreateOrConnectWithoutAccommodationListingInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutAccommodationListingInput | ReviewUpsertWithWhereUniqueWithoutAccommodationListingInput[]
    createMany?: ReviewCreateManyAccommodationListingInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutAccommodationListingInput | ReviewUpdateWithWhereUniqueWithoutAccommodationListingInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutAccommodationListingInput | ReviewUpdateManyWithWhereWithoutAccommodationListingInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type FoodServiceListingCreatephotosInput = {
    set: string[]
  }

  export type FoodServiceListingCreatecuisineTypeInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutFoodServiceListingsInput = {
    create?: XOR<UserCreateWithoutFoodServiceListingsInput, UserUncheckedCreateWithoutFoodServiceListingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoodServiceListingsInput
    connect?: UserWhereUniqueInput
  }

  export type InquiryCreateNestedManyWithoutFoodServiceListingInput = {
    create?: XOR<InquiryCreateWithoutFoodServiceListingInput, InquiryUncheckedCreateWithoutFoodServiceListingInput> | InquiryCreateWithoutFoodServiceListingInput[] | InquiryUncheckedCreateWithoutFoodServiceListingInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutFoodServiceListingInput | InquiryCreateOrConnectWithoutFoodServiceListingInput[]
    createMany?: InquiryCreateManyFoodServiceListingInputEnvelope
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutFoodServiceListingInput = {
    create?: XOR<ReviewCreateWithoutFoodServiceListingInput, ReviewUncheckedCreateWithoutFoodServiceListingInput> | ReviewCreateWithoutFoodServiceListingInput[] | ReviewUncheckedCreateWithoutFoodServiceListingInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutFoodServiceListingInput | ReviewCreateOrConnectWithoutFoodServiceListingInput[]
    createMany?: ReviewCreateManyFoodServiceListingInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type InquiryUncheckedCreateNestedManyWithoutFoodServiceListingInput = {
    create?: XOR<InquiryCreateWithoutFoodServiceListingInput, InquiryUncheckedCreateWithoutFoodServiceListingInput> | InquiryCreateWithoutFoodServiceListingInput[] | InquiryUncheckedCreateWithoutFoodServiceListingInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutFoodServiceListingInput | InquiryCreateOrConnectWithoutFoodServiceListingInput[]
    createMany?: InquiryCreateManyFoodServiceListingInputEnvelope
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutFoodServiceListingInput = {
    create?: XOR<ReviewCreateWithoutFoodServiceListingInput, ReviewUncheckedCreateWithoutFoodServiceListingInput> | ReviewCreateWithoutFoodServiceListingInput[] | ReviewUncheckedCreateWithoutFoodServiceListingInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutFoodServiceListingInput | ReviewCreateOrConnectWithoutFoodServiceListingInput[]
    createMany?: ReviewCreateManyFoodServiceListingInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type FoodServiceListingUpdatephotosInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumFoodServiceTypeFieldUpdateOperationsInput = {
    set?: $Enums.FoodServiceType
  }

  export type EnumPriceRangeFieldUpdateOperationsInput = {
    set?: $Enums.PriceRange
  }

  export type FoodServiceListingUpdatecuisineTypeInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutFoodServiceListingsNestedInput = {
    create?: XOR<UserCreateWithoutFoodServiceListingsInput, UserUncheckedCreateWithoutFoodServiceListingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFoodServiceListingsInput
    upsert?: UserUpsertWithoutFoodServiceListingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFoodServiceListingsInput, UserUpdateWithoutFoodServiceListingsInput>, UserUncheckedUpdateWithoutFoodServiceListingsInput>
  }

  export type InquiryUpdateManyWithoutFoodServiceListingNestedInput = {
    create?: XOR<InquiryCreateWithoutFoodServiceListingInput, InquiryUncheckedCreateWithoutFoodServiceListingInput> | InquiryCreateWithoutFoodServiceListingInput[] | InquiryUncheckedCreateWithoutFoodServiceListingInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutFoodServiceListingInput | InquiryCreateOrConnectWithoutFoodServiceListingInput[]
    upsert?: InquiryUpsertWithWhereUniqueWithoutFoodServiceListingInput | InquiryUpsertWithWhereUniqueWithoutFoodServiceListingInput[]
    createMany?: InquiryCreateManyFoodServiceListingInputEnvelope
    set?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    disconnect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    delete?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    update?: InquiryUpdateWithWhereUniqueWithoutFoodServiceListingInput | InquiryUpdateWithWhereUniqueWithoutFoodServiceListingInput[]
    updateMany?: InquiryUpdateManyWithWhereWithoutFoodServiceListingInput | InquiryUpdateManyWithWhereWithoutFoodServiceListingInput[]
    deleteMany?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutFoodServiceListingNestedInput = {
    create?: XOR<ReviewCreateWithoutFoodServiceListingInput, ReviewUncheckedCreateWithoutFoodServiceListingInput> | ReviewCreateWithoutFoodServiceListingInput[] | ReviewUncheckedCreateWithoutFoodServiceListingInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutFoodServiceListingInput | ReviewCreateOrConnectWithoutFoodServiceListingInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutFoodServiceListingInput | ReviewUpsertWithWhereUniqueWithoutFoodServiceListingInput[]
    createMany?: ReviewCreateManyFoodServiceListingInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutFoodServiceListingInput | ReviewUpdateWithWhereUniqueWithoutFoodServiceListingInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutFoodServiceListingInput | ReviewUpdateManyWithWhereWithoutFoodServiceListingInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type InquiryUncheckedUpdateManyWithoutFoodServiceListingNestedInput = {
    create?: XOR<InquiryCreateWithoutFoodServiceListingInput, InquiryUncheckedCreateWithoutFoodServiceListingInput> | InquiryCreateWithoutFoodServiceListingInput[] | InquiryUncheckedCreateWithoutFoodServiceListingInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutFoodServiceListingInput | InquiryCreateOrConnectWithoutFoodServiceListingInput[]
    upsert?: InquiryUpsertWithWhereUniqueWithoutFoodServiceListingInput | InquiryUpsertWithWhereUniqueWithoutFoodServiceListingInput[]
    createMany?: InquiryCreateManyFoodServiceListingInputEnvelope
    set?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    disconnect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    delete?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    update?: InquiryUpdateWithWhereUniqueWithoutFoodServiceListingInput | InquiryUpdateWithWhereUniqueWithoutFoodServiceListingInput[]
    updateMany?: InquiryUpdateManyWithWhereWithoutFoodServiceListingInput | InquiryUpdateManyWithWhereWithoutFoodServiceListingInput[]
    deleteMany?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutFoodServiceListingNestedInput = {
    create?: XOR<ReviewCreateWithoutFoodServiceListingInput, ReviewUncheckedCreateWithoutFoodServiceListingInput> | ReviewCreateWithoutFoodServiceListingInput[] | ReviewUncheckedCreateWithoutFoodServiceListingInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutFoodServiceListingInput | ReviewCreateOrConnectWithoutFoodServiceListingInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutFoodServiceListingInput | ReviewUpsertWithWhereUniqueWithoutFoodServiceListingInput[]
    createMany?: ReviewCreateManyFoodServiceListingInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutFoodServiceListingInput | ReviewUpdateWithWhereUniqueWithoutFoodServiceListingInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutFoodServiceListingInput | ReviewUpdateManyWithWhereWithoutFoodServiceListingInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutInquiriesInput = {
    create?: XOR<UserCreateWithoutInquiriesInput, UserUncheckedCreateWithoutInquiriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInquiriesInput
    connect?: UserWhereUniqueInput
  }

  export type AccommodationListingCreateNestedOneWithoutInquiriesInput = {
    create?: XOR<AccommodationListingCreateWithoutInquiriesInput, AccommodationListingUncheckedCreateWithoutInquiriesInput>
    connectOrCreate?: AccommodationListingCreateOrConnectWithoutInquiriesInput
    connect?: AccommodationListingWhereUniqueInput
  }

  export type FoodServiceListingCreateNestedOneWithoutInquiriesInput = {
    create?: XOR<FoodServiceListingCreateWithoutInquiriesInput, FoodServiceListingUncheckedCreateWithoutInquiriesInput>
    connectOrCreate?: FoodServiceListingCreateOrConnectWithoutInquiriesInput
    connect?: FoodServiceListingWhereUniqueInput
  }

  export type EnumInquiryStatusFieldUpdateOperationsInput = {
    set?: $Enums.InquiryStatus
  }

  export type UserUpdateOneRequiredWithoutInquiriesNestedInput = {
    create?: XOR<UserCreateWithoutInquiriesInput, UserUncheckedCreateWithoutInquiriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInquiriesInput
    upsert?: UserUpsertWithoutInquiriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInquiriesInput, UserUpdateWithoutInquiriesInput>, UserUncheckedUpdateWithoutInquiriesInput>
  }

  export type AccommodationListingUpdateOneWithoutInquiriesNestedInput = {
    create?: XOR<AccommodationListingCreateWithoutInquiriesInput, AccommodationListingUncheckedCreateWithoutInquiriesInput>
    connectOrCreate?: AccommodationListingCreateOrConnectWithoutInquiriesInput
    upsert?: AccommodationListingUpsertWithoutInquiriesInput
    disconnect?: AccommodationListingWhereInput | boolean
    delete?: AccommodationListingWhereInput | boolean
    connect?: AccommodationListingWhereUniqueInput
    update?: XOR<XOR<AccommodationListingUpdateToOneWithWhereWithoutInquiriesInput, AccommodationListingUpdateWithoutInquiriesInput>, AccommodationListingUncheckedUpdateWithoutInquiriesInput>
  }

  export type FoodServiceListingUpdateOneWithoutInquiriesNestedInput = {
    create?: XOR<FoodServiceListingCreateWithoutInquiriesInput, FoodServiceListingUncheckedCreateWithoutInquiriesInput>
    connectOrCreate?: FoodServiceListingCreateOrConnectWithoutInquiriesInput
    upsert?: FoodServiceListingUpsertWithoutInquiriesInput
    disconnect?: FoodServiceListingWhereInput | boolean
    delete?: FoodServiceListingWhereInput | boolean
    connect?: FoodServiceListingWhereUniqueInput
    update?: XOR<XOR<FoodServiceListingUpdateToOneWithWhereWithoutInquiriesInput, FoodServiceListingUpdateWithoutInquiriesInput>, FoodServiceListingUncheckedUpdateWithoutInquiriesInput>
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type AccommodationListingCreateNestedOneWithoutReviewsInput = {
    create?: XOR<AccommodationListingCreateWithoutReviewsInput, AccommodationListingUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: AccommodationListingCreateOrConnectWithoutReviewsInput
    connect?: AccommodationListingWhereUniqueInput
  }

  export type FoodServiceListingCreateNestedOneWithoutReviewsInput = {
    create?: XOR<FoodServiceListingCreateWithoutReviewsInput, FoodServiceListingUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: FoodServiceListingCreateOrConnectWithoutReviewsInput
    connect?: FoodServiceListingWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsInput, UserUpdateWithoutReviewsInput>, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type AccommodationListingUpdateOneWithoutReviewsNestedInput = {
    create?: XOR<AccommodationListingCreateWithoutReviewsInput, AccommodationListingUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: AccommodationListingCreateOrConnectWithoutReviewsInput
    upsert?: AccommodationListingUpsertWithoutReviewsInput
    disconnect?: AccommodationListingWhereInput | boolean
    delete?: AccommodationListingWhereInput | boolean
    connect?: AccommodationListingWhereUniqueInput
    update?: XOR<XOR<AccommodationListingUpdateToOneWithWhereWithoutReviewsInput, AccommodationListingUpdateWithoutReviewsInput>, AccommodationListingUncheckedUpdateWithoutReviewsInput>
  }

  export type FoodServiceListingUpdateOneWithoutReviewsNestedInput = {
    create?: XOR<FoodServiceListingCreateWithoutReviewsInput, FoodServiceListingUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: FoodServiceListingCreateOrConnectWithoutReviewsInput
    upsert?: FoodServiceListingUpsertWithoutReviewsInput
    disconnect?: FoodServiceListingWhereInput | boolean
    delete?: FoodServiceListingWhereInput | boolean
    connect?: FoodServiceListingWhereUniqueInput
    update?: XOR<XOR<FoodServiceListingUpdateToOneWithWhereWithoutReviewsInput, FoodServiceListingUpdateWithoutReviewsInput>, FoodServiceListingUncheckedUpdateWithoutReviewsInput>
  }

  export type ChatMessageCreateNestedManyWithoutSessionInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ChatMessageUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutSessionInput | ChatMessageUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutSessionInput | ChatMessageUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutSessionInput | ChatMessageUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput> | ChatMessageCreateWithoutSessionInput[] | ChatMessageUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSessionInput | ChatMessageCreateOrConnectWithoutSessionInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutSessionInput | ChatMessageUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ChatMessageCreateManySessionInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutSessionInput | ChatMessageUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutSessionInput | ChatMessageUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ChatSessionCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatSessionCreateOrConnectWithoutMessagesInput
    connect?: ChatSessionWhereUniqueInput
  }

  export type EnumChatRoleFieldUpdateOperationsInput = {
    set?: $Enums.ChatRole
  }

  export type ChatSessionUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatSessionCreateOrConnectWithoutMessagesInput
    upsert?: ChatSessionUpsertWithoutMessagesInput
    connect?: ChatSessionWhereUniqueInput
    update?: XOR<XOR<ChatSessionUpdateToOneWithWhereWithoutMessagesInput, ChatSessionUpdateWithoutMessagesInput>, ChatSessionUncheckedUpdateWithoutMessagesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumStreamNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Stream | EnumStreamFieldRefInput<$PrismaModel> | null
    in?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStreamNullableFilter<$PrismaModel> | $Enums.Stream | null
  }

  export type NestedEnumServiceTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumServiceTypeNullableFilter<$PrismaModel> | $Enums.ServiceType | null
  }

  export type NestedEnumBusinessTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessType | EnumBusinessTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBusinessTypeNullableFilter<$PrismaModel> | $Enums.BusinessType | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumStreamNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Stream | EnumStreamFieldRefInput<$PrismaModel> | null
    in?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStreamNullableWithAggregatesFilter<$PrismaModel> | $Enums.Stream | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStreamNullableFilter<$PrismaModel>
    _max?: NestedEnumStreamNullableFilter<$PrismaModel>
  }

  export type NestedEnumServiceTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceType | EnumServiceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ServiceType[] | ListEnumServiceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumServiceTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.ServiceType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumServiceTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumServiceTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumBusinessTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessType | EnumBusinessTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBusinessTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BusinessType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBusinessTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumBusinessTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumStreamFilter<$PrismaModel = never> = {
    equals?: $Enums.Stream | EnumStreamFieldRefInput<$PrismaModel>
    in?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel>
    notIn?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel>
    not?: NestedEnumStreamFilter<$PrismaModel> | $Enums.Stream
  }

  export type NestedEnumStreamWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Stream | EnumStreamFieldRefInput<$PrismaModel>
    in?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel>
    notIn?: $Enums.Stream[] | ListEnumStreamFieldRefInput<$PrismaModel>
    not?: NestedEnumStreamWithAggregatesFilter<$PrismaModel> | $Enums.Stream
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStreamFilter<$PrismaModel>
    _max?: NestedEnumStreamFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRoomTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomType | EnumRoomTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomTypeFilter<$PrismaModel> | $Enums.RoomType
  }

  export type NestedEnumAccommodationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccommodationType | EnumAccommodationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccommodationType[] | ListEnumAccommodationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccommodationType[] | ListEnumAccommodationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccommodationTypeFilter<$PrismaModel> | $Enums.AccommodationType
  }

  export type NestedEnumFoodPreferenceFilter<$PrismaModel = never> = {
    equals?: $Enums.FoodPreference | EnumFoodPreferenceFieldRefInput<$PrismaModel>
    in?: $Enums.FoodPreference[] | ListEnumFoodPreferenceFieldRefInput<$PrismaModel>
    notIn?: $Enums.FoodPreference[] | ListEnumFoodPreferenceFieldRefInput<$PrismaModel>
    not?: NestedEnumFoodPreferenceFilter<$PrismaModel> | $Enums.FoodPreference
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoomTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomType | EnumRoomTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomTypeWithAggregatesFilter<$PrismaModel> | $Enums.RoomType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoomTypeFilter<$PrismaModel>
    _max?: NestedEnumRoomTypeFilter<$PrismaModel>
  }

  export type NestedEnumAccommodationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccommodationType | EnumAccommodationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccommodationType[] | ListEnumAccommodationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccommodationType[] | ListEnumAccommodationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccommodationTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccommodationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccommodationTypeFilter<$PrismaModel>
    _max?: NestedEnumAccommodationTypeFilter<$PrismaModel>
  }

  export type NestedEnumFoodPreferenceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FoodPreference | EnumFoodPreferenceFieldRefInput<$PrismaModel>
    in?: $Enums.FoodPreference[] | ListEnumFoodPreferenceFieldRefInput<$PrismaModel>
    notIn?: $Enums.FoodPreference[] | ListEnumFoodPreferenceFieldRefInput<$PrismaModel>
    not?: NestedEnumFoodPreferenceWithAggregatesFilter<$PrismaModel> | $Enums.FoodPreference
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFoodPreferenceFilter<$PrismaModel>
    _max?: NestedEnumFoodPreferenceFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumFoodServiceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FoodServiceType | EnumFoodServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FoodServiceType[] | ListEnumFoodServiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FoodServiceType[] | ListEnumFoodServiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFoodServiceTypeFilter<$PrismaModel> | $Enums.FoodServiceType
  }

  export type NestedEnumPriceRangeFilter<$PrismaModel = never> = {
    equals?: $Enums.PriceRange | EnumPriceRangeFieldRefInput<$PrismaModel>
    in?: $Enums.PriceRange[] | ListEnumPriceRangeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriceRange[] | ListEnumPriceRangeFieldRefInput<$PrismaModel>
    not?: NestedEnumPriceRangeFilter<$PrismaModel> | $Enums.PriceRange
  }

  export type NestedEnumFoodServiceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FoodServiceType | EnumFoodServiceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FoodServiceType[] | ListEnumFoodServiceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FoodServiceType[] | ListEnumFoodServiceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFoodServiceTypeWithAggregatesFilter<$PrismaModel> | $Enums.FoodServiceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFoodServiceTypeFilter<$PrismaModel>
    _max?: NestedEnumFoodServiceTypeFilter<$PrismaModel>
  }

  export type NestedEnumPriceRangeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PriceRange | EnumPriceRangeFieldRefInput<$PrismaModel>
    in?: $Enums.PriceRange[] | ListEnumPriceRangeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriceRange[] | ListEnumPriceRangeFieldRefInput<$PrismaModel>
    not?: NestedEnumPriceRangeWithAggregatesFilter<$PrismaModel> | $Enums.PriceRange
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriceRangeFilter<$PrismaModel>
    _max?: NestedEnumPriceRangeFilter<$PrismaModel>
  }

  export type NestedEnumInquiryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InquiryStatus | EnumInquiryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InquiryStatus[] | ListEnumInquiryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InquiryStatus[] | ListEnumInquiryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInquiryStatusFilter<$PrismaModel> | $Enums.InquiryStatus
  }

  export type NestedEnumInquiryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InquiryStatus | EnumInquiryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InquiryStatus[] | ListEnumInquiryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InquiryStatus[] | ListEnumInquiryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInquiryStatusWithAggregatesFilter<$PrismaModel> | $Enums.InquiryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInquiryStatusFilter<$PrismaModel>
    _max?: NestedEnumInquiryStatusFilter<$PrismaModel>
  }

  export type NestedEnumChatRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ChatRole | EnumChatRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChatRole[] | ListEnumChatRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChatRole[] | ListEnumChatRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChatRoleFilter<$PrismaModel> | $Enums.ChatRole
  }

  export type NestedEnumChatRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChatRole | EnumChatRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChatRole[] | ListEnumChatRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChatRole[] | ListEnumChatRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChatRoleWithAggregatesFilter<$PrismaModel> | $Enums.ChatRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChatRoleFilter<$PrismaModel>
    _max?: NestedEnumChatRoleFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AccommodationListingCreateWithoutOwnerInput = {
    id?: string
    propertyName: string
    photos?: AccommodationListingCreatephotosInput | string[]
    dailyRate: number
    monthlyRent?: number
    minStay?: number
    deposit?: number | null
    availability?: boolean
    amenities?: AccommodationListingCreateamenitiesInput | string[]
    roomType: $Enums.RoomType
    accommodationType: $Enums.AccommodationType
    livingPreferences?: AccommodationListingCreatelivingPreferencesInput | string[]
    foodPreference: $Enums.FoodPreference
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    nearbyUniversities?: AccommodationListingCreatenearbyUniversitiesInput | string[]
    distanceFromUni?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inquiries?: InquiryCreateNestedManyWithoutAccommodationListingInput
    reviews?: ReviewCreateNestedManyWithoutAccommodationListingInput
  }

  export type AccommodationListingUncheckedCreateWithoutOwnerInput = {
    id?: string
    propertyName: string
    photos?: AccommodationListingCreatephotosInput | string[]
    dailyRate: number
    monthlyRent?: number
    minStay?: number
    deposit?: number | null
    availability?: boolean
    amenities?: AccommodationListingCreateamenitiesInput | string[]
    roomType: $Enums.RoomType
    accommodationType: $Enums.AccommodationType
    livingPreferences?: AccommodationListingCreatelivingPreferencesInput | string[]
    foodPreference: $Enums.FoodPreference
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    nearbyUniversities?: AccommodationListingCreatenearbyUniversitiesInput | string[]
    distanceFromUni?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inquiries?: InquiryUncheckedCreateNestedManyWithoutAccommodationListingInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutAccommodationListingInput
  }

  export type AccommodationListingCreateOrConnectWithoutOwnerInput = {
    where: AccommodationListingWhereUniqueInput
    create: XOR<AccommodationListingCreateWithoutOwnerInput, AccommodationListingUncheckedCreateWithoutOwnerInput>
  }

  export type AccommodationListingCreateManyOwnerInputEnvelope = {
    data: AccommodationListingCreateManyOwnerInput | AccommodationListingCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type FoodServiceListingCreateWithoutOwnerInput = {
    id?: string
    serviceName: string
    photos?: FoodServiceListingCreatephotosInput | string[]
    serviceType: $Enums.FoodServiceType
    priceRange: $Enums.PriceRange
    menuDetails?: string | null
    cuisineType?: FoodServiceListingCreatecuisineTypeInput | string[]
    vegOptions: boolean
    nonVegOptions: boolean
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    operatingHours?: string | null
    deliveryAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    inquiries?: InquiryCreateNestedManyWithoutFoodServiceListingInput
    reviews?: ReviewCreateNestedManyWithoutFoodServiceListingInput
  }

  export type FoodServiceListingUncheckedCreateWithoutOwnerInput = {
    id?: string
    serviceName: string
    photos?: FoodServiceListingCreatephotosInput | string[]
    serviceType: $Enums.FoodServiceType
    priceRange: $Enums.PriceRange
    menuDetails?: string | null
    cuisineType?: FoodServiceListingCreatecuisineTypeInput | string[]
    vegOptions: boolean
    nonVegOptions: boolean
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    operatingHours?: string | null
    deliveryAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    inquiries?: InquiryUncheckedCreateNestedManyWithoutFoodServiceListingInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutFoodServiceListingInput
  }

  export type FoodServiceListingCreateOrConnectWithoutOwnerInput = {
    where: FoodServiceListingWhereUniqueInput
    create: XOR<FoodServiceListingCreateWithoutOwnerInput, FoodServiceListingUncheckedCreateWithoutOwnerInput>
  }

  export type FoodServiceListingCreateManyOwnerInputEnvelope = {
    data: FoodServiceListingCreateManyOwnerInput | FoodServiceListingCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type InquiryCreateWithoutStudentInput = {
    id?: string
    message: string
    studentName: string
    studentEmail: string
    studentPhone: string
    status?: $Enums.InquiryStatus
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accommodationListing?: AccommodationListingCreateNestedOneWithoutInquiriesInput
    foodServiceListing?: FoodServiceListingCreateNestedOneWithoutInquiriesInput
  }

  export type InquiryUncheckedCreateWithoutStudentInput = {
    id?: string
    message: string
    studentName: string
    studentEmail: string
    studentPhone: string
    status?: $Enums.InquiryStatus
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accommodationListingId?: string | null
    foodServiceListingId?: string | null
  }

  export type InquiryCreateOrConnectWithoutStudentInput = {
    where: InquiryWhereUniqueInput
    create: XOR<InquiryCreateWithoutStudentInput, InquiryUncheckedCreateWithoutStudentInput>
  }

  export type InquiryCreateManyStudentInputEnvelope = {
    data: InquiryCreateManyStudentInput | InquiryCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutUserInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accommodationListing?: AccommodationListingCreateNestedOneWithoutReviewsInput
    foodServiceListing?: FoodServiceListingCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accommodationListingId?: string | null
    foodServiceListingId?: string | null
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: ReviewCreateManyUserInput | ReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccommodationListingUpsertWithWhereUniqueWithoutOwnerInput = {
    where: AccommodationListingWhereUniqueInput
    update: XOR<AccommodationListingUpdateWithoutOwnerInput, AccommodationListingUncheckedUpdateWithoutOwnerInput>
    create: XOR<AccommodationListingCreateWithoutOwnerInput, AccommodationListingUncheckedCreateWithoutOwnerInput>
  }

  export type AccommodationListingUpdateWithWhereUniqueWithoutOwnerInput = {
    where: AccommodationListingWhereUniqueInput
    data: XOR<AccommodationListingUpdateWithoutOwnerInput, AccommodationListingUncheckedUpdateWithoutOwnerInput>
  }

  export type AccommodationListingUpdateManyWithWhereWithoutOwnerInput = {
    where: AccommodationListingScalarWhereInput
    data: XOR<AccommodationListingUpdateManyMutationInput, AccommodationListingUncheckedUpdateManyWithoutOwnerInput>
  }

  export type AccommodationListingScalarWhereInput = {
    AND?: AccommodationListingScalarWhereInput | AccommodationListingScalarWhereInput[]
    OR?: AccommodationListingScalarWhereInput[]
    NOT?: AccommodationListingScalarWhereInput | AccommodationListingScalarWhereInput[]
    id?: StringFilter<"AccommodationListing"> | string
    propertyName?: StringFilter<"AccommodationListing"> | string
    photos?: StringNullableListFilter<"AccommodationListing">
    dailyRate?: IntFilter<"AccommodationListing"> | number
    monthlyRent?: IntFilter<"AccommodationListing"> | number
    minStay?: IntFilter<"AccommodationListing"> | number
    deposit?: IntNullableFilter<"AccommodationListing"> | number | null
    availability?: BoolFilter<"AccommodationListing"> | boolean
    amenities?: StringNullableListFilter<"AccommodationListing">
    roomType?: EnumRoomTypeFilter<"AccommodationListing"> | $Enums.RoomType
    accommodationType?: EnumAccommodationTypeFilter<"AccommodationListing"> | $Enums.AccommodationType
    livingPreferences?: StringNullableListFilter<"AccommodationListing">
    foodPreference?: EnumFoodPreferenceFilter<"AccommodationListing"> | $Enums.FoodPreference
    address?: StringFilter<"AccommodationListing"> | string
    latitude?: FloatNullableFilter<"AccommodationListing"> | number | null
    longitude?: FloatNullableFilter<"AccommodationListing"> | number | null
    contactInfo?: StringFilter<"AccommodationListing"> | string
    description?: StringNullableFilter<"AccommodationListing"> | string | null
    nearbyUniversities?: StringNullableListFilter<"AccommodationListing">
    distanceFromUni?: FloatNullableFilter<"AccommodationListing"> | number | null
    createdAt?: DateTimeFilter<"AccommodationListing"> | Date | string
    updatedAt?: DateTimeFilter<"AccommodationListing"> | Date | string
    ownerId?: StringFilter<"AccommodationListing"> | string
  }

  export type FoodServiceListingUpsertWithWhereUniqueWithoutOwnerInput = {
    where: FoodServiceListingWhereUniqueInput
    update: XOR<FoodServiceListingUpdateWithoutOwnerInput, FoodServiceListingUncheckedUpdateWithoutOwnerInput>
    create: XOR<FoodServiceListingCreateWithoutOwnerInput, FoodServiceListingUncheckedCreateWithoutOwnerInput>
  }

  export type FoodServiceListingUpdateWithWhereUniqueWithoutOwnerInput = {
    where: FoodServiceListingWhereUniqueInput
    data: XOR<FoodServiceListingUpdateWithoutOwnerInput, FoodServiceListingUncheckedUpdateWithoutOwnerInput>
  }

  export type FoodServiceListingUpdateManyWithWhereWithoutOwnerInput = {
    where: FoodServiceListingScalarWhereInput
    data: XOR<FoodServiceListingUpdateManyMutationInput, FoodServiceListingUncheckedUpdateManyWithoutOwnerInput>
  }

  export type FoodServiceListingScalarWhereInput = {
    AND?: FoodServiceListingScalarWhereInput | FoodServiceListingScalarWhereInput[]
    OR?: FoodServiceListingScalarWhereInput[]
    NOT?: FoodServiceListingScalarWhereInput | FoodServiceListingScalarWhereInput[]
    id?: StringFilter<"FoodServiceListing"> | string
    serviceName?: StringFilter<"FoodServiceListing"> | string
    photos?: StringNullableListFilter<"FoodServiceListing">
    serviceType?: EnumFoodServiceTypeFilter<"FoodServiceListing"> | $Enums.FoodServiceType
    priceRange?: EnumPriceRangeFilter<"FoodServiceListing"> | $Enums.PriceRange
    menuDetails?: StringNullableFilter<"FoodServiceListing"> | string | null
    cuisineType?: StringNullableListFilter<"FoodServiceListing">
    vegOptions?: BoolFilter<"FoodServiceListing"> | boolean
    nonVegOptions?: BoolFilter<"FoodServiceListing"> | boolean
    address?: StringFilter<"FoodServiceListing"> | string
    latitude?: FloatNullableFilter<"FoodServiceListing"> | number | null
    longitude?: FloatNullableFilter<"FoodServiceListing"> | number | null
    contactInfo?: StringFilter<"FoodServiceListing"> | string
    description?: StringNullableFilter<"FoodServiceListing"> | string | null
    operatingHours?: StringNullableFilter<"FoodServiceListing"> | string | null
    deliveryAvailable?: BoolFilter<"FoodServiceListing"> | boolean
    createdAt?: DateTimeFilter<"FoodServiceListing"> | Date | string
    updatedAt?: DateTimeFilter<"FoodServiceListing"> | Date | string
    ownerId?: StringFilter<"FoodServiceListing"> | string
  }

  export type InquiryUpsertWithWhereUniqueWithoutStudentInput = {
    where: InquiryWhereUniqueInput
    update: XOR<InquiryUpdateWithoutStudentInput, InquiryUncheckedUpdateWithoutStudentInput>
    create: XOR<InquiryCreateWithoutStudentInput, InquiryUncheckedCreateWithoutStudentInput>
  }

  export type InquiryUpdateWithWhereUniqueWithoutStudentInput = {
    where: InquiryWhereUniqueInput
    data: XOR<InquiryUpdateWithoutStudentInput, InquiryUncheckedUpdateWithoutStudentInput>
  }

  export type InquiryUpdateManyWithWhereWithoutStudentInput = {
    where: InquiryScalarWhereInput
    data: XOR<InquiryUpdateManyMutationInput, InquiryUncheckedUpdateManyWithoutStudentInput>
  }

  export type InquiryScalarWhereInput = {
    AND?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
    OR?: InquiryScalarWhereInput[]
    NOT?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
    id?: StringFilter<"Inquiry"> | string
    message?: StringFilter<"Inquiry"> | string
    studentName?: StringFilter<"Inquiry"> | string
    studentEmail?: StringFilter<"Inquiry"> | string
    studentPhone?: StringFilter<"Inquiry"> | string
    status?: EnumInquiryStatusFilter<"Inquiry"> | $Enums.InquiryStatus
    response?: StringNullableFilter<"Inquiry"> | string | null
    createdAt?: DateTimeFilter<"Inquiry"> | Date | string
    updatedAt?: DateTimeFilter<"Inquiry"> | Date | string
    studentId?: StringFilter<"Inquiry"> | string
    accommodationListingId?: StringNullableFilter<"Inquiry"> | string | null
    foodServiceListingId?: StringNullableFilter<"Inquiry"> | string | null
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    comment?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    userId?: StringFilter<"Review"> | string
    accommodationListingId?: StringNullableFilter<"Review"> | string | null
    foodServiceListingId?: StringNullableFilter<"Review"> | string | null
  }

  export type UserCreateWithoutAccommodationListingsInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: string
    userType: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    university?: string | null
    stream?: $Enums.Stream | null
    serviceType?: $Enums.ServiceType | null
    businessType?: $Enums.BusinessType | null
    foodServiceListings?: FoodServiceListingCreateNestedManyWithoutOwnerInput
    inquiries?: InquiryCreateNestedManyWithoutStudentInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccommodationListingsInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: string
    userType: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    university?: string | null
    stream?: $Enums.Stream | null
    serviceType?: $Enums.ServiceType | null
    businessType?: $Enums.BusinessType | null
    foodServiceListings?: FoodServiceListingUncheckedCreateNestedManyWithoutOwnerInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutStudentInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccommodationListingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccommodationListingsInput, UserUncheckedCreateWithoutAccommodationListingsInput>
  }

  export type InquiryCreateWithoutAccommodationListingInput = {
    id?: string
    message: string
    studentName: string
    studentEmail: string
    studentPhone: string
    status?: $Enums.InquiryStatus
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutInquiriesInput
    foodServiceListing?: FoodServiceListingCreateNestedOneWithoutInquiriesInput
  }

  export type InquiryUncheckedCreateWithoutAccommodationListingInput = {
    id?: string
    message: string
    studentName: string
    studentEmail: string
    studentPhone: string
    status?: $Enums.InquiryStatus
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    studentId: string
    foodServiceListingId?: string | null
  }

  export type InquiryCreateOrConnectWithoutAccommodationListingInput = {
    where: InquiryWhereUniqueInput
    create: XOR<InquiryCreateWithoutAccommodationListingInput, InquiryUncheckedCreateWithoutAccommodationListingInput>
  }

  export type InquiryCreateManyAccommodationListingInputEnvelope = {
    data: InquiryCreateManyAccommodationListingInput | InquiryCreateManyAccommodationListingInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutAccommodationListingInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
    foodServiceListing?: FoodServiceListingCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutAccommodationListingInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    foodServiceListingId?: string | null
  }

  export type ReviewCreateOrConnectWithoutAccommodationListingInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutAccommodationListingInput, ReviewUncheckedCreateWithoutAccommodationListingInput>
  }

  export type ReviewCreateManyAccommodationListingInputEnvelope = {
    data: ReviewCreateManyAccommodationListingInput | ReviewCreateManyAccommodationListingInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAccommodationListingsInput = {
    update: XOR<UserUpdateWithoutAccommodationListingsInput, UserUncheckedUpdateWithoutAccommodationListingsInput>
    create: XOR<UserCreateWithoutAccommodationListingsInput, UserUncheckedCreateWithoutAccommodationListingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccommodationListingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccommodationListingsInput, UserUncheckedUpdateWithoutAccommodationListingsInput>
  }

  export type UserUpdateWithoutAccommodationListingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    university?: NullableStringFieldUpdateOperationsInput | string | null
    stream?: NullableEnumStreamFieldUpdateOperationsInput | $Enums.Stream | null
    serviceType?: NullableEnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType | null
    businessType?: NullableEnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType | null
    foodServiceListings?: FoodServiceListingUpdateManyWithoutOwnerNestedInput
    inquiries?: InquiryUpdateManyWithoutStudentNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccommodationListingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    university?: NullableStringFieldUpdateOperationsInput | string | null
    stream?: NullableEnumStreamFieldUpdateOperationsInput | $Enums.Stream | null
    serviceType?: NullableEnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType | null
    businessType?: NullableEnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType | null
    foodServiceListings?: FoodServiceListingUncheckedUpdateManyWithoutOwnerNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutStudentNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InquiryUpsertWithWhereUniqueWithoutAccommodationListingInput = {
    where: InquiryWhereUniqueInput
    update: XOR<InquiryUpdateWithoutAccommodationListingInput, InquiryUncheckedUpdateWithoutAccommodationListingInput>
    create: XOR<InquiryCreateWithoutAccommodationListingInput, InquiryUncheckedCreateWithoutAccommodationListingInput>
  }

  export type InquiryUpdateWithWhereUniqueWithoutAccommodationListingInput = {
    where: InquiryWhereUniqueInput
    data: XOR<InquiryUpdateWithoutAccommodationListingInput, InquiryUncheckedUpdateWithoutAccommodationListingInput>
  }

  export type InquiryUpdateManyWithWhereWithoutAccommodationListingInput = {
    where: InquiryScalarWhereInput
    data: XOR<InquiryUpdateManyMutationInput, InquiryUncheckedUpdateManyWithoutAccommodationListingInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutAccommodationListingInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutAccommodationListingInput, ReviewUncheckedUpdateWithoutAccommodationListingInput>
    create: XOR<ReviewCreateWithoutAccommodationListingInput, ReviewUncheckedCreateWithoutAccommodationListingInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutAccommodationListingInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutAccommodationListingInput, ReviewUncheckedUpdateWithoutAccommodationListingInput>
  }

  export type ReviewUpdateManyWithWhereWithoutAccommodationListingInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutAccommodationListingInput>
  }

  export type UserCreateWithoutFoodServiceListingsInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: string
    userType: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    university?: string | null
    stream?: $Enums.Stream | null
    serviceType?: $Enums.ServiceType | null
    businessType?: $Enums.BusinessType | null
    accommodationListings?: AccommodationListingCreateNestedManyWithoutOwnerInput
    inquiries?: InquiryCreateNestedManyWithoutStudentInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFoodServiceListingsInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: string
    userType: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    university?: string | null
    stream?: $Enums.Stream | null
    serviceType?: $Enums.ServiceType | null
    businessType?: $Enums.BusinessType | null
    accommodationListings?: AccommodationListingUncheckedCreateNestedManyWithoutOwnerInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutStudentInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFoodServiceListingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFoodServiceListingsInput, UserUncheckedCreateWithoutFoodServiceListingsInput>
  }

  export type InquiryCreateWithoutFoodServiceListingInput = {
    id?: string
    message: string
    studentName: string
    studentEmail: string
    studentPhone: string
    status?: $Enums.InquiryStatus
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutInquiriesInput
    accommodationListing?: AccommodationListingCreateNestedOneWithoutInquiriesInput
  }

  export type InquiryUncheckedCreateWithoutFoodServiceListingInput = {
    id?: string
    message: string
    studentName: string
    studentEmail: string
    studentPhone: string
    status?: $Enums.InquiryStatus
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    studentId: string
    accommodationListingId?: string | null
  }

  export type InquiryCreateOrConnectWithoutFoodServiceListingInput = {
    where: InquiryWhereUniqueInput
    create: XOR<InquiryCreateWithoutFoodServiceListingInput, InquiryUncheckedCreateWithoutFoodServiceListingInput>
  }

  export type InquiryCreateManyFoodServiceListingInputEnvelope = {
    data: InquiryCreateManyFoodServiceListingInput | InquiryCreateManyFoodServiceListingInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutFoodServiceListingInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
    accommodationListing?: AccommodationListingCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutFoodServiceListingInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    accommodationListingId?: string | null
  }

  export type ReviewCreateOrConnectWithoutFoodServiceListingInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutFoodServiceListingInput, ReviewUncheckedCreateWithoutFoodServiceListingInput>
  }

  export type ReviewCreateManyFoodServiceListingInputEnvelope = {
    data: ReviewCreateManyFoodServiceListingInput | ReviewCreateManyFoodServiceListingInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutFoodServiceListingsInput = {
    update: XOR<UserUpdateWithoutFoodServiceListingsInput, UserUncheckedUpdateWithoutFoodServiceListingsInput>
    create: XOR<UserCreateWithoutFoodServiceListingsInput, UserUncheckedCreateWithoutFoodServiceListingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFoodServiceListingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFoodServiceListingsInput, UserUncheckedUpdateWithoutFoodServiceListingsInput>
  }

  export type UserUpdateWithoutFoodServiceListingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    university?: NullableStringFieldUpdateOperationsInput | string | null
    stream?: NullableEnumStreamFieldUpdateOperationsInput | $Enums.Stream | null
    serviceType?: NullableEnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType | null
    businessType?: NullableEnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType | null
    accommodationListings?: AccommodationListingUpdateManyWithoutOwnerNestedInput
    inquiries?: InquiryUpdateManyWithoutStudentNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFoodServiceListingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    university?: NullableStringFieldUpdateOperationsInput | string | null
    stream?: NullableEnumStreamFieldUpdateOperationsInput | $Enums.Stream | null
    serviceType?: NullableEnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType | null
    businessType?: NullableEnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType | null
    accommodationListings?: AccommodationListingUncheckedUpdateManyWithoutOwnerNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutStudentNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InquiryUpsertWithWhereUniqueWithoutFoodServiceListingInput = {
    where: InquiryWhereUniqueInput
    update: XOR<InquiryUpdateWithoutFoodServiceListingInput, InquiryUncheckedUpdateWithoutFoodServiceListingInput>
    create: XOR<InquiryCreateWithoutFoodServiceListingInput, InquiryUncheckedCreateWithoutFoodServiceListingInput>
  }

  export type InquiryUpdateWithWhereUniqueWithoutFoodServiceListingInput = {
    where: InquiryWhereUniqueInput
    data: XOR<InquiryUpdateWithoutFoodServiceListingInput, InquiryUncheckedUpdateWithoutFoodServiceListingInput>
  }

  export type InquiryUpdateManyWithWhereWithoutFoodServiceListingInput = {
    where: InquiryScalarWhereInput
    data: XOR<InquiryUpdateManyMutationInput, InquiryUncheckedUpdateManyWithoutFoodServiceListingInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutFoodServiceListingInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutFoodServiceListingInput, ReviewUncheckedUpdateWithoutFoodServiceListingInput>
    create: XOR<ReviewCreateWithoutFoodServiceListingInput, ReviewUncheckedCreateWithoutFoodServiceListingInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutFoodServiceListingInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutFoodServiceListingInput, ReviewUncheckedUpdateWithoutFoodServiceListingInput>
  }

  export type ReviewUpdateManyWithWhereWithoutFoodServiceListingInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutFoodServiceListingInput>
  }

  export type UserCreateWithoutInquiriesInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: string
    userType: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    university?: string | null
    stream?: $Enums.Stream | null
    serviceType?: $Enums.ServiceType | null
    businessType?: $Enums.BusinessType | null
    accommodationListings?: AccommodationListingCreateNestedManyWithoutOwnerInput
    foodServiceListings?: FoodServiceListingCreateNestedManyWithoutOwnerInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInquiriesInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: string
    userType: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    university?: string | null
    stream?: $Enums.Stream | null
    serviceType?: $Enums.ServiceType | null
    businessType?: $Enums.BusinessType | null
    accommodationListings?: AccommodationListingUncheckedCreateNestedManyWithoutOwnerInput
    foodServiceListings?: FoodServiceListingUncheckedCreateNestedManyWithoutOwnerInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInquiriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInquiriesInput, UserUncheckedCreateWithoutInquiriesInput>
  }

  export type AccommodationListingCreateWithoutInquiriesInput = {
    id?: string
    propertyName: string
    photos?: AccommodationListingCreatephotosInput | string[]
    dailyRate: number
    monthlyRent?: number
    minStay?: number
    deposit?: number | null
    availability?: boolean
    amenities?: AccommodationListingCreateamenitiesInput | string[]
    roomType: $Enums.RoomType
    accommodationType: $Enums.AccommodationType
    livingPreferences?: AccommodationListingCreatelivingPreferencesInput | string[]
    foodPreference: $Enums.FoodPreference
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    nearbyUniversities?: AccommodationListingCreatenearbyUniversitiesInput | string[]
    distanceFromUni?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutAccommodationListingsInput
    reviews?: ReviewCreateNestedManyWithoutAccommodationListingInput
  }

  export type AccommodationListingUncheckedCreateWithoutInquiriesInput = {
    id?: string
    propertyName: string
    photos?: AccommodationListingCreatephotosInput | string[]
    dailyRate: number
    monthlyRent?: number
    minStay?: number
    deposit?: number | null
    availability?: boolean
    amenities?: AccommodationListingCreateamenitiesInput | string[]
    roomType: $Enums.RoomType
    accommodationType: $Enums.AccommodationType
    livingPreferences?: AccommodationListingCreatelivingPreferencesInput | string[]
    foodPreference: $Enums.FoodPreference
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    nearbyUniversities?: AccommodationListingCreatenearbyUniversitiesInput | string[]
    distanceFromUni?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    reviews?: ReviewUncheckedCreateNestedManyWithoutAccommodationListingInput
  }

  export type AccommodationListingCreateOrConnectWithoutInquiriesInput = {
    where: AccommodationListingWhereUniqueInput
    create: XOR<AccommodationListingCreateWithoutInquiriesInput, AccommodationListingUncheckedCreateWithoutInquiriesInput>
  }

  export type FoodServiceListingCreateWithoutInquiriesInput = {
    id?: string
    serviceName: string
    photos?: FoodServiceListingCreatephotosInput | string[]
    serviceType: $Enums.FoodServiceType
    priceRange: $Enums.PriceRange
    menuDetails?: string | null
    cuisineType?: FoodServiceListingCreatecuisineTypeInput | string[]
    vegOptions: boolean
    nonVegOptions: boolean
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    operatingHours?: string | null
    deliveryAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutFoodServiceListingsInput
    reviews?: ReviewCreateNestedManyWithoutFoodServiceListingInput
  }

  export type FoodServiceListingUncheckedCreateWithoutInquiriesInput = {
    id?: string
    serviceName: string
    photos?: FoodServiceListingCreatephotosInput | string[]
    serviceType: $Enums.FoodServiceType
    priceRange: $Enums.PriceRange
    menuDetails?: string | null
    cuisineType?: FoodServiceListingCreatecuisineTypeInput | string[]
    vegOptions: boolean
    nonVegOptions: boolean
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    operatingHours?: string | null
    deliveryAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    reviews?: ReviewUncheckedCreateNestedManyWithoutFoodServiceListingInput
  }

  export type FoodServiceListingCreateOrConnectWithoutInquiriesInput = {
    where: FoodServiceListingWhereUniqueInput
    create: XOR<FoodServiceListingCreateWithoutInquiriesInput, FoodServiceListingUncheckedCreateWithoutInquiriesInput>
  }

  export type UserUpsertWithoutInquiriesInput = {
    update: XOR<UserUpdateWithoutInquiriesInput, UserUncheckedUpdateWithoutInquiriesInput>
    create: XOR<UserCreateWithoutInquiriesInput, UserUncheckedCreateWithoutInquiriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInquiriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInquiriesInput, UserUncheckedUpdateWithoutInquiriesInput>
  }

  export type UserUpdateWithoutInquiriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    university?: NullableStringFieldUpdateOperationsInput | string | null
    stream?: NullableEnumStreamFieldUpdateOperationsInput | $Enums.Stream | null
    serviceType?: NullableEnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType | null
    businessType?: NullableEnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType | null
    accommodationListings?: AccommodationListingUpdateManyWithoutOwnerNestedInput
    foodServiceListings?: FoodServiceListingUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInquiriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    university?: NullableStringFieldUpdateOperationsInput | string | null
    stream?: NullableEnumStreamFieldUpdateOperationsInput | $Enums.Stream | null
    serviceType?: NullableEnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType | null
    businessType?: NullableEnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType | null
    accommodationListings?: AccommodationListingUncheckedUpdateManyWithoutOwnerNestedInput
    foodServiceListings?: FoodServiceListingUncheckedUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccommodationListingUpsertWithoutInquiriesInput = {
    update: XOR<AccommodationListingUpdateWithoutInquiriesInput, AccommodationListingUncheckedUpdateWithoutInquiriesInput>
    create: XOR<AccommodationListingCreateWithoutInquiriesInput, AccommodationListingUncheckedCreateWithoutInquiriesInput>
    where?: AccommodationListingWhereInput
  }

  export type AccommodationListingUpdateToOneWithWhereWithoutInquiriesInput = {
    where?: AccommodationListingWhereInput
    data: XOR<AccommodationListingUpdateWithoutInquiriesInput, AccommodationListingUncheckedUpdateWithoutInquiriesInput>
  }

  export type AccommodationListingUpdateWithoutInquiriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    propertyName?: StringFieldUpdateOperationsInput | string
    photos?: AccommodationListingUpdatephotosInput | string[]
    dailyRate?: IntFieldUpdateOperationsInput | number
    monthlyRent?: IntFieldUpdateOperationsInput | number
    minStay?: IntFieldUpdateOperationsInput | number
    deposit?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: AccommodationListingUpdateamenitiesInput | string[]
    roomType?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    accommodationType?: EnumAccommodationTypeFieldUpdateOperationsInput | $Enums.AccommodationType
    livingPreferences?: AccommodationListingUpdatelivingPreferencesInput | string[]
    foodPreference?: EnumFoodPreferenceFieldUpdateOperationsInput | $Enums.FoodPreference
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyUniversities?: AccommodationListingUpdatenearbyUniversitiesInput | string[]
    distanceFromUni?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutAccommodationListingsNestedInput
    reviews?: ReviewUpdateManyWithoutAccommodationListingNestedInput
  }

  export type AccommodationListingUncheckedUpdateWithoutInquiriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    propertyName?: StringFieldUpdateOperationsInput | string
    photos?: AccommodationListingUpdatephotosInput | string[]
    dailyRate?: IntFieldUpdateOperationsInput | number
    monthlyRent?: IntFieldUpdateOperationsInput | number
    minStay?: IntFieldUpdateOperationsInput | number
    deposit?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: AccommodationListingUpdateamenitiesInput | string[]
    roomType?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    accommodationType?: EnumAccommodationTypeFieldUpdateOperationsInput | $Enums.AccommodationType
    livingPreferences?: AccommodationListingUpdatelivingPreferencesInput | string[]
    foodPreference?: EnumFoodPreferenceFieldUpdateOperationsInput | $Enums.FoodPreference
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyUniversities?: AccommodationListingUpdatenearbyUniversitiesInput | string[]
    distanceFromUni?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    reviews?: ReviewUncheckedUpdateManyWithoutAccommodationListingNestedInput
  }

  export type FoodServiceListingUpsertWithoutInquiriesInput = {
    update: XOR<FoodServiceListingUpdateWithoutInquiriesInput, FoodServiceListingUncheckedUpdateWithoutInquiriesInput>
    create: XOR<FoodServiceListingCreateWithoutInquiriesInput, FoodServiceListingUncheckedCreateWithoutInquiriesInput>
    where?: FoodServiceListingWhereInput
  }

  export type FoodServiceListingUpdateToOneWithWhereWithoutInquiriesInput = {
    where?: FoodServiceListingWhereInput
    data: XOR<FoodServiceListingUpdateWithoutInquiriesInput, FoodServiceListingUncheckedUpdateWithoutInquiriesInput>
  }

  export type FoodServiceListingUpdateWithoutInquiriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    photos?: FoodServiceListingUpdatephotosInput | string[]
    serviceType?: EnumFoodServiceTypeFieldUpdateOperationsInput | $Enums.FoodServiceType
    priceRange?: EnumPriceRangeFieldUpdateOperationsInput | $Enums.PriceRange
    menuDetails?: NullableStringFieldUpdateOperationsInput | string | null
    cuisineType?: FoodServiceListingUpdatecuisineTypeInput | string[]
    vegOptions?: BoolFieldUpdateOperationsInput | boolean
    nonVegOptions?: BoolFieldUpdateOperationsInput | boolean
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutFoodServiceListingsNestedInput
    reviews?: ReviewUpdateManyWithoutFoodServiceListingNestedInput
  }

  export type FoodServiceListingUncheckedUpdateWithoutInquiriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    photos?: FoodServiceListingUpdatephotosInput | string[]
    serviceType?: EnumFoodServiceTypeFieldUpdateOperationsInput | $Enums.FoodServiceType
    priceRange?: EnumPriceRangeFieldUpdateOperationsInput | $Enums.PriceRange
    menuDetails?: NullableStringFieldUpdateOperationsInput | string | null
    cuisineType?: FoodServiceListingUpdatecuisineTypeInput | string[]
    vegOptions?: BoolFieldUpdateOperationsInput | boolean
    nonVegOptions?: BoolFieldUpdateOperationsInput | boolean
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    reviews?: ReviewUncheckedUpdateManyWithoutFoodServiceListingNestedInput
  }

  export type UserCreateWithoutReviewsInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: string
    userType: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    university?: string | null
    stream?: $Enums.Stream | null
    serviceType?: $Enums.ServiceType | null
    businessType?: $Enums.BusinessType | null
    accommodationListings?: AccommodationListingCreateNestedManyWithoutOwnerInput
    foodServiceListings?: FoodServiceListingCreateNestedManyWithoutOwnerInput
    inquiries?: InquiryCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    id?: string
    name: string
    email: string
    password: string
    phone: string
    userType: $Enums.UserType
    createdAt?: Date | string
    updatedAt?: Date | string
    university?: string | null
    stream?: $Enums.Stream | null
    serviceType?: $Enums.ServiceType | null
    businessType?: $Enums.BusinessType | null
    accommodationListings?: AccommodationListingUncheckedCreateNestedManyWithoutOwnerInput
    foodServiceListings?: FoodServiceListingUncheckedCreateNestedManyWithoutOwnerInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type AccommodationListingCreateWithoutReviewsInput = {
    id?: string
    propertyName: string
    photos?: AccommodationListingCreatephotosInput | string[]
    dailyRate: number
    monthlyRent?: number
    minStay?: number
    deposit?: number | null
    availability?: boolean
    amenities?: AccommodationListingCreateamenitiesInput | string[]
    roomType: $Enums.RoomType
    accommodationType: $Enums.AccommodationType
    livingPreferences?: AccommodationListingCreatelivingPreferencesInput | string[]
    foodPreference: $Enums.FoodPreference
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    nearbyUniversities?: AccommodationListingCreatenearbyUniversitiesInput | string[]
    distanceFromUni?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutAccommodationListingsInput
    inquiries?: InquiryCreateNestedManyWithoutAccommodationListingInput
  }

  export type AccommodationListingUncheckedCreateWithoutReviewsInput = {
    id?: string
    propertyName: string
    photos?: AccommodationListingCreatephotosInput | string[]
    dailyRate: number
    monthlyRent?: number
    minStay?: number
    deposit?: number | null
    availability?: boolean
    amenities?: AccommodationListingCreateamenitiesInput | string[]
    roomType: $Enums.RoomType
    accommodationType: $Enums.AccommodationType
    livingPreferences?: AccommodationListingCreatelivingPreferencesInput | string[]
    foodPreference: $Enums.FoodPreference
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    nearbyUniversities?: AccommodationListingCreatenearbyUniversitiesInput | string[]
    distanceFromUni?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    inquiries?: InquiryUncheckedCreateNestedManyWithoutAccommodationListingInput
  }

  export type AccommodationListingCreateOrConnectWithoutReviewsInput = {
    where: AccommodationListingWhereUniqueInput
    create: XOR<AccommodationListingCreateWithoutReviewsInput, AccommodationListingUncheckedCreateWithoutReviewsInput>
  }

  export type FoodServiceListingCreateWithoutReviewsInput = {
    id?: string
    serviceName: string
    photos?: FoodServiceListingCreatephotosInput | string[]
    serviceType: $Enums.FoodServiceType
    priceRange: $Enums.PriceRange
    menuDetails?: string | null
    cuisineType?: FoodServiceListingCreatecuisineTypeInput | string[]
    vegOptions: boolean
    nonVegOptions: boolean
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    operatingHours?: string | null
    deliveryAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutFoodServiceListingsInput
    inquiries?: InquiryCreateNestedManyWithoutFoodServiceListingInput
  }

  export type FoodServiceListingUncheckedCreateWithoutReviewsInput = {
    id?: string
    serviceName: string
    photos?: FoodServiceListingCreatephotosInput | string[]
    serviceType: $Enums.FoodServiceType
    priceRange: $Enums.PriceRange
    menuDetails?: string | null
    cuisineType?: FoodServiceListingCreatecuisineTypeInput | string[]
    vegOptions: boolean
    nonVegOptions: boolean
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    operatingHours?: string | null
    deliveryAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ownerId: string
    inquiries?: InquiryUncheckedCreateNestedManyWithoutFoodServiceListingInput
  }

  export type FoodServiceListingCreateOrConnectWithoutReviewsInput = {
    where: FoodServiceListingWhereUniqueInput
    create: XOR<FoodServiceListingCreateWithoutReviewsInput, FoodServiceListingUncheckedCreateWithoutReviewsInput>
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    university?: NullableStringFieldUpdateOperationsInput | string | null
    stream?: NullableEnumStreamFieldUpdateOperationsInput | $Enums.Stream | null
    serviceType?: NullableEnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType | null
    businessType?: NullableEnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType | null
    accommodationListings?: AccommodationListingUpdateManyWithoutOwnerNestedInput
    foodServiceListings?: FoodServiceListingUpdateManyWithoutOwnerNestedInput
    inquiries?: InquiryUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    university?: NullableStringFieldUpdateOperationsInput | string | null
    stream?: NullableEnumStreamFieldUpdateOperationsInput | $Enums.Stream | null
    serviceType?: NullableEnumServiceTypeFieldUpdateOperationsInput | $Enums.ServiceType | null
    businessType?: NullableEnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType | null
    accommodationListings?: AccommodationListingUncheckedUpdateManyWithoutOwnerNestedInput
    foodServiceListings?: FoodServiceListingUncheckedUpdateManyWithoutOwnerNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type AccommodationListingUpsertWithoutReviewsInput = {
    update: XOR<AccommodationListingUpdateWithoutReviewsInput, AccommodationListingUncheckedUpdateWithoutReviewsInput>
    create: XOR<AccommodationListingCreateWithoutReviewsInput, AccommodationListingUncheckedCreateWithoutReviewsInput>
    where?: AccommodationListingWhereInput
  }

  export type AccommodationListingUpdateToOneWithWhereWithoutReviewsInput = {
    where?: AccommodationListingWhereInput
    data: XOR<AccommodationListingUpdateWithoutReviewsInput, AccommodationListingUncheckedUpdateWithoutReviewsInput>
  }

  export type AccommodationListingUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    propertyName?: StringFieldUpdateOperationsInput | string
    photos?: AccommodationListingUpdatephotosInput | string[]
    dailyRate?: IntFieldUpdateOperationsInput | number
    monthlyRent?: IntFieldUpdateOperationsInput | number
    minStay?: IntFieldUpdateOperationsInput | number
    deposit?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: AccommodationListingUpdateamenitiesInput | string[]
    roomType?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    accommodationType?: EnumAccommodationTypeFieldUpdateOperationsInput | $Enums.AccommodationType
    livingPreferences?: AccommodationListingUpdatelivingPreferencesInput | string[]
    foodPreference?: EnumFoodPreferenceFieldUpdateOperationsInput | $Enums.FoodPreference
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyUniversities?: AccommodationListingUpdatenearbyUniversitiesInput | string[]
    distanceFromUni?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutAccommodationListingsNestedInput
    inquiries?: InquiryUpdateManyWithoutAccommodationListingNestedInput
  }

  export type AccommodationListingUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    propertyName?: StringFieldUpdateOperationsInput | string
    photos?: AccommodationListingUpdatephotosInput | string[]
    dailyRate?: IntFieldUpdateOperationsInput | number
    monthlyRent?: IntFieldUpdateOperationsInput | number
    minStay?: IntFieldUpdateOperationsInput | number
    deposit?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: AccommodationListingUpdateamenitiesInput | string[]
    roomType?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    accommodationType?: EnumAccommodationTypeFieldUpdateOperationsInput | $Enums.AccommodationType
    livingPreferences?: AccommodationListingUpdatelivingPreferencesInput | string[]
    foodPreference?: EnumFoodPreferenceFieldUpdateOperationsInput | $Enums.FoodPreference
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyUniversities?: AccommodationListingUpdatenearbyUniversitiesInput | string[]
    distanceFromUni?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    inquiries?: InquiryUncheckedUpdateManyWithoutAccommodationListingNestedInput
  }

  export type FoodServiceListingUpsertWithoutReviewsInput = {
    update: XOR<FoodServiceListingUpdateWithoutReviewsInput, FoodServiceListingUncheckedUpdateWithoutReviewsInput>
    create: XOR<FoodServiceListingCreateWithoutReviewsInput, FoodServiceListingUncheckedCreateWithoutReviewsInput>
    where?: FoodServiceListingWhereInput
  }

  export type FoodServiceListingUpdateToOneWithWhereWithoutReviewsInput = {
    where?: FoodServiceListingWhereInput
    data: XOR<FoodServiceListingUpdateWithoutReviewsInput, FoodServiceListingUncheckedUpdateWithoutReviewsInput>
  }

  export type FoodServiceListingUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    photos?: FoodServiceListingUpdatephotosInput | string[]
    serviceType?: EnumFoodServiceTypeFieldUpdateOperationsInput | $Enums.FoodServiceType
    priceRange?: EnumPriceRangeFieldUpdateOperationsInput | $Enums.PriceRange
    menuDetails?: NullableStringFieldUpdateOperationsInput | string | null
    cuisineType?: FoodServiceListingUpdatecuisineTypeInput | string[]
    vegOptions?: BoolFieldUpdateOperationsInput | boolean
    nonVegOptions?: BoolFieldUpdateOperationsInput | boolean
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutFoodServiceListingsNestedInput
    inquiries?: InquiryUpdateManyWithoutFoodServiceListingNestedInput
  }

  export type FoodServiceListingUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    photos?: FoodServiceListingUpdatephotosInput | string[]
    serviceType?: EnumFoodServiceTypeFieldUpdateOperationsInput | $Enums.FoodServiceType
    priceRange?: EnumPriceRangeFieldUpdateOperationsInput | $Enums.PriceRange
    menuDetails?: NullableStringFieldUpdateOperationsInput | string | null
    cuisineType?: FoodServiceListingUpdatecuisineTypeInput | string[]
    vegOptions?: BoolFieldUpdateOperationsInput | boolean
    nonVegOptions?: BoolFieldUpdateOperationsInput | boolean
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ownerId?: StringFieldUpdateOperationsInput | string
    inquiries?: InquiryUncheckedUpdateManyWithoutFoodServiceListingNestedInput
  }

  export type ChatMessageCreateWithoutSessionInput = {
    id?: string
    role: $Enums.ChatRole
    content: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ChatMessageUncheckedCreateWithoutSessionInput = {
    id?: string
    role: $Enums.ChatRole
    content: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ChatMessageCreateOrConnectWithoutSessionInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput>
  }

  export type ChatMessageCreateManySessionInputEnvelope = {
    data: ChatMessageCreateManySessionInput | ChatMessageCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutSessionInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutSessionInput, ChatMessageUncheckedUpdateWithoutSessionInput>
    create: XOR<ChatMessageCreateWithoutSessionInput, ChatMessageUncheckedCreateWithoutSessionInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutSessionInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutSessionInput, ChatMessageUncheckedUpdateWithoutSessionInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutSessionInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutSessionInput>
  }

  export type ChatMessageScalarWhereInput = {
    AND?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    OR?: ChatMessageScalarWhereInput[]
    NOT?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    id?: StringFilter<"ChatMessage"> | string
    sessionId?: StringFilter<"ChatMessage"> | string
    role?: EnumChatRoleFilter<"ChatMessage"> | $Enums.ChatRole
    content?: StringFilter<"ChatMessage"> | string
    meta?: JsonNullableFilter<"ChatMessage">
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
  }

  export type ChatSessionCreateWithoutMessagesInput = {
    id?: string
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatSessionUncheckedCreateWithoutMessagesInput = {
    id?: string
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatSessionCreateOrConnectWithoutMessagesInput = {
    where: ChatSessionWhereUniqueInput
    create: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
  }

  export type ChatSessionUpsertWithoutMessagesInput = {
    update: XOR<ChatSessionUpdateWithoutMessagesInput, ChatSessionUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    where?: ChatSessionWhereInput
  }

  export type ChatSessionUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatSessionWhereInput
    data: XOR<ChatSessionUpdateWithoutMessagesInput, ChatSessionUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatSessionUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccommodationListingCreateManyOwnerInput = {
    id?: string
    propertyName: string
    photos?: AccommodationListingCreatephotosInput | string[]
    dailyRate: number
    monthlyRent?: number
    minStay?: number
    deposit?: number | null
    availability?: boolean
    amenities?: AccommodationListingCreateamenitiesInput | string[]
    roomType: $Enums.RoomType
    accommodationType: $Enums.AccommodationType
    livingPreferences?: AccommodationListingCreatelivingPreferencesInput | string[]
    foodPreference: $Enums.FoodPreference
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    nearbyUniversities?: AccommodationListingCreatenearbyUniversitiesInput | string[]
    distanceFromUni?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodServiceListingCreateManyOwnerInput = {
    id?: string
    serviceName: string
    photos?: FoodServiceListingCreatephotosInput | string[]
    serviceType: $Enums.FoodServiceType
    priceRange: $Enums.PriceRange
    menuDetails?: string | null
    cuisineType?: FoodServiceListingCreatecuisineTypeInput | string[]
    vegOptions: boolean
    nonVegOptions: boolean
    address: string
    latitude?: number | null
    longitude?: number | null
    contactInfo: string
    description?: string | null
    operatingHours?: string | null
    deliveryAvailable?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InquiryCreateManyStudentInput = {
    id?: string
    message: string
    studentName: string
    studentEmail: string
    studentPhone: string
    status?: $Enums.InquiryStatus
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accommodationListingId?: string | null
    foodServiceListingId?: string | null
  }

  export type ReviewCreateManyUserInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accommodationListingId?: string | null
    foodServiceListingId?: string | null
  }

  export type AccommodationListingUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    propertyName?: StringFieldUpdateOperationsInput | string
    photos?: AccommodationListingUpdatephotosInput | string[]
    dailyRate?: IntFieldUpdateOperationsInput | number
    monthlyRent?: IntFieldUpdateOperationsInput | number
    minStay?: IntFieldUpdateOperationsInput | number
    deposit?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: AccommodationListingUpdateamenitiesInput | string[]
    roomType?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    accommodationType?: EnumAccommodationTypeFieldUpdateOperationsInput | $Enums.AccommodationType
    livingPreferences?: AccommodationListingUpdatelivingPreferencesInput | string[]
    foodPreference?: EnumFoodPreferenceFieldUpdateOperationsInput | $Enums.FoodPreference
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyUniversities?: AccommodationListingUpdatenearbyUniversitiesInput | string[]
    distanceFromUni?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inquiries?: InquiryUpdateManyWithoutAccommodationListingNestedInput
    reviews?: ReviewUpdateManyWithoutAccommodationListingNestedInput
  }

  export type AccommodationListingUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    propertyName?: StringFieldUpdateOperationsInput | string
    photos?: AccommodationListingUpdatephotosInput | string[]
    dailyRate?: IntFieldUpdateOperationsInput | number
    monthlyRent?: IntFieldUpdateOperationsInput | number
    minStay?: IntFieldUpdateOperationsInput | number
    deposit?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: AccommodationListingUpdateamenitiesInput | string[]
    roomType?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    accommodationType?: EnumAccommodationTypeFieldUpdateOperationsInput | $Enums.AccommodationType
    livingPreferences?: AccommodationListingUpdatelivingPreferencesInput | string[]
    foodPreference?: EnumFoodPreferenceFieldUpdateOperationsInput | $Enums.FoodPreference
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyUniversities?: AccommodationListingUpdatenearbyUniversitiesInput | string[]
    distanceFromUni?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inquiries?: InquiryUncheckedUpdateManyWithoutAccommodationListingNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutAccommodationListingNestedInput
  }

  export type AccommodationListingUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    propertyName?: StringFieldUpdateOperationsInput | string
    photos?: AccommodationListingUpdatephotosInput | string[]
    dailyRate?: IntFieldUpdateOperationsInput | number
    monthlyRent?: IntFieldUpdateOperationsInput | number
    minStay?: IntFieldUpdateOperationsInput | number
    deposit?: NullableIntFieldUpdateOperationsInput | number | null
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: AccommodationListingUpdateamenitiesInput | string[]
    roomType?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    accommodationType?: EnumAccommodationTypeFieldUpdateOperationsInput | $Enums.AccommodationType
    livingPreferences?: AccommodationListingUpdatelivingPreferencesInput | string[]
    foodPreference?: EnumFoodPreferenceFieldUpdateOperationsInput | $Enums.FoodPreference
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    nearbyUniversities?: AccommodationListingUpdatenearbyUniversitiesInput | string[]
    distanceFromUni?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodServiceListingUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    photos?: FoodServiceListingUpdatephotosInput | string[]
    serviceType?: EnumFoodServiceTypeFieldUpdateOperationsInput | $Enums.FoodServiceType
    priceRange?: EnumPriceRangeFieldUpdateOperationsInput | $Enums.PriceRange
    menuDetails?: NullableStringFieldUpdateOperationsInput | string | null
    cuisineType?: FoodServiceListingUpdatecuisineTypeInput | string[]
    vegOptions?: BoolFieldUpdateOperationsInput | boolean
    nonVegOptions?: BoolFieldUpdateOperationsInput | boolean
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inquiries?: InquiryUpdateManyWithoutFoodServiceListingNestedInput
    reviews?: ReviewUpdateManyWithoutFoodServiceListingNestedInput
  }

  export type FoodServiceListingUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    photos?: FoodServiceListingUpdatephotosInput | string[]
    serviceType?: EnumFoodServiceTypeFieldUpdateOperationsInput | $Enums.FoodServiceType
    priceRange?: EnumPriceRangeFieldUpdateOperationsInput | $Enums.PriceRange
    menuDetails?: NullableStringFieldUpdateOperationsInput | string | null
    cuisineType?: FoodServiceListingUpdatecuisineTypeInput | string[]
    vegOptions?: BoolFieldUpdateOperationsInput | boolean
    nonVegOptions?: BoolFieldUpdateOperationsInput | boolean
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inquiries?: InquiryUncheckedUpdateManyWithoutFoodServiceListingNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutFoodServiceListingNestedInput
  }

  export type FoodServiceListingUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceName?: StringFieldUpdateOperationsInput | string
    photos?: FoodServiceListingUpdatephotosInput | string[]
    serviceType?: EnumFoodServiceTypeFieldUpdateOperationsInput | $Enums.FoodServiceType
    priceRange?: EnumPriceRangeFieldUpdateOperationsInput | $Enums.PriceRange
    menuDetails?: NullableStringFieldUpdateOperationsInput | string | null
    cuisineType?: FoodServiceListingUpdatecuisineTypeInput | string[]
    vegOptions?: BoolFieldUpdateOperationsInput | boolean
    nonVegOptions?: BoolFieldUpdateOperationsInput | boolean
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    contactInfo?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    operatingHours?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryAvailable?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InquiryUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    status?: EnumInquiryStatusFieldUpdateOperationsInput | $Enums.InquiryStatus
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accommodationListing?: AccommodationListingUpdateOneWithoutInquiriesNestedInput
    foodServiceListing?: FoodServiceListingUpdateOneWithoutInquiriesNestedInput
  }

  export type InquiryUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    status?: EnumInquiryStatusFieldUpdateOperationsInput | $Enums.InquiryStatus
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accommodationListingId?: NullableStringFieldUpdateOperationsInput | string | null
    foodServiceListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InquiryUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    status?: EnumInquiryStatusFieldUpdateOperationsInput | $Enums.InquiryStatus
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accommodationListingId?: NullableStringFieldUpdateOperationsInput | string | null
    foodServiceListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accommodationListing?: AccommodationListingUpdateOneWithoutReviewsNestedInput
    foodServiceListing?: FoodServiceListingUpdateOneWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accommodationListingId?: NullableStringFieldUpdateOperationsInput | string | null
    foodServiceListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accommodationListingId?: NullableStringFieldUpdateOperationsInput | string | null
    foodServiceListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InquiryCreateManyAccommodationListingInput = {
    id?: string
    message: string
    studentName: string
    studentEmail: string
    studentPhone: string
    status?: $Enums.InquiryStatus
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    studentId: string
    foodServiceListingId?: string | null
  }

  export type ReviewCreateManyAccommodationListingInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    foodServiceListingId?: string | null
  }

  export type InquiryUpdateWithoutAccommodationListingInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    status?: EnumInquiryStatusFieldUpdateOperationsInput | $Enums.InquiryStatus
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutInquiriesNestedInput
    foodServiceListing?: FoodServiceListingUpdateOneWithoutInquiriesNestedInput
  }

  export type InquiryUncheckedUpdateWithoutAccommodationListingInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    status?: EnumInquiryStatusFieldUpdateOperationsInput | $Enums.InquiryStatus
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentId?: StringFieldUpdateOperationsInput | string
    foodServiceListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InquiryUncheckedUpdateManyWithoutAccommodationListingInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    status?: EnumInquiryStatusFieldUpdateOperationsInput | $Enums.InquiryStatus
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentId?: StringFieldUpdateOperationsInput | string
    foodServiceListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUpdateWithoutAccommodationListingInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    foodServiceListing?: FoodServiceListingUpdateOneWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutAccommodationListingInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    foodServiceListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUncheckedUpdateManyWithoutAccommodationListingInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    foodServiceListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InquiryCreateManyFoodServiceListingInput = {
    id?: string
    message: string
    studentName: string
    studentEmail: string
    studentPhone: string
    status?: $Enums.InquiryStatus
    response?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    studentId: string
    accommodationListingId?: string | null
  }

  export type ReviewCreateManyFoodServiceListingInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    accommodationListingId?: string | null
  }

  export type InquiryUpdateWithoutFoodServiceListingInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    status?: EnumInquiryStatusFieldUpdateOperationsInput | $Enums.InquiryStatus
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutInquiriesNestedInput
    accommodationListing?: AccommodationListingUpdateOneWithoutInquiriesNestedInput
  }

  export type InquiryUncheckedUpdateWithoutFoodServiceListingInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    status?: EnumInquiryStatusFieldUpdateOperationsInput | $Enums.InquiryStatus
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentId?: StringFieldUpdateOperationsInput | string
    accommodationListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InquiryUncheckedUpdateManyWithoutFoodServiceListingInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    status?: EnumInquiryStatusFieldUpdateOperationsInput | $Enums.InquiryStatus
    response?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentId?: StringFieldUpdateOperationsInput | string
    accommodationListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUpdateWithoutFoodServiceListingInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    accommodationListing?: AccommodationListingUpdateOneWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutFoodServiceListingInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    accommodationListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReviewUncheckedUpdateManyWithoutFoodServiceListingInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    accommodationListingId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatMessageCreateManySessionInput = {
    id?: string
    role: $Enums.ChatRole
    content: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ChatMessageUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumChatRoleFieldUpdateOperationsInput | $Enums.ChatRole
    content?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumChatRoleFieldUpdateOperationsInput | $Enums.ChatRole
    content?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumChatRoleFieldUpdateOperationsInput | $Enums.ChatRole
    content?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}