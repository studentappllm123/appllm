
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  phone: 'phone',
  userType: 'userType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  university: 'university',
  stream: 'stream',
  serviceType: 'serviceType',
  businessType: 'businessType'
};

exports.Prisma.UniversityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  stream: 'stream',
  city: 'city',
  state: 'state'
};

exports.Prisma.AccommodationListingScalarFieldEnum = {
  id: 'id',
  propertyName: 'propertyName',
  photos: 'photos',
  dailyRate: 'dailyRate',
  monthlyRent: 'monthlyRent',
  minStay: 'minStay',
  deposit: 'deposit',
  availability: 'availability',
  amenities: 'amenities',
  roomType: 'roomType',
  accommodationType: 'accommodationType',
  livingPreferences: 'livingPreferences',
  foodPreference: 'foodPreference',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  contactInfo: 'contactInfo',
  description: 'description',
  nearbyUniversities: 'nearbyUniversities',
  distanceFromUni: 'distanceFromUni',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ownerId: 'ownerId'
};

exports.Prisma.FoodServiceListingScalarFieldEnum = {
  id: 'id',
  serviceName: 'serviceName',
  photos: 'photos',
  serviceType: 'serviceType',
  priceRange: 'priceRange',
  menuDetails: 'menuDetails',
  cuisineType: 'cuisineType',
  vegOptions: 'vegOptions',
  nonVegOptions: 'nonVegOptions',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  contactInfo: 'contactInfo',
  description: 'description',
  operatingHours: 'operatingHours',
  deliveryAvailable: 'deliveryAvailable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ownerId: 'ownerId'
};

exports.Prisma.InquiryScalarFieldEnum = {
  id: 'id',
  message: 'message',
  studentName: 'studentName',
  studentEmail: 'studentEmail',
  studentPhone: 'studentPhone',
  status: 'status',
  response: 'response',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  studentId: 'studentId',
  accommodationListingId: 'accommodationListingId',
  foodServiceListingId: 'foodServiceListingId'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  accommodationListingId: 'accommodationListingId',
  foodServiceListingId: 'foodServiceListingId'
};

exports.Prisma.ChatSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  role: 'role',
  content: 'content',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserType = exports.$Enums.UserType = {
  STUDENT: 'STUDENT',
  PROPERTY_OWNER: 'PROPERTY_OWNER'
};

exports.Stream = exports.$Enums.Stream = {
  ENGINEERING: 'ENGINEERING',
  MEDICAL: 'MEDICAL'
};

exports.ServiceType = exports.$Enums.ServiceType = {
  ACCOMMODATION: 'ACCOMMODATION',
  FOOD: 'FOOD',
  BOTH: 'BOTH'
};

exports.BusinessType = exports.$Enums.BusinessType = {
  INDIVIDUAL: 'INDIVIDUAL',
  COMPANY: 'COMPANY',
  INSTITUTION: 'INSTITUTION'
};

exports.RoomType = exports.$Enums.RoomType = {
  SINGLE: 'SINGLE',
  DOUBLE: 'DOUBLE',
  SHARING: 'SHARING',
  STUDIO: 'STUDIO',
  APARTMENT: 'APARTMENT'
};

exports.AccommodationType = exports.$Enums.AccommodationType = {
  PG: 'PG',
  HOSTEL: 'HOSTEL',
  FLAT: 'FLAT',
  ROOM: 'ROOM',
  APARTMENT: 'APARTMENT'
};

exports.FoodPreference = exports.$Enums.FoodPreference = {
  VEG: 'VEG',
  NON_VEG: 'NON_VEG',
  BOTH: 'BOTH'
};

exports.FoodServiceType = exports.$Enums.FoodServiceType = {
  MESS: 'MESS',
  CANTEEN: 'CANTEEN',
  TIFFIN_SERVICE: 'TIFFIN_SERVICE',
  RESTAURANT: 'RESTAURANT',
  CAFE: 'CAFE'
};

exports.PriceRange = exports.$Enums.PriceRange = {
  BUDGET: 'BUDGET',
  MODERATE: 'MODERATE',
  PREMIUM: 'PREMIUM'
};

exports.InquiryStatus = exports.$Enums.InquiryStatus = {
  PENDING: 'PENDING',
  RESPONDED: 'RESPONDED',
  CLOSED: 'CLOSED'
};

exports.ChatRole = exports.$Enums.ChatRole = {
  user: 'user',
  assistant: 'assistant',
  system: 'system'
};

exports.Prisma.ModelName = {
  User: 'User',
  University: 'University',
  AccommodationListing: 'AccommodationListing',
  FoodServiceListing: 'FoodServiceListing',
  Inquiry: 'Inquiry',
  Review: 'Review',
  ChatSession: 'ChatSession',
  ChatMessage: 'ChatMessage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
